<?php
/**
 * CandidatesApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CandidatesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CandidatesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteCandidateById
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCandidateById($id, $if_match = null)
    {
        $this->deleteCandidateByIdWithHttpInfo($id, $if_match);
    }

    /**
     * Operation deleteCandidateByIdWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCandidateByIdWithHttpInfo($id, $if_match = null)
    {
        $request = $this->deleteCandidateByIdRequest($id, $if_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCandidateByIdAsync
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCandidateByIdAsync($id, $if_match = null)
    {
        return $this->deleteCandidateByIdAsyncWithHttpInfo($id, $if_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCandidateByIdAsyncWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCandidateByIdAsyncWithHttpInfo($id, $if_match = null)
    {
        $returnType = '';
        $request = $this->deleteCandidateByIdRequest($id, $if_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCandidateById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCandidateByIdRequest($id, $if_match = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCandidateById'
            );
        }

        $resourcePath = '/tpdm/candidates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletesCandidates
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TrackedChangesTpdmCandidateDelete[]
     */
    public function deletesCandidates($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        list($response) = $this->deletesCandidatesWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);
        return $response;
    }

    /**
     * Operation deletesCandidatesWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TrackedChangesTpdmCandidateDelete[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deletesCandidatesWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $request = $this->deletesCandidatesRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TrackedChangesTpdmCandidateDelete[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TrackedChangesTpdmCandidateDelete[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TrackedChangesTpdmCandidateDelete[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TrackedChangesTpdmCandidateDelete[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletesCandidatesAsync
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesCandidatesAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        return $this->deletesCandidatesAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletesCandidatesAsyncWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesCandidatesAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\TrackedChangesTpdmCandidateDelete[]';
        $request = $this->deletesCandidatesRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletesCandidates'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletesCandidatesRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CandidatesApi.deletesCandidates, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CandidatesApi.deletesCandidates, must be bigger than or equal to 0.');
        }


        $resourcePath = '/tpdm/candidates/deletes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($min_change_version !== null) {
            if('form' === 'form' && is_array($min_change_version)) {
                foreach($min_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['minChangeVersion'] = $min_change_version;
            }
        }
        // query params
        if ($max_change_version !== null) {
            if('form' === 'form' && is_array($max_change_version)) {
                foreach($max_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxChangeVersion'] = $max_change_version;
            }
        }
        // query params
        if ($total_count !== null) {
            if('form' === 'form' && is_array($total_count)) {
                foreach($total_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalCount'] = $total_count;
            }
        }

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCandidates
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $candidate_identifier A unique alphanumeric code assigned to a candidate. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $birth_country_descriptor The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)
     * @param  string $english_language_exam_descriptor Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)
     * @param  string $gender_descriptor The gender of the candidate. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $sex_descriptor The sex of the candidate. (optional)
     * @param  string $birth_sex_descriptor A person&#39;s sex at birth. (optional)
     * @param  string $birth_state_abbreviation_descriptor The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)
     * @param  string $birth_city The city the student was born in. (optional)
     * @param  \DateTime $birth_date The month, day, and year on which an individual was born. (optional)
     * @param  string $birth_international_province For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)
     * @param  \DateTime $date_entered_us For students born outside of the U.S., the date the student entered the U.S. (optional)
     * @param  string $displacement_status Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)
     * @param  bool $economic_disadvantaged An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)
     * @param  bool $first_generation_student Indicator of whether individual is a first generation college student. (optional)
     * @param  string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param  string $generation_code_suffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id id (optional)
     * @param  string $last_surname The name borne in common by members of a family. (optional)
     * @param  string $maiden_name The individual&#39;s maiden name. (optional)
     * @param  string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param  bool $multiple_birth_status Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)
     * @param  string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual. (optional)
     * @param  string $preferred_first_name The first name the individual prefers, if different from their legal first name (optional)
     * @param  string $preferred_last_surname The last name the individual prefers, if different from their legal last name (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TpdmCandidate[]
     */
    public function getCandidates($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $candidate_identifier = null, $person_id = null, $source_system_descriptor = null, $birth_country_descriptor = null, $english_language_exam_descriptor = null, $gender_descriptor = null, $limited_english_proficiency_descriptor = null, $sex_descriptor = null, $birth_sex_descriptor = null, $birth_state_abbreviation_descriptor = null, $birth_city = null, $birth_date = null, $birth_international_province = null, $date_entered_us = null, $displacement_status = null, $economic_disadvantaged = null, $first_generation_student = null, $first_name = null, $generation_code_suffix = null, $hispanic_latino_ethnicity = null, $id = null, $last_surname = null, $maiden_name = null, $middle_name = null, $multiple_birth_status = null, $personal_title_prefix = null, $preferred_first_name = null, $preferred_last_surname = null, $use_snapshot = false)
    {
        list($response) = $this->getCandidatesWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $candidate_identifier, $person_id, $source_system_descriptor, $birth_country_descriptor, $english_language_exam_descriptor, $gender_descriptor, $limited_english_proficiency_descriptor, $sex_descriptor, $birth_sex_descriptor, $birth_state_abbreviation_descriptor, $birth_city, $birth_date, $birth_international_province, $date_entered_us, $displacement_status, $economic_disadvantaged, $first_generation_student, $first_name, $generation_code_suffix, $hispanic_latino_ethnicity, $id, $last_surname, $maiden_name, $middle_name, $multiple_birth_status, $personal_title_prefix, $preferred_first_name, $preferred_last_surname, $use_snapshot);
        return $response;
    }

    /**
     * Operation getCandidatesWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $candidate_identifier A unique alphanumeric code assigned to a candidate. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $birth_country_descriptor The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)
     * @param  string $english_language_exam_descriptor Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)
     * @param  string $gender_descriptor The gender of the candidate. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $sex_descriptor The sex of the candidate. (optional)
     * @param  string $birth_sex_descriptor A person&#39;s sex at birth. (optional)
     * @param  string $birth_state_abbreviation_descriptor The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)
     * @param  string $birth_city The city the student was born in. (optional)
     * @param  \DateTime $birth_date The month, day, and year on which an individual was born. (optional)
     * @param  string $birth_international_province For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)
     * @param  \DateTime $date_entered_us For students born outside of the U.S., the date the student entered the U.S. (optional)
     * @param  string $displacement_status Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)
     * @param  bool $economic_disadvantaged An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)
     * @param  bool $first_generation_student Indicator of whether individual is a first generation college student. (optional)
     * @param  string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param  string $generation_code_suffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id (optional)
     * @param  string $last_surname The name borne in common by members of a family. (optional)
     * @param  string $maiden_name The individual&#39;s maiden name. (optional)
     * @param  string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param  bool $multiple_birth_status Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)
     * @param  string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual. (optional)
     * @param  string $preferred_first_name The first name the individual prefers, if different from their legal first name (optional)
     * @param  string $preferred_last_surname The last name the individual prefers, if different from their legal last name (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TpdmCandidate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCandidatesWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $candidate_identifier = null, $person_id = null, $source_system_descriptor = null, $birth_country_descriptor = null, $english_language_exam_descriptor = null, $gender_descriptor = null, $limited_english_proficiency_descriptor = null, $sex_descriptor = null, $birth_sex_descriptor = null, $birth_state_abbreviation_descriptor = null, $birth_city = null, $birth_date = null, $birth_international_province = null, $date_entered_us = null, $displacement_status = null, $economic_disadvantaged = null, $first_generation_student = null, $first_name = null, $generation_code_suffix = null, $hispanic_latino_ethnicity = null, $id = null, $last_surname = null, $maiden_name = null, $middle_name = null, $multiple_birth_status = null, $personal_title_prefix = null, $preferred_first_name = null, $preferred_last_surname = null, $use_snapshot = false)
    {
        $request = $this->getCandidatesRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $candidate_identifier, $person_id, $source_system_descriptor, $birth_country_descriptor, $english_language_exam_descriptor, $gender_descriptor, $limited_english_proficiency_descriptor, $sex_descriptor, $birth_sex_descriptor, $birth_state_abbreviation_descriptor, $birth_city, $birth_date, $birth_international_province, $date_entered_us, $displacement_status, $economic_disadvantaged, $first_generation_student, $first_name, $generation_code_suffix, $hispanic_latino_ethnicity, $id, $last_surname, $maiden_name, $middle_name, $multiple_birth_status, $personal_title_prefix, $preferred_first_name, $preferred_last_surname, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TpdmCandidate[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TpdmCandidate[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TpdmCandidate[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TpdmCandidate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCandidatesAsync
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $candidate_identifier A unique alphanumeric code assigned to a candidate. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $birth_country_descriptor The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)
     * @param  string $english_language_exam_descriptor Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)
     * @param  string $gender_descriptor The gender of the candidate. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $sex_descriptor The sex of the candidate. (optional)
     * @param  string $birth_sex_descriptor A person&#39;s sex at birth. (optional)
     * @param  string $birth_state_abbreviation_descriptor The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)
     * @param  string $birth_city The city the student was born in. (optional)
     * @param  \DateTime $birth_date The month, day, and year on which an individual was born. (optional)
     * @param  string $birth_international_province For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)
     * @param  \DateTime $date_entered_us For students born outside of the U.S., the date the student entered the U.S. (optional)
     * @param  string $displacement_status Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)
     * @param  bool $economic_disadvantaged An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)
     * @param  bool $first_generation_student Indicator of whether individual is a first generation college student. (optional)
     * @param  string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param  string $generation_code_suffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id (optional)
     * @param  string $last_surname The name borne in common by members of a family. (optional)
     * @param  string $maiden_name The individual&#39;s maiden name. (optional)
     * @param  string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param  bool $multiple_birth_status Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)
     * @param  string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual. (optional)
     * @param  string $preferred_first_name The first name the individual prefers, if different from their legal first name (optional)
     * @param  string $preferred_last_surname The last name the individual prefers, if different from their legal last name (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCandidatesAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $candidate_identifier = null, $person_id = null, $source_system_descriptor = null, $birth_country_descriptor = null, $english_language_exam_descriptor = null, $gender_descriptor = null, $limited_english_proficiency_descriptor = null, $sex_descriptor = null, $birth_sex_descriptor = null, $birth_state_abbreviation_descriptor = null, $birth_city = null, $birth_date = null, $birth_international_province = null, $date_entered_us = null, $displacement_status = null, $economic_disadvantaged = null, $first_generation_student = null, $first_name = null, $generation_code_suffix = null, $hispanic_latino_ethnicity = null, $id = null, $last_surname = null, $maiden_name = null, $middle_name = null, $multiple_birth_status = null, $personal_title_prefix = null, $preferred_first_name = null, $preferred_last_surname = null, $use_snapshot = false)
    {
        return $this->getCandidatesAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $candidate_identifier, $person_id, $source_system_descriptor, $birth_country_descriptor, $english_language_exam_descriptor, $gender_descriptor, $limited_english_proficiency_descriptor, $sex_descriptor, $birth_sex_descriptor, $birth_state_abbreviation_descriptor, $birth_city, $birth_date, $birth_international_province, $date_entered_us, $displacement_status, $economic_disadvantaged, $first_generation_student, $first_name, $generation_code_suffix, $hispanic_latino_ethnicity, $id, $last_surname, $maiden_name, $middle_name, $multiple_birth_status, $personal_title_prefix, $preferred_first_name, $preferred_last_surname, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCandidatesAsyncWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $candidate_identifier A unique alphanumeric code assigned to a candidate. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $birth_country_descriptor The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)
     * @param  string $english_language_exam_descriptor Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)
     * @param  string $gender_descriptor The gender of the candidate. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $sex_descriptor The sex of the candidate. (optional)
     * @param  string $birth_sex_descriptor A person&#39;s sex at birth. (optional)
     * @param  string $birth_state_abbreviation_descriptor The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)
     * @param  string $birth_city The city the student was born in. (optional)
     * @param  \DateTime $birth_date The month, day, and year on which an individual was born. (optional)
     * @param  string $birth_international_province For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)
     * @param  \DateTime $date_entered_us For students born outside of the U.S., the date the student entered the U.S. (optional)
     * @param  string $displacement_status Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)
     * @param  bool $economic_disadvantaged An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)
     * @param  bool $first_generation_student Indicator of whether individual is a first generation college student. (optional)
     * @param  string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param  string $generation_code_suffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id (optional)
     * @param  string $last_surname The name borne in common by members of a family. (optional)
     * @param  string $maiden_name The individual&#39;s maiden name. (optional)
     * @param  string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param  bool $multiple_birth_status Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)
     * @param  string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual. (optional)
     * @param  string $preferred_first_name The first name the individual prefers, if different from their legal first name (optional)
     * @param  string $preferred_last_surname The last name the individual prefers, if different from their legal last name (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCandidatesAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $candidate_identifier = null, $person_id = null, $source_system_descriptor = null, $birth_country_descriptor = null, $english_language_exam_descriptor = null, $gender_descriptor = null, $limited_english_proficiency_descriptor = null, $sex_descriptor = null, $birth_sex_descriptor = null, $birth_state_abbreviation_descriptor = null, $birth_city = null, $birth_date = null, $birth_international_province = null, $date_entered_us = null, $displacement_status = null, $economic_disadvantaged = null, $first_generation_student = null, $first_name = null, $generation_code_suffix = null, $hispanic_latino_ethnicity = null, $id = null, $last_surname = null, $maiden_name = null, $middle_name = null, $multiple_birth_status = null, $personal_title_prefix = null, $preferred_first_name = null, $preferred_last_surname = null, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\TpdmCandidate[]';
        $request = $this->getCandidatesRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $candidate_identifier, $person_id, $source_system_descriptor, $birth_country_descriptor, $english_language_exam_descriptor, $gender_descriptor, $limited_english_proficiency_descriptor, $sex_descriptor, $birth_sex_descriptor, $birth_state_abbreviation_descriptor, $birth_city, $birth_date, $birth_international_province, $date_entered_us, $displacement_status, $economic_disadvantaged, $first_generation_student, $first_name, $generation_code_suffix, $hispanic_latino_ethnicity, $id, $last_surname, $maiden_name, $middle_name, $multiple_birth_status, $personal_title_prefix, $preferred_first_name, $preferred_last_surname, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCandidates'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $candidate_identifier A unique alphanumeric code assigned to a candidate. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $birth_country_descriptor The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)
     * @param  string $english_language_exam_descriptor Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)
     * @param  string $gender_descriptor The gender of the candidate. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $sex_descriptor The sex of the candidate. (optional)
     * @param  string $birth_sex_descriptor A person&#39;s sex at birth. (optional)
     * @param  string $birth_state_abbreviation_descriptor The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)
     * @param  string $birth_city The city the student was born in. (optional)
     * @param  \DateTime $birth_date The month, day, and year on which an individual was born. (optional)
     * @param  string $birth_international_province For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)
     * @param  \DateTime $date_entered_us For students born outside of the U.S., the date the student entered the U.S. (optional)
     * @param  string $displacement_status Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)
     * @param  bool $economic_disadvantaged An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)
     * @param  bool $first_generation_student Indicator of whether individual is a first generation college student. (optional)
     * @param  string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param  string $generation_code_suffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id (optional)
     * @param  string $last_surname The name borne in common by members of a family. (optional)
     * @param  string $maiden_name The individual&#39;s maiden name. (optional)
     * @param  string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param  bool $multiple_birth_status Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)
     * @param  string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual. (optional)
     * @param  string $preferred_first_name The first name the individual prefers, if different from their legal first name (optional)
     * @param  string $preferred_last_surname The last name the individual prefers, if different from their legal last name (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCandidatesRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $candidate_identifier = null, $person_id = null, $source_system_descriptor = null, $birth_country_descriptor = null, $english_language_exam_descriptor = null, $gender_descriptor = null, $limited_english_proficiency_descriptor = null, $sex_descriptor = null, $birth_sex_descriptor = null, $birth_state_abbreviation_descriptor = null, $birth_city = null, $birth_date = null, $birth_international_province = null, $date_entered_us = null, $displacement_status = null, $economic_disadvantaged = null, $first_generation_student = null, $first_name = null, $generation_code_suffix = null, $hispanic_latino_ethnicity = null, $id = null, $last_surname = null, $maiden_name = null, $middle_name = null, $multiple_birth_status = null, $personal_title_prefix = null, $preferred_first_name = null, $preferred_last_surname = null, $use_snapshot = false)
    {
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CandidatesApi.getCandidates, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CandidatesApi.getCandidates, must be bigger than or equal to 0.');
        }

        if ($candidate_identifier !== null && strlen($candidate_identifier) > 32) {
            throw new \InvalidArgumentException('invalid length for "$candidate_identifier" when calling CandidatesApi.getCandidates, must be smaller than or equal to 32.');
        }

        if ($person_id !== null && strlen($person_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$person_id" when calling CandidatesApi.getCandidates, must be smaller than or equal to 32.');
        }

        if ($source_system_descriptor !== null && strlen($source_system_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$source_system_descriptor" when calling CandidatesApi.getCandidates, must be smaller than or equal to 306.');
        }

        if ($birth_country_descriptor !== null && strlen($birth_country_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$birth_country_descriptor" when calling CandidatesApi.getCandidates, must be smaller than or equal to 306.');
        }

        if ($english_language_exam_descriptor !== null && strlen($english_language_exam_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$english_language_exam_descriptor" when calling CandidatesApi.getCandidates, must be smaller than or equal to 306.');
        }

        if ($gender_descriptor !== null && strlen($gender_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$gender_descriptor" when calling CandidatesApi.getCandidates, must be smaller than or equal to 306.');
        }

        if ($limited_english_proficiency_descriptor !== null && strlen($limited_english_proficiency_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$limited_english_proficiency_descriptor" when calling CandidatesApi.getCandidates, must be smaller than or equal to 306.');
        }

        if ($sex_descriptor !== null && strlen($sex_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$sex_descriptor" when calling CandidatesApi.getCandidates, must be smaller than or equal to 306.');
        }

        if ($birth_sex_descriptor !== null && strlen($birth_sex_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$birth_sex_descriptor" when calling CandidatesApi.getCandidates, must be smaller than or equal to 306.');
        }

        if ($birth_state_abbreviation_descriptor !== null && strlen($birth_state_abbreviation_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$birth_state_abbreviation_descriptor" when calling CandidatesApi.getCandidates, must be smaller than or equal to 306.');
        }

        if ($birth_city !== null && strlen($birth_city) > 30) {
            throw new \InvalidArgumentException('invalid length for "$birth_city" when calling CandidatesApi.getCandidates, must be smaller than or equal to 30.');
        }

        if ($birth_international_province !== null && strlen($birth_international_province) > 150) {
            throw new \InvalidArgumentException('invalid length for "$birth_international_province" when calling CandidatesApi.getCandidates, must be smaller than or equal to 150.');
        }

        if ($displacement_status !== null && strlen($displacement_status) > 30) {
            throw new \InvalidArgumentException('invalid length for "$displacement_status" when calling CandidatesApi.getCandidates, must be smaller than or equal to 30.');
        }

        if ($first_name !== null && strlen($first_name) > 75) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling CandidatesApi.getCandidates, must be smaller than or equal to 75.');
        }

        if ($generation_code_suffix !== null && strlen($generation_code_suffix) > 10) {
            throw new \InvalidArgumentException('invalid length for "$generation_code_suffix" when calling CandidatesApi.getCandidates, must be smaller than or equal to 10.');
        }

        if ($last_surname !== null && strlen($last_surname) > 75) {
            throw new \InvalidArgumentException('invalid length for "$last_surname" when calling CandidatesApi.getCandidates, must be smaller than or equal to 75.');
        }

        if ($maiden_name !== null && strlen($maiden_name) > 75) {
            throw new \InvalidArgumentException('invalid length for "$maiden_name" when calling CandidatesApi.getCandidates, must be smaller than or equal to 75.');
        }

        if ($middle_name !== null && strlen($middle_name) > 75) {
            throw new \InvalidArgumentException('invalid length for "$middle_name" when calling CandidatesApi.getCandidates, must be smaller than or equal to 75.');
        }

        if ($personal_title_prefix !== null && strlen($personal_title_prefix) > 30) {
            throw new \InvalidArgumentException('invalid length for "$personal_title_prefix" when calling CandidatesApi.getCandidates, must be smaller than or equal to 30.');
        }

        if ($preferred_first_name !== null && strlen($preferred_first_name) > 75) {
            throw new \InvalidArgumentException('invalid length for "$preferred_first_name" when calling CandidatesApi.getCandidates, must be smaller than or equal to 75.');
        }

        if ($preferred_last_surname !== null && strlen($preferred_last_surname) > 75) {
            throw new \InvalidArgumentException('invalid length for "$preferred_last_surname" when calling CandidatesApi.getCandidates, must be smaller than or equal to 75.');
        }


        $resourcePath = '/tpdm/candidates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($min_change_version !== null) {
            if('form' === 'form' && is_array($min_change_version)) {
                foreach($min_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['minChangeVersion'] = $min_change_version;
            }
        }
        // query params
        if ($max_change_version !== null) {
            if('form' === 'form' && is_array($max_change_version)) {
                foreach($max_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxChangeVersion'] = $max_change_version;
            }
        }
        // query params
        if ($total_count !== null) {
            if('form' === 'form' && is_array($total_count)) {
                foreach($total_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalCount'] = $total_count;
            }
        }
        // query params
        if ($candidate_identifier !== null) {
            if('form' === 'form' && is_array($candidate_identifier)) {
                foreach($candidate_identifier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['candidateIdentifier'] = $candidate_identifier;
            }
        }
        // query params
        if ($person_id !== null) {
            if('form' === 'form' && is_array($person_id)) {
                foreach($person_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['personId'] = $person_id;
            }
        }
        // query params
        if ($source_system_descriptor !== null) {
            if('form' === 'form' && is_array($source_system_descriptor)) {
                foreach($source_system_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sourceSystemDescriptor'] = $source_system_descriptor;
            }
        }
        // query params
        if ($birth_country_descriptor !== null) {
            if('form' === 'form' && is_array($birth_country_descriptor)) {
                foreach($birth_country_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['birthCountryDescriptor'] = $birth_country_descriptor;
            }
        }
        // query params
        if ($english_language_exam_descriptor !== null) {
            if('form' === 'form' && is_array($english_language_exam_descriptor)) {
                foreach($english_language_exam_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['englishLanguageExamDescriptor'] = $english_language_exam_descriptor;
            }
        }
        // query params
        if ($gender_descriptor !== null) {
            if('form' === 'form' && is_array($gender_descriptor)) {
                foreach($gender_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['genderDescriptor'] = $gender_descriptor;
            }
        }
        // query params
        if ($limited_english_proficiency_descriptor !== null) {
            if('form' === 'form' && is_array($limited_english_proficiency_descriptor)) {
                foreach($limited_english_proficiency_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitedEnglishProficiencyDescriptor'] = $limited_english_proficiency_descriptor;
            }
        }
        // query params
        if ($sex_descriptor !== null) {
            if('form' === 'form' && is_array($sex_descriptor)) {
                foreach($sex_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sexDescriptor'] = $sex_descriptor;
            }
        }
        // query params
        if ($birth_sex_descriptor !== null) {
            if('form' === 'form' && is_array($birth_sex_descriptor)) {
                foreach($birth_sex_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['birthSexDescriptor'] = $birth_sex_descriptor;
            }
        }
        // query params
        if ($birth_state_abbreviation_descriptor !== null) {
            if('form' === 'form' && is_array($birth_state_abbreviation_descriptor)) {
                foreach($birth_state_abbreviation_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['birthStateAbbreviationDescriptor'] = $birth_state_abbreviation_descriptor;
            }
        }
        // query params
        if ($birth_city !== null) {
            if('form' === 'form' && is_array($birth_city)) {
                foreach($birth_city as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['birthCity'] = $birth_city;
            }
        }
        // query params
        if ($birth_date !== null) {
            if('form' === 'form' && is_array($birth_date)) {
                foreach($birth_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['birthDate'] = $birth_date;
            }
        }
        // query params
        if ($birth_international_province !== null) {
            if('form' === 'form' && is_array($birth_international_province)) {
                foreach($birth_international_province as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['birthInternationalProvince'] = $birth_international_province;
            }
        }
        // query params
        if ($date_entered_us !== null) {
            if('form' === 'form' && is_array($date_entered_us)) {
                foreach($date_entered_us as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateEnteredUS'] = $date_entered_us;
            }
        }
        // query params
        if ($displacement_status !== null) {
            if('form' === 'form' && is_array($displacement_status)) {
                foreach($displacement_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['displacementStatus'] = $displacement_status;
            }
        }
        // query params
        if ($economic_disadvantaged !== null) {
            if('form' === 'form' && is_array($economic_disadvantaged)) {
                foreach($economic_disadvantaged as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['economicDisadvantaged'] = $economic_disadvantaged;
            }
        }
        // query params
        if ($first_generation_student !== null) {
            if('form' === 'form' && is_array($first_generation_student)) {
                foreach($first_generation_student as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstGenerationStudent'] = $first_generation_student;
            }
        }
        // query params
        if ($first_name !== null) {
            if('form' === 'form' && is_array($first_name)) {
                foreach($first_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstName'] = $first_name;
            }
        }
        // query params
        if ($generation_code_suffix !== null) {
            if('form' === 'form' && is_array($generation_code_suffix)) {
                foreach($generation_code_suffix as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['generationCodeSuffix'] = $generation_code_suffix;
            }
        }
        // query params
        if ($hispanic_latino_ethnicity !== null) {
            if('form' === 'form' && is_array($hispanic_latino_ethnicity)) {
                foreach($hispanic_latino_ethnicity as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['hispanicLatinoEthnicity'] = $hispanic_latino_ethnicity;
            }
        }
        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }
        // query params
        if ($last_surname !== null) {
            if('form' === 'form' && is_array($last_surname)) {
                foreach($last_surname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['lastSurname'] = $last_surname;
            }
        }
        // query params
        if ($maiden_name !== null) {
            if('form' === 'form' && is_array($maiden_name)) {
                foreach($maiden_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maidenName'] = $maiden_name;
            }
        }
        // query params
        if ($middle_name !== null) {
            if('form' === 'form' && is_array($middle_name)) {
                foreach($middle_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['middleName'] = $middle_name;
            }
        }
        // query params
        if ($multiple_birth_status !== null) {
            if('form' === 'form' && is_array($multiple_birth_status)) {
                foreach($multiple_birth_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['multipleBirthStatus'] = $multiple_birth_status;
            }
        }
        // query params
        if ($personal_title_prefix !== null) {
            if('form' === 'form' && is_array($personal_title_prefix)) {
                foreach($personal_title_prefix as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['personalTitlePrefix'] = $personal_title_prefix;
            }
        }
        // query params
        if ($preferred_first_name !== null) {
            if('form' === 'form' && is_array($preferred_first_name)) {
                foreach($preferred_first_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['preferredFirstName'] = $preferred_first_name;
            }
        }
        // query params
        if ($preferred_last_surname !== null) {
            if('form' === 'form' && is_array($preferred_last_surname)) {
                foreach($preferred_last_surname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['preferredLastSurname'] = $preferred_last_surname;
            }
        }

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCandidatesById
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TpdmCandidate
     */
    public function getCandidatesById($id, $if_none_match = null, $use_snapshot = false)
    {
        list($response) = $this->getCandidatesByIdWithHttpInfo($id, $if_none_match, $use_snapshot);
        return $response;
    }

    /**
     * Operation getCandidatesByIdWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TpdmCandidate, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCandidatesByIdWithHttpInfo($id, $if_none_match = null, $use_snapshot = false)
    {
        $request = $this->getCandidatesByIdRequest($id, $if_none_match, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TpdmCandidate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TpdmCandidate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TpdmCandidate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TpdmCandidate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCandidatesByIdAsync
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCandidatesByIdAsync($id, $if_none_match = null, $use_snapshot = false)
    {
        return $this->getCandidatesByIdAsyncWithHttpInfo($id, $if_none_match, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCandidatesByIdAsyncWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCandidatesByIdAsyncWithHttpInfo($id, $if_none_match = null, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\TpdmCandidate';
        $request = $this->getCandidatesByIdRequest($id, $if_none_match, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCandidatesById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCandidatesByIdRequest($id, $if_none_match = null, $use_snapshot = false)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCandidatesById'
            );
        }

        $resourcePath = '/tpdm/candidates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation keyChangesCandidates
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TrackedChangesTpdmCandidateKeyChange[]
     */
    public function keyChangesCandidates($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        list($response) = $this->keyChangesCandidatesWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);
        return $response;
    }

    /**
     * Operation keyChangesCandidatesWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TrackedChangesTpdmCandidateKeyChange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function keyChangesCandidatesWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $request = $this->keyChangesCandidatesRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TrackedChangesTpdmCandidateKeyChange[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TrackedChangesTpdmCandidateKeyChange[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TrackedChangesTpdmCandidateKeyChange[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TrackedChangesTpdmCandidateKeyChange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation keyChangesCandidatesAsync
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesCandidatesAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        return $this->keyChangesCandidatesAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation keyChangesCandidatesAsyncWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesCandidatesAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\TrackedChangesTpdmCandidateKeyChange[]';
        $request = $this->keyChangesCandidatesRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'keyChangesCandidates'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function keyChangesCandidatesRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CandidatesApi.keyChangesCandidates, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CandidatesApi.keyChangesCandidates, must be bigger than or equal to 0.');
        }


        $resourcePath = '/tpdm/candidates/keyChanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($min_change_version !== null) {
            if('form' === 'form' && is_array($min_change_version)) {
                foreach($min_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['minChangeVersion'] = $min_change_version;
            }
        }
        // query params
        if ($max_change_version !== null) {
            if('form' === 'form' && is_array($max_change_version)) {
                foreach($max_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxChangeVersion'] = $max_change_version;
            }
        }
        // query params
        if ($total_count !== null) {
            if('form' === 'form' && is_array($total_count)) {
                foreach($total_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalCount'] = $total_count;
            }
        }

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCandidate
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\TpdmCandidate $tpdm_candidate The JSON representation of the \&quot;candidate\&quot; resource to be created or updated. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postCandidate($tpdm_candidate)
    {
        $this->postCandidateWithHttpInfo($tpdm_candidate);
    }

    /**
     * Operation postCandidateWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\TpdmCandidate $tpdm_candidate The JSON representation of the \&quot;candidate\&quot; resource to be created or updated. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCandidateWithHttpInfo($tpdm_candidate)
    {
        $request = $this->postCandidateRequest($tpdm_candidate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postCandidateAsync
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\TpdmCandidate $tpdm_candidate The JSON representation of the \&quot;candidate\&quot; resource to be created or updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCandidateAsync($tpdm_candidate)
    {
        return $this->postCandidateAsyncWithHttpInfo($tpdm_candidate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCandidateAsyncWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\TpdmCandidate $tpdm_candidate The JSON representation of the \&quot;candidate\&quot; resource to be created or updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCandidateAsyncWithHttpInfo($tpdm_candidate)
    {
        $returnType = '';
        $request = $this->postCandidateRequest($tpdm_candidate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCandidate'
     *
     * @param  \OpenAPI\Client\Model\TpdmCandidate $tpdm_candidate The JSON representation of the \&quot;candidate\&quot; resource to be created or updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCandidateRequest($tpdm_candidate)
    {
        // verify the required parameter 'tpdm_candidate' is set
        if ($tpdm_candidate === null || (is_array($tpdm_candidate) && count($tpdm_candidate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tpdm_candidate when calling postCandidate'
            );
        }

        $resourcePath = '/tpdm/candidates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($tpdm_candidate)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($tpdm_candidate));
            } else {
                $httpBody = $tpdm_candidate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCandidate
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\TpdmCandidate $tpdm_candidate The JSON representation of the \&quot;candidate\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putCandidate($id, $tpdm_candidate, $if_match = null)
    {
        $this->putCandidateWithHttpInfo($id, $tpdm_candidate, $if_match);
    }

    /**
     * Operation putCandidateWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\TpdmCandidate $tpdm_candidate The JSON representation of the \&quot;candidate\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCandidateWithHttpInfo($id, $tpdm_candidate, $if_match = null)
    {
        $request = $this->putCandidateRequest($id, $tpdm_candidate, $if_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putCandidateAsync
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\TpdmCandidate $tpdm_candidate The JSON representation of the \&quot;candidate\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCandidateAsync($id, $tpdm_candidate, $if_match = null)
    {
        return $this->putCandidateAsyncWithHttpInfo($id, $tpdm_candidate, $if_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCandidateAsyncWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\TpdmCandidate $tpdm_candidate The JSON representation of the \&quot;candidate\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCandidateAsyncWithHttpInfo($id, $tpdm_candidate, $if_match = null)
    {
        $returnType = '';
        $request = $this->putCandidateRequest($id, $tpdm_candidate, $if_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCandidate'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\TpdmCandidate $tpdm_candidate The JSON representation of the \&quot;candidate\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCandidateRequest($id, $tpdm_candidate, $if_match = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putCandidate'
            );
        }
        // verify the required parameter 'tpdm_candidate' is set
        if ($tpdm_candidate === null || (is_array($tpdm_candidate) && count($tpdm_candidate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tpdm_candidate when calling putCandidate'
            );
        }

        $resourcePath = '/tpdm/candidates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($tpdm_candidate)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($tpdm_candidate));
            } else {
                $httpBody = $tpdm_candidate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
