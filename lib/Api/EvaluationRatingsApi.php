<?php
/**
 * EvaluationRatingsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * EvaluationRatingsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EvaluationRatingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEvaluationRatingById
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEvaluationRatingById($id, $if_match = null)
    {
        $this->deleteEvaluationRatingByIdWithHttpInfo($id, $if_match);
    }

    /**
     * Operation deleteEvaluationRatingByIdWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEvaluationRatingByIdWithHttpInfo($id, $if_match = null)
    {
        $request = $this->deleteEvaluationRatingByIdRequest($id, $if_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEvaluationRatingByIdAsync
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEvaluationRatingByIdAsync($id, $if_match = null)
    {
        return $this->deleteEvaluationRatingByIdAsyncWithHttpInfo($id, $if_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEvaluationRatingByIdAsyncWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEvaluationRatingByIdAsyncWithHttpInfo($id, $if_match = null)
    {
        $returnType = '';
        $request = $this->deleteEvaluationRatingByIdRequest($id, $if_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEvaluationRatingById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEvaluationRatingByIdRequest($id, $if_match = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteEvaluationRatingById'
            );
        }

        $resourcePath = '/tpdm/evaluationRatings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletesEvaluationRatings
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingDelete[]
     */
    public function deletesEvaluationRatings($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        list($response) = $this->deletesEvaluationRatingsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);
        return $response;
    }

    /**
     * Operation deletesEvaluationRatingsWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingDelete[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deletesEvaluationRatingsWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $request = $this->deletesEvaluationRatingsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingDelete[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingDelete[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingDelete[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingDelete[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletesEvaluationRatingsAsync
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesEvaluationRatingsAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        return $this->deletesEvaluationRatingsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletesEvaluationRatingsAsyncWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesEvaluationRatingsAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingDelete[]';
        $request = $this->deletesEvaluationRatingsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletesEvaluationRatings'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletesEvaluationRatingsRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling EvaluationRatingsApi.deletesEvaluationRatings, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling EvaluationRatingsApi.deletesEvaluationRatings, must be bigger than or equal to 0.');
        }


        $resourcePath = '/tpdm/evaluationRatings/deletes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($min_change_version !== null) {
            if('form' === 'form' && is_array($min_change_version)) {
                foreach($min_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['minChangeVersion'] = $min_change_version;
            }
        }
        // query params
        if ($max_change_version !== null) {
            if('form' === 'form' && is_array($max_change_version)) {
                foreach($max_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxChangeVersion'] = $max_change_version;
            }
        }
        // query params
        if ($total_count !== null) {
            if('form' === 'form' && is_array($total_count)) {
                foreach($total_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalCount'] = $total_count;
            }
        }

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEvaluationRatings
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $evaluation_date The date for the person&#39;s evaluation. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $evaluation_period_descriptor The period for the evaluation. (optional)
     * @param  string $evaluation_title The name or title of the evaluation. (optional)
     * @param  string $performance_evaluation_title An assigned unique identifier for the performance evaluation. (optional)
     * @param  string $performance_evaluation_type_descriptor The type of performance evaluation conducted. (optional)
     * @param  int $school_year The identifier for the school year. (optional)
     * @param  string $term_descriptor The term for the session during the school year. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $local_course_code The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)
     * @param  int $school_id The identifier assigned to a school. (optional)
     * @param  string $section_identifier The local identifier assigned to a section. (optional)
     * @param  string $session_name The identifier for the calendar for the academic session. (optional)
     * @param  string $evaluation_rating_level_descriptor The rating level achieved based upon the rating or score. (optional)
     * @param  string $evaluation_rating_status_descriptor The Status of the poerformance evaluation. (optional)
     * @param  string $id id (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TpdmEvaluationRating[]
     */
    public function getEvaluationRatings($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $evaluation_date = null, $education_organization_id = null, $evaluation_period_descriptor = null, $evaluation_title = null, $performance_evaluation_title = null, $performance_evaluation_type_descriptor = null, $school_year = null, $term_descriptor = null, $person_id = null, $source_system_descriptor = null, $local_course_code = null, $school_id = null, $section_identifier = null, $session_name = null, $evaluation_rating_level_descriptor = null, $evaluation_rating_status_descriptor = null, $id = null, $use_snapshot = false)
    {
        list($response) = $this->getEvaluationRatingsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $evaluation_date, $education_organization_id, $evaluation_period_descriptor, $evaluation_title, $performance_evaluation_title, $performance_evaluation_type_descriptor, $school_year, $term_descriptor, $person_id, $source_system_descriptor, $local_course_code, $school_id, $section_identifier, $session_name, $evaluation_rating_level_descriptor, $evaluation_rating_status_descriptor, $id, $use_snapshot);
        return $response;
    }

    /**
     * Operation getEvaluationRatingsWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $evaluation_date The date for the person&#39;s evaluation. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $evaluation_period_descriptor The period for the evaluation. (optional)
     * @param  string $evaluation_title The name or title of the evaluation. (optional)
     * @param  string $performance_evaluation_title An assigned unique identifier for the performance evaluation. (optional)
     * @param  string $performance_evaluation_type_descriptor The type of performance evaluation conducted. (optional)
     * @param  int $school_year The identifier for the school year. (optional)
     * @param  string $term_descriptor The term for the session during the school year. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $local_course_code The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)
     * @param  int $school_id The identifier assigned to a school. (optional)
     * @param  string $section_identifier The local identifier assigned to a section. (optional)
     * @param  string $session_name The identifier for the calendar for the academic session. (optional)
     * @param  string $evaluation_rating_level_descriptor The rating level achieved based upon the rating or score. (optional)
     * @param  string $evaluation_rating_status_descriptor The Status of the poerformance evaluation. (optional)
     * @param  string $id (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TpdmEvaluationRating[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEvaluationRatingsWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $evaluation_date = null, $education_organization_id = null, $evaluation_period_descriptor = null, $evaluation_title = null, $performance_evaluation_title = null, $performance_evaluation_type_descriptor = null, $school_year = null, $term_descriptor = null, $person_id = null, $source_system_descriptor = null, $local_course_code = null, $school_id = null, $section_identifier = null, $session_name = null, $evaluation_rating_level_descriptor = null, $evaluation_rating_status_descriptor = null, $id = null, $use_snapshot = false)
    {
        $request = $this->getEvaluationRatingsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $evaluation_date, $education_organization_id, $evaluation_period_descriptor, $evaluation_title, $performance_evaluation_title, $performance_evaluation_type_descriptor, $school_year, $term_descriptor, $person_id, $source_system_descriptor, $local_course_code, $school_id, $section_identifier, $session_name, $evaluation_rating_level_descriptor, $evaluation_rating_status_descriptor, $id, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TpdmEvaluationRating[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TpdmEvaluationRating[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TpdmEvaluationRating[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TpdmEvaluationRating[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEvaluationRatingsAsync
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $evaluation_date The date for the person&#39;s evaluation. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $evaluation_period_descriptor The period for the evaluation. (optional)
     * @param  string $evaluation_title The name or title of the evaluation. (optional)
     * @param  string $performance_evaluation_title An assigned unique identifier for the performance evaluation. (optional)
     * @param  string $performance_evaluation_type_descriptor The type of performance evaluation conducted. (optional)
     * @param  int $school_year The identifier for the school year. (optional)
     * @param  string $term_descriptor The term for the session during the school year. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $local_course_code The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)
     * @param  int $school_id The identifier assigned to a school. (optional)
     * @param  string $section_identifier The local identifier assigned to a section. (optional)
     * @param  string $session_name The identifier for the calendar for the academic session. (optional)
     * @param  string $evaluation_rating_level_descriptor The rating level achieved based upon the rating or score. (optional)
     * @param  string $evaluation_rating_status_descriptor The Status of the poerformance evaluation. (optional)
     * @param  string $id (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEvaluationRatingsAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $evaluation_date = null, $education_organization_id = null, $evaluation_period_descriptor = null, $evaluation_title = null, $performance_evaluation_title = null, $performance_evaluation_type_descriptor = null, $school_year = null, $term_descriptor = null, $person_id = null, $source_system_descriptor = null, $local_course_code = null, $school_id = null, $section_identifier = null, $session_name = null, $evaluation_rating_level_descriptor = null, $evaluation_rating_status_descriptor = null, $id = null, $use_snapshot = false)
    {
        return $this->getEvaluationRatingsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $evaluation_date, $education_organization_id, $evaluation_period_descriptor, $evaluation_title, $performance_evaluation_title, $performance_evaluation_type_descriptor, $school_year, $term_descriptor, $person_id, $source_system_descriptor, $local_course_code, $school_id, $section_identifier, $session_name, $evaluation_rating_level_descriptor, $evaluation_rating_status_descriptor, $id, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEvaluationRatingsAsyncWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $evaluation_date The date for the person&#39;s evaluation. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $evaluation_period_descriptor The period for the evaluation. (optional)
     * @param  string $evaluation_title The name or title of the evaluation. (optional)
     * @param  string $performance_evaluation_title An assigned unique identifier for the performance evaluation. (optional)
     * @param  string $performance_evaluation_type_descriptor The type of performance evaluation conducted. (optional)
     * @param  int $school_year The identifier for the school year. (optional)
     * @param  string $term_descriptor The term for the session during the school year. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $local_course_code The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)
     * @param  int $school_id The identifier assigned to a school. (optional)
     * @param  string $section_identifier The local identifier assigned to a section. (optional)
     * @param  string $session_name The identifier for the calendar for the academic session. (optional)
     * @param  string $evaluation_rating_level_descriptor The rating level achieved based upon the rating or score. (optional)
     * @param  string $evaluation_rating_status_descriptor The Status of the poerformance evaluation. (optional)
     * @param  string $id (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEvaluationRatingsAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $evaluation_date = null, $education_organization_id = null, $evaluation_period_descriptor = null, $evaluation_title = null, $performance_evaluation_title = null, $performance_evaluation_type_descriptor = null, $school_year = null, $term_descriptor = null, $person_id = null, $source_system_descriptor = null, $local_course_code = null, $school_id = null, $section_identifier = null, $session_name = null, $evaluation_rating_level_descriptor = null, $evaluation_rating_status_descriptor = null, $id = null, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\TpdmEvaluationRating[]';
        $request = $this->getEvaluationRatingsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $evaluation_date, $education_organization_id, $evaluation_period_descriptor, $evaluation_title, $performance_evaluation_title, $performance_evaluation_type_descriptor, $school_year, $term_descriptor, $person_id, $source_system_descriptor, $local_course_code, $school_id, $section_identifier, $session_name, $evaluation_rating_level_descriptor, $evaluation_rating_status_descriptor, $id, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEvaluationRatings'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $evaluation_date The date for the person&#39;s evaluation. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $evaluation_period_descriptor The period for the evaluation. (optional)
     * @param  string $evaluation_title The name or title of the evaluation. (optional)
     * @param  string $performance_evaluation_title An assigned unique identifier for the performance evaluation. (optional)
     * @param  string $performance_evaluation_type_descriptor The type of performance evaluation conducted. (optional)
     * @param  int $school_year The identifier for the school year. (optional)
     * @param  string $term_descriptor The term for the session during the school year. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $local_course_code The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)
     * @param  int $school_id The identifier assigned to a school. (optional)
     * @param  string $section_identifier The local identifier assigned to a section. (optional)
     * @param  string $session_name The identifier for the calendar for the academic session. (optional)
     * @param  string $evaluation_rating_level_descriptor The rating level achieved based upon the rating or score. (optional)
     * @param  string $evaluation_rating_status_descriptor The Status of the poerformance evaluation. (optional)
     * @param  string $id (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEvaluationRatingsRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $evaluation_date = null, $education_organization_id = null, $evaluation_period_descriptor = null, $evaluation_title = null, $performance_evaluation_title = null, $performance_evaluation_type_descriptor = null, $school_year = null, $term_descriptor = null, $person_id = null, $source_system_descriptor = null, $local_course_code = null, $school_id = null, $section_identifier = null, $session_name = null, $evaluation_rating_level_descriptor = null, $evaluation_rating_status_descriptor = null, $id = null, $use_snapshot = false)
    {
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling EvaluationRatingsApi.getEvaluationRatings, must be bigger than or equal to 0.');
        }

        if ($evaluation_period_descriptor !== null && strlen($evaluation_period_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$evaluation_period_descriptor" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 306.');
        }

        if ($evaluation_title !== null && strlen($evaluation_title) > 50) {
            throw new \InvalidArgumentException('invalid length for "$evaluation_title" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 50.');
        }

        if ($performance_evaluation_title !== null && strlen($performance_evaluation_title) > 50) {
            throw new \InvalidArgumentException('invalid length for "$performance_evaluation_title" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 50.');
        }

        if ($performance_evaluation_type_descriptor !== null && strlen($performance_evaluation_type_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$performance_evaluation_type_descriptor" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 306.');
        }

        if ($term_descriptor !== null && strlen($term_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$term_descriptor" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 306.');
        }

        if ($person_id !== null && strlen($person_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$person_id" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 32.');
        }

        if ($source_system_descriptor !== null && strlen($source_system_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$source_system_descriptor" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 306.');
        }

        if ($local_course_code !== null && strlen($local_course_code) > 60) {
            throw new \InvalidArgumentException('invalid length for "$local_course_code" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 60.');
        }

        if ($section_identifier !== null && strlen($section_identifier) > 255) {
            throw new \InvalidArgumentException('invalid length for "$section_identifier" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 255.');
        }

        if ($session_name !== null && strlen($session_name) > 60) {
            throw new \InvalidArgumentException('invalid length for "$session_name" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 60.');
        }

        if ($evaluation_rating_level_descriptor !== null && strlen($evaluation_rating_level_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$evaluation_rating_level_descriptor" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 306.');
        }

        if ($evaluation_rating_status_descriptor !== null && strlen($evaluation_rating_status_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$evaluation_rating_status_descriptor" when calling EvaluationRatingsApi.getEvaluationRatings, must be smaller than or equal to 306.');
        }


        $resourcePath = '/tpdm/evaluationRatings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($min_change_version !== null) {
            if('form' === 'form' && is_array($min_change_version)) {
                foreach($min_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['minChangeVersion'] = $min_change_version;
            }
        }
        // query params
        if ($max_change_version !== null) {
            if('form' === 'form' && is_array($max_change_version)) {
                foreach($max_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxChangeVersion'] = $max_change_version;
            }
        }
        // query params
        if ($total_count !== null) {
            if('form' === 'form' && is_array($total_count)) {
                foreach($total_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalCount'] = $total_count;
            }
        }
        // query params
        if ($evaluation_date !== null) {
            if('form' === 'form' && is_array($evaluation_date)) {
                foreach($evaluation_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluationDate'] = $evaluation_date;
            }
        }
        // query params
        if ($education_organization_id !== null) {
            if('form' === 'form' && is_array($education_organization_id)) {
                foreach($education_organization_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['educationOrganizationId'] = $education_organization_id;
            }
        }
        // query params
        if ($evaluation_period_descriptor !== null) {
            if('form' === 'form' && is_array($evaluation_period_descriptor)) {
                foreach($evaluation_period_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluationPeriodDescriptor'] = $evaluation_period_descriptor;
            }
        }
        // query params
        if ($evaluation_title !== null) {
            if('form' === 'form' && is_array($evaluation_title)) {
                foreach($evaluation_title as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluationTitle'] = $evaluation_title;
            }
        }
        // query params
        if ($performance_evaluation_title !== null) {
            if('form' === 'form' && is_array($performance_evaluation_title)) {
                foreach($performance_evaluation_title as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['performanceEvaluationTitle'] = $performance_evaluation_title;
            }
        }
        // query params
        if ($performance_evaluation_type_descriptor !== null) {
            if('form' === 'form' && is_array($performance_evaluation_type_descriptor)) {
                foreach($performance_evaluation_type_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['performanceEvaluationTypeDescriptor'] = $performance_evaluation_type_descriptor;
            }
        }
        // query params
        if ($school_year !== null) {
            if('form' === 'form' && is_array($school_year)) {
                foreach($school_year as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['schoolYear'] = $school_year;
            }
        }
        // query params
        if ($term_descriptor !== null) {
            if('form' === 'form' && is_array($term_descriptor)) {
                foreach($term_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['termDescriptor'] = $term_descriptor;
            }
        }
        // query params
        if ($person_id !== null) {
            if('form' === 'form' && is_array($person_id)) {
                foreach($person_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['personId'] = $person_id;
            }
        }
        // query params
        if ($source_system_descriptor !== null) {
            if('form' === 'form' && is_array($source_system_descriptor)) {
                foreach($source_system_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sourceSystemDescriptor'] = $source_system_descriptor;
            }
        }
        // query params
        if ($local_course_code !== null) {
            if('form' === 'form' && is_array($local_course_code)) {
                foreach($local_course_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['localCourseCode'] = $local_course_code;
            }
        }
        // query params
        if ($school_id !== null) {
            if('form' === 'form' && is_array($school_id)) {
                foreach($school_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['schoolId'] = $school_id;
            }
        }
        // query params
        if ($section_identifier !== null) {
            if('form' === 'form' && is_array($section_identifier)) {
                foreach($section_identifier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sectionIdentifier'] = $section_identifier;
            }
        }
        // query params
        if ($session_name !== null) {
            if('form' === 'form' && is_array($session_name)) {
                foreach($session_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sessionName'] = $session_name;
            }
        }
        // query params
        if ($evaluation_rating_level_descriptor !== null) {
            if('form' === 'form' && is_array($evaluation_rating_level_descriptor)) {
                foreach($evaluation_rating_level_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluationRatingLevelDescriptor'] = $evaluation_rating_level_descriptor;
            }
        }
        // query params
        if ($evaluation_rating_status_descriptor !== null) {
            if('form' === 'form' && is_array($evaluation_rating_status_descriptor)) {
                foreach($evaluation_rating_status_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluationRatingStatusDescriptor'] = $evaluation_rating_status_descriptor;
            }
        }
        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEvaluationRatingsById
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TpdmEvaluationRating
     */
    public function getEvaluationRatingsById($id, $if_none_match = null, $use_snapshot = false)
    {
        list($response) = $this->getEvaluationRatingsByIdWithHttpInfo($id, $if_none_match, $use_snapshot);
        return $response;
    }

    /**
     * Operation getEvaluationRatingsByIdWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TpdmEvaluationRating, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEvaluationRatingsByIdWithHttpInfo($id, $if_none_match = null, $use_snapshot = false)
    {
        $request = $this->getEvaluationRatingsByIdRequest($id, $if_none_match, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TpdmEvaluationRating' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TpdmEvaluationRating', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TpdmEvaluationRating';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TpdmEvaluationRating',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEvaluationRatingsByIdAsync
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEvaluationRatingsByIdAsync($id, $if_none_match = null, $use_snapshot = false)
    {
        return $this->getEvaluationRatingsByIdAsyncWithHttpInfo($id, $if_none_match, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEvaluationRatingsByIdAsyncWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEvaluationRatingsByIdAsyncWithHttpInfo($id, $if_none_match = null, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\TpdmEvaluationRating';
        $request = $this->getEvaluationRatingsByIdRequest($id, $if_none_match, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEvaluationRatingsById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEvaluationRatingsByIdRequest($id, $if_none_match = null, $use_snapshot = false)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEvaluationRatingsById'
            );
        }

        $resourcePath = '/tpdm/evaluationRatings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation keyChangesEvaluationRatings
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingKeyChange[]
     */
    public function keyChangesEvaluationRatings($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        list($response) = $this->keyChangesEvaluationRatingsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);
        return $response;
    }

    /**
     * Operation keyChangesEvaluationRatingsWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingKeyChange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function keyChangesEvaluationRatingsWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $request = $this->keyChangesEvaluationRatingsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingKeyChange[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingKeyChange[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingKeyChange[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingKeyChange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation keyChangesEvaluationRatingsAsync
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesEvaluationRatingsAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        return $this->keyChangesEvaluationRatingsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation keyChangesEvaluationRatingsAsyncWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesEvaluationRatingsAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\TrackedChangesTpdmEvaluationRatingKeyChange[]';
        $request = $this->keyChangesEvaluationRatingsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'keyChangesEvaluationRatings'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function keyChangesEvaluationRatingsRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling EvaluationRatingsApi.keyChangesEvaluationRatings, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling EvaluationRatingsApi.keyChangesEvaluationRatings, must be bigger than or equal to 0.');
        }


        $resourcePath = '/tpdm/evaluationRatings/keyChanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($min_change_version !== null) {
            if('form' === 'form' && is_array($min_change_version)) {
                foreach($min_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['minChangeVersion'] = $min_change_version;
            }
        }
        // query params
        if ($max_change_version !== null) {
            if('form' === 'form' && is_array($max_change_version)) {
                foreach($max_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxChangeVersion'] = $max_change_version;
            }
        }
        // query params
        if ($total_count !== null) {
            if('form' === 'form' && is_array($total_count)) {
                foreach($total_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalCount'] = $total_count;
            }
        }

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEvaluationRating
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\TpdmEvaluationRating $tpdm_evaluation_rating The JSON representation of the \&quot;evaluationRating\&quot; resource to be created or updated. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEvaluationRating($tpdm_evaluation_rating)
    {
        $this->postEvaluationRatingWithHttpInfo($tpdm_evaluation_rating);
    }

    /**
     * Operation postEvaluationRatingWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\TpdmEvaluationRating $tpdm_evaluation_rating The JSON representation of the \&quot;evaluationRating\&quot; resource to be created or updated. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEvaluationRatingWithHttpInfo($tpdm_evaluation_rating)
    {
        $request = $this->postEvaluationRatingRequest($tpdm_evaluation_rating);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEvaluationRatingAsync
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\TpdmEvaluationRating $tpdm_evaluation_rating The JSON representation of the \&quot;evaluationRating\&quot; resource to be created or updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEvaluationRatingAsync($tpdm_evaluation_rating)
    {
        return $this->postEvaluationRatingAsyncWithHttpInfo($tpdm_evaluation_rating)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEvaluationRatingAsyncWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\TpdmEvaluationRating $tpdm_evaluation_rating The JSON representation of the \&quot;evaluationRating\&quot; resource to be created or updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEvaluationRatingAsyncWithHttpInfo($tpdm_evaluation_rating)
    {
        $returnType = '';
        $request = $this->postEvaluationRatingRequest($tpdm_evaluation_rating);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEvaluationRating'
     *
     * @param  \OpenAPI\Client\Model\TpdmEvaluationRating $tpdm_evaluation_rating The JSON representation of the \&quot;evaluationRating\&quot; resource to be created or updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postEvaluationRatingRequest($tpdm_evaluation_rating)
    {
        // verify the required parameter 'tpdm_evaluation_rating' is set
        if ($tpdm_evaluation_rating === null || (is_array($tpdm_evaluation_rating) && count($tpdm_evaluation_rating) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tpdm_evaluation_rating when calling postEvaluationRating'
            );
        }

        $resourcePath = '/tpdm/evaluationRatings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($tpdm_evaluation_rating)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($tpdm_evaluation_rating));
            } else {
                $httpBody = $tpdm_evaluation_rating;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEvaluationRating
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\TpdmEvaluationRating $tpdm_evaluation_rating The JSON representation of the \&quot;evaluationRating\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEvaluationRating($id, $tpdm_evaluation_rating, $if_match = null)
    {
        $this->putEvaluationRatingWithHttpInfo($id, $tpdm_evaluation_rating, $if_match);
    }

    /**
     * Operation putEvaluationRatingWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\TpdmEvaluationRating $tpdm_evaluation_rating The JSON representation of the \&quot;evaluationRating\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEvaluationRatingWithHttpInfo($id, $tpdm_evaluation_rating, $if_match = null)
    {
        $request = $this->putEvaluationRatingRequest($id, $tpdm_evaluation_rating, $if_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEvaluationRatingAsync
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\TpdmEvaluationRating $tpdm_evaluation_rating The JSON representation of the \&quot;evaluationRating\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEvaluationRatingAsync($id, $tpdm_evaluation_rating, $if_match = null)
    {
        return $this->putEvaluationRatingAsyncWithHttpInfo($id, $tpdm_evaluation_rating, $if_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEvaluationRatingAsyncWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\TpdmEvaluationRating $tpdm_evaluation_rating The JSON representation of the \&quot;evaluationRating\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEvaluationRatingAsyncWithHttpInfo($id, $tpdm_evaluation_rating, $if_match = null)
    {
        $returnType = '';
        $request = $this->putEvaluationRatingRequest($id, $tpdm_evaluation_rating, $if_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEvaluationRating'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\TpdmEvaluationRating $tpdm_evaluation_rating The JSON representation of the \&quot;evaluationRating\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putEvaluationRatingRequest($id, $tpdm_evaluation_rating, $if_match = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putEvaluationRating'
            );
        }
        // verify the required parameter 'tpdm_evaluation_rating' is set
        if ($tpdm_evaluation_rating === null || (is_array($tpdm_evaluation_rating) && count($tpdm_evaluation_rating) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tpdm_evaluation_rating when calling putEvaluationRating'
            );
        }

        $resourcePath = '/tpdm/evaluationRatings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($tpdm_evaluation_rating)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($tpdm_evaluation_rating));
            } else {
                $httpBody = $tpdm_evaluation_rating;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
