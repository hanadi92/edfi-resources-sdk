<?php
/**
 * StudentSchoolAssociationsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * StudentSchoolAssociationsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StudentSchoolAssociationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteStudentSchoolAssociationById
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteStudentSchoolAssociationById($id, $if_match = null)
    {
        $this->deleteStudentSchoolAssociationByIdWithHttpInfo($id, $if_match);
    }

    /**
     * Operation deleteStudentSchoolAssociationByIdWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteStudentSchoolAssociationByIdWithHttpInfo($id, $if_match = null)
    {
        $request = $this->deleteStudentSchoolAssociationByIdRequest($id, $if_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteStudentSchoolAssociationByIdAsync
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStudentSchoolAssociationByIdAsync($id, $if_match = null)
    {
        return $this->deleteStudentSchoolAssociationByIdAsyncWithHttpInfo($id, $if_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteStudentSchoolAssociationByIdAsyncWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStudentSchoolAssociationByIdAsyncWithHttpInfo($id, $if_match = null)
    {
        $returnType = '';
        $request = $this->deleteStudentSchoolAssociationByIdRequest($id, $if_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteStudentSchoolAssociationById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteStudentSchoolAssociationByIdRequest($id, $if_match = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteStudentSchoolAssociationById'
            );
        }

        $resourcePath = '/ed-fi/studentSchoolAssociations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletesStudentSchoolAssociations
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationDelete[]
     */
    public function deletesStudentSchoolAssociations($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        list($response) = $this->deletesStudentSchoolAssociationsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);
        return $response;
    }

    /**
     * Operation deletesStudentSchoolAssociationsWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationDelete[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deletesStudentSchoolAssociationsWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $request = $this->deletesStudentSchoolAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationDelete[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationDelete[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationDelete[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationDelete[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletesStudentSchoolAssociationsAsync
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesStudentSchoolAssociationsAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        return $this->deletesStudentSchoolAssociationsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletesStudentSchoolAssociationsAsyncWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesStudentSchoolAssociationsAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationDelete[]';
        $request = $this->deletesStudentSchoolAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletesStudentSchoolAssociations'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletesStudentSchoolAssociationsRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSchoolAssociationsApi.deletesStudentSchoolAssociations, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSchoolAssociationsApi.deletesStudentSchoolAssociations, must be bigger than or equal to 0.');
        }


        $resourcePath = '/ed-fi/studentSchoolAssociations/deletes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($min_change_version !== null) {
            if('form' === 'form' && is_array($min_change_version)) {
                foreach($min_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['minChangeVersion'] = $min_change_version;
            }
        }
        // query params
        if ($max_change_version !== null) {
            if('form' === 'form' && is_array($max_change_version)) {
                foreach($max_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxChangeVersion'] = $max_change_version;
            }
        }
        // query params
        if ($total_count !== null) {
            if('form' === 'form' && is_array($total_count)) {
                foreach($total_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalCount'] = $total_count;
            }
        }

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStudentSchoolAssociations
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $entry_date The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)
     * @param  int $school_id The identifier assigned to a school. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $calendar_code The identifier for the calendar. (optional)
     * @param  int $school_year The school year associated with the student&#39;s enrollment. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $graduation_plan_type_descriptor The type of academic plan the student is following for graduation. (optional)
     * @param  int $graduation_school_year The school year the student is expected to graduate. (optional)
     * @param  int $next_year_school_id The identifier assigned to a school. (optional)
     * @param  int $class_of_school_year Projected high school graduation year. (optional)
     * @param  string $enrollment_type_descriptor The type of enrollment reflected by the StudentSchoolAssociation. (optional)
     * @param  string $entry_grade_level_reason_descriptor The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)
     * @param  string $entry_type_descriptor The process by which a student enters a school during a given academic session. (optional)
     * @param  string $exit_withdraw_type_descriptor The circumstances under which the student exited from membership in an educational institution. (optional)
     * @param  string $entry_grade_level_descriptor The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)
     * @param  string $next_year_grade_level_descriptor The anticipated grade level for the student for the next school year. (optional)
     * @param  string $residency_status_descriptor An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)
     * @param  string $school_choice_basis_descriptor The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)
     * @param  bool $employed_while_enrolled An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)
     * @param  \DateTime $exit_withdraw_date The recorded exit or withdraw date for the student. (optional)
     * @param  double $full_time_equivalency The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)
     * @param  string $id id (optional)
     * @param  bool $primary_school Indicates if a given enrollment record should be considered the primary record for a student. (optional)
     * @param  bool $repeat_grade_indicator An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)
     * @param  bool $school_choice An indication of whether the student enrolled in this school under the provisions for public school choice (optional)
     * @param  bool $school_choice_transfer An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)
     * @param  bool $term_completion_indicator Idicates whether or not a student completed the most recent school term. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EdFiStudentSchoolAssociation[]
     */
    public function getStudentSchoolAssociations($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $entry_date = null, $school_id = null, $student_unique_id = null, $calendar_code = null, $school_year = null, $education_organization_id = null, $graduation_plan_type_descriptor = null, $graduation_school_year = null, $next_year_school_id = null, $class_of_school_year = null, $enrollment_type_descriptor = null, $entry_grade_level_reason_descriptor = null, $entry_type_descriptor = null, $exit_withdraw_type_descriptor = null, $entry_grade_level_descriptor = null, $next_year_grade_level_descriptor = null, $residency_status_descriptor = null, $school_choice_basis_descriptor = null, $employed_while_enrolled = null, $exit_withdraw_date = null, $full_time_equivalency = null, $id = null, $primary_school = null, $repeat_grade_indicator = null, $school_choice = null, $school_choice_transfer = null, $term_completion_indicator = null, $use_snapshot = false)
    {
        list($response) = $this->getStudentSchoolAssociationsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $entry_date, $school_id, $student_unique_id, $calendar_code, $school_year, $education_organization_id, $graduation_plan_type_descriptor, $graduation_school_year, $next_year_school_id, $class_of_school_year, $enrollment_type_descriptor, $entry_grade_level_reason_descriptor, $entry_type_descriptor, $exit_withdraw_type_descriptor, $entry_grade_level_descriptor, $next_year_grade_level_descriptor, $residency_status_descriptor, $school_choice_basis_descriptor, $employed_while_enrolled, $exit_withdraw_date, $full_time_equivalency, $id, $primary_school, $repeat_grade_indicator, $school_choice, $school_choice_transfer, $term_completion_indicator, $use_snapshot);
        return $response;
    }

    /**
     * Operation getStudentSchoolAssociationsWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $entry_date The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)
     * @param  int $school_id The identifier assigned to a school. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $calendar_code The identifier for the calendar. (optional)
     * @param  int $school_year The school year associated with the student&#39;s enrollment. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $graduation_plan_type_descriptor The type of academic plan the student is following for graduation. (optional)
     * @param  int $graduation_school_year The school year the student is expected to graduate. (optional)
     * @param  int $next_year_school_id The identifier assigned to a school. (optional)
     * @param  int $class_of_school_year Projected high school graduation year. (optional)
     * @param  string $enrollment_type_descriptor The type of enrollment reflected by the StudentSchoolAssociation. (optional)
     * @param  string $entry_grade_level_reason_descriptor The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)
     * @param  string $entry_type_descriptor The process by which a student enters a school during a given academic session. (optional)
     * @param  string $exit_withdraw_type_descriptor The circumstances under which the student exited from membership in an educational institution. (optional)
     * @param  string $entry_grade_level_descriptor The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)
     * @param  string $next_year_grade_level_descriptor The anticipated grade level for the student for the next school year. (optional)
     * @param  string $residency_status_descriptor An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)
     * @param  string $school_choice_basis_descriptor The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)
     * @param  bool $employed_while_enrolled An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)
     * @param  \DateTime $exit_withdraw_date The recorded exit or withdraw date for the student. (optional)
     * @param  double $full_time_equivalency The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)
     * @param  string $id (optional)
     * @param  bool $primary_school Indicates if a given enrollment record should be considered the primary record for a student. (optional)
     * @param  bool $repeat_grade_indicator An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)
     * @param  bool $school_choice An indication of whether the student enrolled in this school under the provisions for public school choice (optional)
     * @param  bool $school_choice_transfer An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)
     * @param  bool $term_completion_indicator Idicates whether or not a student completed the most recent school term. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EdFiStudentSchoolAssociation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudentSchoolAssociationsWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $entry_date = null, $school_id = null, $student_unique_id = null, $calendar_code = null, $school_year = null, $education_organization_id = null, $graduation_plan_type_descriptor = null, $graduation_school_year = null, $next_year_school_id = null, $class_of_school_year = null, $enrollment_type_descriptor = null, $entry_grade_level_reason_descriptor = null, $entry_type_descriptor = null, $exit_withdraw_type_descriptor = null, $entry_grade_level_descriptor = null, $next_year_grade_level_descriptor = null, $residency_status_descriptor = null, $school_choice_basis_descriptor = null, $employed_while_enrolled = null, $exit_withdraw_date = null, $full_time_equivalency = null, $id = null, $primary_school = null, $repeat_grade_indicator = null, $school_choice = null, $school_choice_transfer = null, $term_completion_indicator = null, $use_snapshot = false)
    {
        $request = $this->getStudentSchoolAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $entry_date, $school_id, $student_unique_id, $calendar_code, $school_year, $education_organization_id, $graduation_plan_type_descriptor, $graduation_school_year, $next_year_school_id, $class_of_school_year, $enrollment_type_descriptor, $entry_grade_level_reason_descriptor, $entry_type_descriptor, $exit_withdraw_type_descriptor, $entry_grade_level_descriptor, $next_year_grade_level_descriptor, $residency_status_descriptor, $school_choice_basis_descriptor, $employed_while_enrolled, $exit_withdraw_date, $full_time_equivalency, $id, $primary_school, $repeat_grade_indicator, $school_choice, $school_choice_transfer, $term_completion_indicator, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EdFiStudentSchoolAssociation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EdFiStudentSchoolAssociation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EdFiStudentSchoolAssociation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EdFiStudentSchoolAssociation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStudentSchoolAssociationsAsync
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $entry_date The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)
     * @param  int $school_id The identifier assigned to a school. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $calendar_code The identifier for the calendar. (optional)
     * @param  int $school_year The school year associated with the student&#39;s enrollment. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $graduation_plan_type_descriptor The type of academic plan the student is following for graduation. (optional)
     * @param  int $graduation_school_year The school year the student is expected to graduate. (optional)
     * @param  int $next_year_school_id The identifier assigned to a school. (optional)
     * @param  int $class_of_school_year Projected high school graduation year. (optional)
     * @param  string $enrollment_type_descriptor The type of enrollment reflected by the StudentSchoolAssociation. (optional)
     * @param  string $entry_grade_level_reason_descriptor The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)
     * @param  string $entry_type_descriptor The process by which a student enters a school during a given academic session. (optional)
     * @param  string $exit_withdraw_type_descriptor The circumstances under which the student exited from membership in an educational institution. (optional)
     * @param  string $entry_grade_level_descriptor The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)
     * @param  string $next_year_grade_level_descriptor The anticipated grade level for the student for the next school year. (optional)
     * @param  string $residency_status_descriptor An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)
     * @param  string $school_choice_basis_descriptor The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)
     * @param  bool $employed_while_enrolled An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)
     * @param  \DateTime $exit_withdraw_date The recorded exit or withdraw date for the student. (optional)
     * @param  double $full_time_equivalency The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)
     * @param  string $id (optional)
     * @param  bool $primary_school Indicates if a given enrollment record should be considered the primary record for a student. (optional)
     * @param  bool $repeat_grade_indicator An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)
     * @param  bool $school_choice An indication of whether the student enrolled in this school under the provisions for public school choice (optional)
     * @param  bool $school_choice_transfer An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)
     * @param  bool $term_completion_indicator Idicates whether or not a student completed the most recent school term. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSchoolAssociationsAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $entry_date = null, $school_id = null, $student_unique_id = null, $calendar_code = null, $school_year = null, $education_organization_id = null, $graduation_plan_type_descriptor = null, $graduation_school_year = null, $next_year_school_id = null, $class_of_school_year = null, $enrollment_type_descriptor = null, $entry_grade_level_reason_descriptor = null, $entry_type_descriptor = null, $exit_withdraw_type_descriptor = null, $entry_grade_level_descriptor = null, $next_year_grade_level_descriptor = null, $residency_status_descriptor = null, $school_choice_basis_descriptor = null, $employed_while_enrolled = null, $exit_withdraw_date = null, $full_time_equivalency = null, $id = null, $primary_school = null, $repeat_grade_indicator = null, $school_choice = null, $school_choice_transfer = null, $term_completion_indicator = null, $use_snapshot = false)
    {
        return $this->getStudentSchoolAssociationsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $entry_date, $school_id, $student_unique_id, $calendar_code, $school_year, $education_organization_id, $graduation_plan_type_descriptor, $graduation_school_year, $next_year_school_id, $class_of_school_year, $enrollment_type_descriptor, $entry_grade_level_reason_descriptor, $entry_type_descriptor, $exit_withdraw_type_descriptor, $entry_grade_level_descriptor, $next_year_grade_level_descriptor, $residency_status_descriptor, $school_choice_basis_descriptor, $employed_while_enrolled, $exit_withdraw_date, $full_time_equivalency, $id, $primary_school, $repeat_grade_indicator, $school_choice, $school_choice_transfer, $term_completion_indicator, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStudentSchoolAssociationsAsyncWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $entry_date The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)
     * @param  int $school_id The identifier assigned to a school. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $calendar_code The identifier for the calendar. (optional)
     * @param  int $school_year The school year associated with the student&#39;s enrollment. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $graduation_plan_type_descriptor The type of academic plan the student is following for graduation. (optional)
     * @param  int $graduation_school_year The school year the student is expected to graduate. (optional)
     * @param  int $next_year_school_id The identifier assigned to a school. (optional)
     * @param  int $class_of_school_year Projected high school graduation year. (optional)
     * @param  string $enrollment_type_descriptor The type of enrollment reflected by the StudentSchoolAssociation. (optional)
     * @param  string $entry_grade_level_reason_descriptor The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)
     * @param  string $entry_type_descriptor The process by which a student enters a school during a given academic session. (optional)
     * @param  string $exit_withdraw_type_descriptor The circumstances under which the student exited from membership in an educational institution. (optional)
     * @param  string $entry_grade_level_descriptor The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)
     * @param  string $next_year_grade_level_descriptor The anticipated grade level for the student for the next school year. (optional)
     * @param  string $residency_status_descriptor An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)
     * @param  string $school_choice_basis_descriptor The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)
     * @param  bool $employed_while_enrolled An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)
     * @param  \DateTime $exit_withdraw_date The recorded exit or withdraw date for the student. (optional)
     * @param  double $full_time_equivalency The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)
     * @param  string $id (optional)
     * @param  bool $primary_school Indicates if a given enrollment record should be considered the primary record for a student. (optional)
     * @param  bool $repeat_grade_indicator An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)
     * @param  bool $school_choice An indication of whether the student enrolled in this school under the provisions for public school choice (optional)
     * @param  bool $school_choice_transfer An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)
     * @param  bool $term_completion_indicator Idicates whether or not a student completed the most recent school term. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSchoolAssociationsAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $entry_date = null, $school_id = null, $student_unique_id = null, $calendar_code = null, $school_year = null, $education_organization_id = null, $graduation_plan_type_descriptor = null, $graduation_school_year = null, $next_year_school_id = null, $class_of_school_year = null, $enrollment_type_descriptor = null, $entry_grade_level_reason_descriptor = null, $entry_type_descriptor = null, $exit_withdraw_type_descriptor = null, $entry_grade_level_descriptor = null, $next_year_grade_level_descriptor = null, $residency_status_descriptor = null, $school_choice_basis_descriptor = null, $employed_while_enrolled = null, $exit_withdraw_date = null, $full_time_equivalency = null, $id = null, $primary_school = null, $repeat_grade_indicator = null, $school_choice = null, $school_choice_transfer = null, $term_completion_indicator = null, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\EdFiStudentSchoolAssociation[]';
        $request = $this->getStudentSchoolAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $entry_date, $school_id, $student_unique_id, $calendar_code, $school_year, $education_organization_id, $graduation_plan_type_descriptor, $graduation_school_year, $next_year_school_id, $class_of_school_year, $enrollment_type_descriptor, $entry_grade_level_reason_descriptor, $entry_type_descriptor, $exit_withdraw_type_descriptor, $entry_grade_level_descriptor, $next_year_grade_level_descriptor, $residency_status_descriptor, $school_choice_basis_descriptor, $employed_while_enrolled, $exit_withdraw_date, $full_time_equivalency, $id, $primary_school, $repeat_grade_indicator, $school_choice, $school_choice_transfer, $term_completion_indicator, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStudentSchoolAssociations'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $entry_date The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)
     * @param  int $school_id The identifier assigned to a school. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $calendar_code The identifier for the calendar. (optional)
     * @param  int $school_year The school year associated with the student&#39;s enrollment. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $graduation_plan_type_descriptor The type of academic plan the student is following for graduation. (optional)
     * @param  int $graduation_school_year The school year the student is expected to graduate. (optional)
     * @param  int $next_year_school_id The identifier assigned to a school. (optional)
     * @param  int $class_of_school_year Projected high school graduation year. (optional)
     * @param  string $enrollment_type_descriptor The type of enrollment reflected by the StudentSchoolAssociation. (optional)
     * @param  string $entry_grade_level_reason_descriptor The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)
     * @param  string $entry_type_descriptor The process by which a student enters a school during a given academic session. (optional)
     * @param  string $exit_withdraw_type_descriptor The circumstances under which the student exited from membership in an educational institution. (optional)
     * @param  string $entry_grade_level_descriptor The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)
     * @param  string $next_year_grade_level_descriptor The anticipated grade level for the student for the next school year. (optional)
     * @param  string $residency_status_descriptor An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)
     * @param  string $school_choice_basis_descriptor The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)
     * @param  bool $employed_while_enrolled An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)
     * @param  \DateTime $exit_withdraw_date The recorded exit or withdraw date for the student. (optional)
     * @param  double $full_time_equivalency The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)
     * @param  string $id (optional)
     * @param  bool $primary_school Indicates if a given enrollment record should be considered the primary record for a student. (optional)
     * @param  bool $repeat_grade_indicator An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)
     * @param  bool $school_choice An indication of whether the student enrolled in this school under the provisions for public school choice (optional)
     * @param  bool $school_choice_transfer An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)
     * @param  bool $term_completion_indicator Idicates whether or not a student completed the most recent school term. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStudentSchoolAssociationsRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $entry_date = null, $school_id = null, $student_unique_id = null, $calendar_code = null, $school_year = null, $education_organization_id = null, $graduation_plan_type_descriptor = null, $graduation_school_year = null, $next_year_school_id = null, $class_of_school_year = null, $enrollment_type_descriptor = null, $entry_grade_level_reason_descriptor = null, $entry_type_descriptor = null, $exit_withdraw_type_descriptor = null, $entry_grade_level_descriptor = null, $next_year_grade_level_descriptor = null, $residency_status_descriptor = null, $school_choice_basis_descriptor = null, $employed_while_enrolled = null, $exit_withdraw_date = null, $full_time_equivalency = null, $id = null, $primary_school = null, $repeat_grade_indicator = null, $school_choice = null, $school_choice_transfer = null, $term_completion_indicator = null, $use_snapshot = false)
    {
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be bigger than or equal to 0.');
        }

        if ($student_unique_id !== null && strlen($student_unique_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$student_unique_id" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be smaller than or equal to 32.');
        }

        if ($calendar_code !== null && strlen($calendar_code) > 60) {
            throw new \InvalidArgumentException('invalid length for "$calendar_code" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be smaller than or equal to 60.');
        }

        if ($graduation_plan_type_descriptor !== null && strlen($graduation_plan_type_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$graduation_plan_type_descriptor" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be smaller than or equal to 306.');
        }

        if ($enrollment_type_descriptor !== null && strlen($enrollment_type_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$enrollment_type_descriptor" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be smaller than or equal to 306.');
        }

        if ($entry_grade_level_reason_descriptor !== null && strlen($entry_grade_level_reason_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$entry_grade_level_reason_descriptor" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be smaller than or equal to 306.');
        }

        if ($entry_type_descriptor !== null && strlen($entry_type_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$entry_type_descriptor" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be smaller than or equal to 306.');
        }

        if ($exit_withdraw_type_descriptor !== null && strlen($exit_withdraw_type_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$exit_withdraw_type_descriptor" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be smaller than or equal to 306.');
        }

        if ($entry_grade_level_descriptor !== null && strlen($entry_grade_level_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$entry_grade_level_descriptor" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be smaller than or equal to 306.');
        }

        if ($next_year_grade_level_descriptor !== null && strlen($next_year_grade_level_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$next_year_grade_level_descriptor" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be smaller than or equal to 306.');
        }

        if ($residency_status_descriptor !== null && strlen($residency_status_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$residency_status_descriptor" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be smaller than or equal to 306.');
        }

        if ($school_choice_basis_descriptor !== null && strlen($school_choice_basis_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$school_choice_basis_descriptor" when calling StudentSchoolAssociationsApi.getStudentSchoolAssociations, must be smaller than or equal to 306.');
        }


        $resourcePath = '/ed-fi/studentSchoolAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($min_change_version !== null) {
            if('form' === 'form' && is_array($min_change_version)) {
                foreach($min_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['minChangeVersion'] = $min_change_version;
            }
        }
        // query params
        if ($max_change_version !== null) {
            if('form' === 'form' && is_array($max_change_version)) {
                foreach($max_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxChangeVersion'] = $max_change_version;
            }
        }
        // query params
        if ($total_count !== null) {
            if('form' === 'form' && is_array($total_count)) {
                foreach($total_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalCount'] = $total_count;
            }
        }
        // query params
        if ($entry_date !== null) {
            if('form' === 'form' && is_array($entry_date)) {
                foreach($entry_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['entryDate'] = $entry_date;
            }
        }
        // query params
        if ($school_id !== null) {
            if('form' === 'form' && is_array($school_id)) {
                foreach($school_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['schoolId'] = $school_id;
            }
        }
        // query params
        if ($student_unique_id !== null) {
            if('form' === 'form' && is_array($student_unique_id)) {
                foreach($student_unique_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['studentUniqueId'] = $student_unique_id;
            }
        }
        // query params
        if ($calendar_code !== null) {
            if('form' === 'form' && is_array($calendar_code)) {
                foreach($calendar_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['calendarCode'] = $calendar_code;
            }
        }
        // query params
        if ($school_year !== null) {
            if('form' === 'form' && is_array($school_year)) {
                foreach($school_year as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['schoolYear'] = $school_year;
            }
        }
        // query params
        if ($education_organization_id !== null) {
            if('form' === 'form' && is_array($education_organization_id)) {
                foreach($education_organization_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['educationOrganizationId'] = $education_organization_id;
            }
        }
        // query params
        if ($graduation_plan_type_descriptor !== null) {
            if('form' === 'form' && is_array($graduation_plan_type_descriptor)) {
                foreach($graduation_plan_type_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['graduationPlanTypeDescriptor'] = $graduation_plan_type_descriptor;
            }
        }
        // query params
        if ($graduation_school_year !== null) {
            if('form' === 'form' && is_array($graduation_school_year)) {
                foreach($graduation_school_year as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['graduationSchoolYear'] = $graduation_school_year;
            }
        }
        // query params
        if ($next_year_school_id !== null) {
            if('form' === 'form' && is_array($next_year_school_id)) {
                foreach($next_year_school_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nextYearSchoolId'] = $next_year_school_id;
            }
        }
        // query params
        if ($class_of_school_year !== null) {
            if('form' === 'form' && is_array($class_of_school_year)) {
                foreach($class_of_school_year as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['classOfSchoolYear'] = $class_of_school_year;
            }
        }
        // query params
        if ($enrollment_type_descriptor !== null) {
            if('form' === 'form' && is_array($enrollment_type_descriptor)) {
                foreach($enrollment_type_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['enrollmentTypeDescriptor'] = $enrollment_type_descriptor;
            }
        }
        // query params
        if ($entry_grade_level_reason_descriptor !== null) {
            if('form' === 'form' && is_array($entry_grade_level_reason_descriptor)) {
                foreach($entry_grade_level_reason_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['entryGradeLevelReasonDescriptor'] = $entry_grade_level_reason_descriptor;
            }
        }
        // query params
        if ($entry_type_descriptor !== null) {
            if('form' === 'form' && is_array($entry_type_descriptor)) {
                foreach($entry_type_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['entryTypeDescriptor'] = $entry_type_descriptor;
            }
        }
        // query params
        if ($exit_withdraw_type_descriptor !== null) {
            if('form' === 'form' && is_array($exit_withdraw_type_descriptor)) {
                foreach($exit_withdraw_type_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['exitWithdrawTypeDescriptor'] = $exit_withdraw_type_descriptor;
            }
        }
        // query params
        if ($entry_grade_level_descriptor !== null) {
            if('form' === 'form' && is_array($entry_grade_level_descriptor)) {
                foreach($entry_grade_level_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['entryGradeLevelDescriptor'] = $entry_grade_level_descriptor;
            }
        }
        // query params
        if ($next_year_grade_level_descriptor !== null) {
            if('form' === 'form' && is_array($next_year_grade_level_descriptor)) {
                foreach($next_year_grade_level_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nextYearGradeLevelDescriptor'] = $next_year_grade_level_descriptor;
            }
        }
        // query params
        if ($residency_status_descriptor !== null) {
            if('form' === 'form' && is_array($residency_status_descriptor)) {
                foreach($residency_status_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['residencyStatusDescriptor'] = $residency_status_descriptor;
            }
        }
        // query params
        if ($school_choice_basis_descriptor !== null) {
            if('form' === 'form' && is_array($school_choice_basis_descriptor)) {
                foreach($school_choice_basis_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['schoolChoiceBasisDescriptor'] = $school_choice_basis_descriptor;
            }
        }
        // query params
        if ($employed_while_enrolled !== null) {
            if('form' === 'form' && is_array($employed_while_enrolled)) {
                foreach($employed_while_enrolled as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['employedWhileEnrolled'] = $employed_while_enrolled;
            }
        }
        // query params
        if ($exit_withdraw_date !== null) {
            if('form' === 'form' && is_array($exit_withdraw_date)) {
                foreach($exit_withdraw_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['exitWithdrawDate'] = $exit_withdraw_date;
            }
        }
        // query params
        if ($full_time_equivalency !== null) {
            if('form' === 'form' && is_array($full_time_equivalency)) {
                foreach($full_time_equivalency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fullTimeEquivalency'] = $full_time_equivalency;
            }
        }
        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }
        // query params
        if ($primary_school !== null) {
            if('form' === 'form' && is_array($primary_school)) {
                foreach($primary_school as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['primarySchool'] = $primary_school;
            }
        }
        // query params
        if ($repeat_grade_indicator !== null) {
            if('form' === 'form' && is_array($repeat_grade_indicator)) {
                foreach($repeat_grade_indicator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['repeatGradeIndicator'] = $repeat_grade_indicator;
            }
        }
        // query params
        if ($school_choice !== null) {
            if('form' === 'form' && is_array($school_choice)) {
                foreach($school_choice as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['schoolChoice'] = $school_choice;
            }
        }
        // query params
        if ($school_choice_transfer !== null) {
            if('form' === 'form' && is_array($school_choice_transfer)) {
                foreach($school_choice_transfer as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['schoolChoiceTransfer'] = $school_choice_transfer;
            }
        }
        // query params
        if ($term_completion_indicator !== null) {
            if('form' === 'form' && is_array($term_completion_indicator)) {
                foreach($term_completion_indicator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['termCompletionIndicator'] = $term_completion_indicator;
            }
        }

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStudentSchoolAssociationsById
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EdFiStudentSchoolAssociation
     */
    public function getStudentSchoolAssociationsById($id, $if_none_match = null, $use_snapshot = false)
    {
        list($response) = $this->getStudentSchoolAssociationsByIdWithHttpInfo($id, $if_none_match, $use_snapshot);
        return $response;
    }

    /**
     * Operation getStudentSchoolAssociationsByIdWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EdFiStudentSchoolAssociation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudentSchoolAssociationsByIdWithHttpInfo($id, $if_none_match = null, $use_snapshot = false)
    {
        $request = $this->getStudentSchoolAssociationsByIdRequest($id, $if_none_match, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EdFiStudentSchoolAssociation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EdFiStudentSchoolAssociation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EdFiStudentSchoolAssociation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EdFiStudentSchoolAssociation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStudentSchoolAssociationsByIdAsync
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSchoolAssociationsByIdAsync($id, $if_none_match = null, $use_snapshot = false)
    {
        return $this->getStudentSchoolAssociationsByIdAsyncWithHttpInfo($id, $if_none_match, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStudentSchoolAssociationsByIdAsyncWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSchoolAssociationsByIdAsyncWithHttpInfo($id, $if_none_match = null, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\EdFiStudentSchoolAssociation';
        $request = $this->getStudentSchoolAssociationsByIdRequest($id, $if_none_match, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStudentSchoolAssociationsById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStudentSchoolAssociationsByIdRequest($id, $if_none_match = null, $use_snapshot = false)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStudentSchoolAssociationsById'
            );
        }

        $resourcePath = '/ed-fi/studentSchoolAssociations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation keyChangesStudentSchoolAssociations
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationKeyChange[]
     */
    public function keyChangesStudentSchoolAssociations($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        list($response) = $this->keyChangesStudentSchoolAssociationsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);
        return $response;
    }

    /**
     * Operation keyChangesStudentSchoolAssociationsWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationKeyChange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function keyChangesStudentSchoolAssociationsWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $request = $this->keyChangesStudentSchoolAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationKeyChange[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationKeyChange[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationKeyChange[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationKeyChange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation keyChangesStudentSchoolAssociationsAsync
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesStudentSchoolAssociationsAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        return $this->keyChangesStudentSchoolAssociationsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation keyChangesStudentSchoolAssociationsAsyncWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesStudentSchoolAssociationsAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSchoolAssociationKeyChange[]';
        $request = $this->keyChangesStudentSchoolAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'keyChangesStudentSchoolAssociations'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function keyChangesStudentSchoolAssociationsRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSchoolAssociationsApi.keyChangesStudentSchoolAssociations, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSchoolAssociationsApi.keyChangesStudentSchoolAssociations, must be bigger than or equal to 0.');
        }


        $resourcePath = '/ed-fi/studentSchoolAssociations/keyChanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($min_change_version !== null) {
            if('form' === 'form' && is_array($min_change_version)) {
                foreach($min_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['minChangeVersion'] = $min_change_version;
            }
        }
        // query params
        if ($max_change_version !== null) {
            if('form' === 'form' && is_array($max_change_version)) {
                foreach($max_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxChangeVersion'] = $max_change_version;
            }
        }
        // query params
        if ($total_count !== null) {
            if('form' === 'form' && is_array($total_count)) {
                foreach($total_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalCount'] = $total_count;
            }
        }

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postStudentSchoolAssociation
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\EdFiStudentSchoolAssociation $ed_fi_student_school_association The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postStudentSchoolAssociation($ed_fi_student_school_association)
    {
        $this->postStudentSchoolAssociationWithHttpInfo($ed_fi_student_school_association);
    }

    /**
     * Operation postStudentSchoolAssociationWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\EdFiStudentSchoolAssociation $ed_fi_student_school_association The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postStudentSchoolAssociationWithHttpInfo($ed_fi_student_school_association)
    {
        $request = $this->postStudentSchoolAssociationRequest($ed_fi_student_school_association);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postStudentSchoolAssociationAsync
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\EdFiStudentSchoolAssociation $ed_fi_student_school_association The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postStudentSchoolAssociationAsync($ed_fi_student_school_association)
    {
        return $this->postStudentSchoolAssociationAsyncWithHttpInfo($ed_fi_student_school_association)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postStudentSchoolAssociationAsyncWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\EdFiStudentSchoolAssociation $ed_fi_student_school_association The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postStudentSchoolAssociationAsyncWithHttpInfo($ed_fi_student_school_association)
    {
        $returnType = '';
        $request = $this->postStudentSchoolAssociationRequest($ed_fi_student_school_association);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postStudentSchoolAssociation'
     *
     * @param  \OpenAPI\Client\Model\EdFiStudentSchoolAssociation $ed_fi_student_school_association The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postStudentSchoolAssociationRequest($ed_fi_student_school_association)
    {
        // verify the required parameter 'ed_fi_student_school_association' is set
        if ($ed_fi_student_school_association === null || (is_array($ed_fi_student_school_association) && count($ed_fi_student_school_association) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_student_school_association when calling postStudentSchoolAssociation'
            );
        }

        $resourcePath = '/ed-fi/studentSchoolAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($ed_fi_student_school_association)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($ed_fi_student_school_association));
            } else {
                $httpBody = $ed_fi_student_school_association;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putStudentSchoolAssociation
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiStudentSchoolAssociation $ed_fi_student_school_association The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putStudentSchoolAssociation($id, $ed_fi_student_school_association, $if_match = null)
    {
        $this->putStudentSchoolAssociationWithHttpInfo($id, $ed_fi_student_school_association, $if_match);
    }

    /**
     * Operation putStudentSchoolAssociationWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiStudentSchoolAssociation $ed_fi_student_school_association The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putStudentSchoolAssociationWithHttpInfo($id, $ed_fi_student_school_association, $if_match = null)
    {
        $request = $this->putStudentSchoolAssociationRequest($id, $ed_fi_student_school_association, $if_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putStudentSchoolAssociationAsync
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiStudentSchoolAssociation $ed_fi_student_school_association The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putStudentSchoolAssociationAsync($id, $ed_fi_student_school_association, $if_match = null)
    {
        return $this->putStudentSchoolAssociationAsyncWithHttpInfo($id, $ed_fi_student_school_association, $if_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putStudentSchoolAssociationAsyncWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiStudentSchoolAssociation $ed_fi_student_school_association The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putStudentSchoolAssociationAsyncWithHttpInfo($id, $ed_fi_student_school_association, $if_match = null)
    {
        $returnType = '';
        $request = $this->putStudentSchoolAssociationRequest($id, $ed_fi_student_school_association, $if_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putStudentSchoolAssociation'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiStudentSchoolAssociation $ed_fi_student_school_association The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putStudentSchoolAssociationRequest($id, $ed_fi_student_school_association, $if_match = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putStudentSchoolAssociation'
            );
        }
        // verify the required parameter 'ed_fi_student_school_association' is set
        if ($ed_fi_student_school_association === null || (is_array($ed_fi_student_school_association) && count($ed_fi_student_school_association) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_student_school_association when calling putStudentSchoolAssociation'
            );
        }

        $resourcePath = '/ed-fi/studentSchoolAssociations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($ed_fi_student_school_association)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($ed_fi_student_school_association));
            } else {
                $httpBody = $ed_fi_student_school_association;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
