<?php
/**
 * StudentSpecialEducationProgramEligibilityAssociationsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * StudentSpecialEducationProgramEligibilityAssociationsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StudentSpecialEducationProgramEligibilityAssociationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteStudentSpecialEducationProgramEligibilityAssociationById
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteStudentSpecialEducationProgramEligibilityAssociationById($id, $if_match = null)
    {
        $this->deleteStudentSpecialEducationProgramEligibilityAssociationByIdWithHttpInfo($id, $if_match);
    }

    /**
     * Operation deleteStudentSpecialEducationProgramEligibilityAssociationByIdWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteStudentSpecialEducationProgramEligibilityAssociationByIdWithHttpInfo($id, $if_match = null)
    {
        $request = $this->deleteStudentSpecialEducationProgramEligibilityAssociationByIdRequest($id, $if_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteStudentSpecialEducationProgramEligibilityAssociationByIdAsync
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStudentSpecialEducationProgramEligibilityAssociationByIdAsync($id, $if_match = null)
    {
        return $this->deleteStudentSpecialEducationProgramEligibilityAssociationByIdAsyncWithHttpInfo($id, $if_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteStudentSpecialEducationProgramEligibilityAssociationByIdAsyncWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStudentSpecialEducationProgramEligibilityAssociationByIdAsyncWithHttpInfo($id, $if_match = null)
    {
        $returnType = '';
        $request = $this->deleteStudentSpecialEducationProgramEligibilityAssociationByIdRequest($id, $if_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteStudentSpecialEducationProgramEligibilityAssociationById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteStudentSpecialEducationProgramEligibilityAssociationByIdRequest($id, $if_match = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteStudentSpecialEducationProgramEligibilityAssociationById'
            );
        }

        $resourcePath = '/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletesStudentSpecialEducationProgramEligibilityAssociations
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationDelete[]
     */
    public function deletesStudentSpecialEducationProgramEligibilityAssociations($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        list($response) = $this->deletesStudentSpecialEducationProgramEligibilityAssociationsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);
        return $response;
    }

    /**
     * Operation deletesStudentSpecialEducationProgramEligibilityAssociationsWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationDelete[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deletesStudentSpecialEducationProgramEligibilityAssociationsWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $request = $this->deletesStudentSpecialEducationProgramEligibilityAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationDelete[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationDelete[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationDelete[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationDelete[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletesStudentSpecialEducationProgramEligibilityAssociationsAsync
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesStudentSpecialEducationProgramEligibilityAssociationsAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        return $this->deletesStudentSpecialEducationProgramEligibilityAssociationsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletesStudentSpecialEducationProgramEligibilityAssociationsAsyncWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesStudentSpecialEducationProgramEligibilityAssociationsAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationDelete[]';
        $request = $this->deletesStudentSpecialEducationProgramEligibilityAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletesStudentSpecialEducationProgramEligibilityAssociations'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletesStudentSpecialEducationProgramEligibilityAssociationsRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.deletesStudentSpecialEducationProgramEligibilityAssociations, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.deletesStudentSpecialEducationProgramEligibilityAssociations, must be bigger than or equal to 0.');
        }


        $resourcePath = '/ed-fi/studentSpecialEducationProgramEligibilityAssociations/deletes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($min_change_version !== null) {
            if('form' === 'form' && is_array($min_change_version)) {
                foreach($min_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['minChangeVersion'] = $min_change_version;
            }
        }
        // query params
        if ($max_change_version !== null) {
            if('form' === 'form' && is_array($max_change_version)) {
                foreach($max_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxChangeVersion'] = $max_change_version;
            }
        }
        // query params
        if ($total_count !== null) {
            if('form' === 'form' && is_array($total_count)) {
                foreach($total_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalCount'] = $total_count;
            }
        }

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStudentSpecialEducationProgramEligibilityAssociations
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $consent_to_evaluation_received_date Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $eligibility_delay_reason_descriptor The reason why the eligibility determination was completed beyond the required timeframe. (optional)
     * @param  string $eligibility_evaluation_type_descriptor Indicates if this is an initial evaluation or a reevaluation. (optional)
     * @param  string $evaluation_delay_reason_descriptor Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)
     * @param  string $idea_part_descriptor Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)
     * @param  \DateTime $consent_to_evaluation_date The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)
     * @param  \DateTime $eligibility_conference_date The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)
     * @param  \DateTime $eligibility_determination_date Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)
     * @param  \DateTime $eligibility_evaluation_date Indicates the month, day, and year when the written individual evaluation report was completed. (optional)
     * @param  bool $evaluation_complete_indicator Indicates the evaluation completed status. (optional)
     * @param  int $evaluation_delay_days Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)
     * @param  string $evaluation_late_reason Refers to additional information for delay in doing the evaluation. (optional)
     * @param  string $id id (optional)
     * @param  bool $idea_indicator Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)
     * @param  \DateTime $original_eci_services_date The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)
     * @param  \DateTime $transition_conference_date Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)
     * @param  \DateTime $transition_notification_date Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation[]
     */
    public function getStudentSpecialEducationProgramEligibilityAssociations($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $consent_to_evaluation_received_date = null, $education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $eligibility_delay_reason_descriptor = null, $eligibility_evaluation_type_descriptor = null, $evaluation_delay_reason_descriptor = null, $idea_part_descriptor = null, $consent_to_evaluation_date = null, $eligibility_conference_date = null, $eligibility_determination_date = null, $eligibility_evaluation_date = null, $evaluation_complete_indicator = null, $evaluation_delay_days = null, $evaluation_late_reason = null, $id = null, $idea_indicator = null, $original_eci_services_date = null, $transition_conference_date = null, $transition_notification_date = null, $use_snapshot = false)
    {
        list($response) = $this->getStudentSpecialEducationProgramEligibilityAssociationsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $consent_to_evaluation_received_date, $education_organization_id, $program_name, $program_type_descriptor, $student_unique_id, $eligibility_delay_reason_descriptor, $eligibility_evaluation_type_descriptor, $evaluation_delay_reason_descriptor, $idea_part_descriptor, $consent_to_evaluation_date, $eligibility_conference_date, $eligibility_determination_date, $eligibility_evaluation_date, $evaluation_complete_indicator, $evaluation_delay_days, $evaluation_late_reason, $id, $idea_indicator, $original_eci_services_date, $transition_conference_date, $transition_notification_date, $use_snapshot);
        return $response;
    }

    /**
     * Operation getStudentSpecialEducationProgramEligibilityAssociationsWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $consent_to_evaluation_received_date Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $eligibility_delay_reason_descriptor The reason why the eligibility determination was completed beyond the required timeframe. (optional)
     * @param  string $eligibility_evaluation_type_descriptor Indicates if this is an initial evaluation or a reevaluation. (optional)
     * @param  string $evaluation_delay_reason_descriptor Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)
     * @param  string $idea_part_descriptor Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)
     * @param  \DateTime $consent_to_evaluation_date The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)
     * @param  \DateTime $eligibility_conference_date The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)
     * @param  \DateTime $eligibility_determination_date Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)
     * @param  \DateTime $eligibility_evaluation_date Indicates the month, day, and year when the written individual evaluation report was completed. (optional)
     * @param  bool $evaluation_complete_indicator Indicates the evaluation completed status. (optional)
     * @param  int $evaluation_delay_days Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)
     * @param  string $evaluation_late_reason Refers to additional information for delay in doing the evaluation. (optional)
     * @param  string $id (optional)
     * @param  bool $idea_indicator Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)
     * @param  \DateTime $original_eci_services_date The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)
     * @param  \DateTime $transition_conference_date Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)
     * @param  \DateTime $transition_notification_date Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudentSpecialEducationProgramEligibilityAssociationsWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $consent_to_evaluation_received_date = null, $education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $eligibility_delay_reason_descriptor = null, $eligibility_evaluation_type_descriptor = null, $evaluation_delay_reason_descriptor = null, $idea_part_descriptor = null, $consent_to_evaluation_date = null, $eligibility_conference_date = null, $eligibility_determination_date = null, $eligibility_evaluation_date = null, $evaluation_complete_indicator = null, $evaluation_delay_days = null, $evaluation_late_reason = null, $id = null, $idea_indicator = null, $original_eci_services_date = null, $transition_conference_date = null, $transition_notification_date = null, $use_snapshot = false)
    {
        $request = $this->getStudentSpecialEducationProgramEligibilityAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $consent_to_evaluation_received_date, $education_organization_id, $program_name, $program_type_descriptor, $student_unique_id, $eligibility_delay_reason_descriptor, $eligibility_evaluation_type_descriptor, $evaluation_delay_reason_descriptor, $idea_part_descriptor, $consent_to_evaluation_date, $eligibility_conference_date, $eligibility_determination_date, $eligibility_evaluation_date, $evaluation_complete_indicator, $evaluation_delay_days, $evaluation_late_reason, $id, $idea_indicator, $original_eci_services_date, $transition_conference_date, $transition_notification_date, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStudentSpecialEducationProgramEligibilityAssociationsAsync
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $consent_to_evaluation_received_date Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $eligibility_delay_reason_descriptor The reason why the eligibility determination was completed beyond the required timeframe. (optional)
     * @param  string $eligibility_evaluation_type_descriptor Indicates if this is an initial evaluation or a reevaluation. (optional)
     * @param  string $evaluation_delay_reason_descriptor Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)
     * @param  string $idea_part_descriptor Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)
     * @param  \DateTime $consent_to_evaluation_date The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)
     * @param  \DateTime $eligibility_conference_date The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)
     * @param  \DateTime $eligibility_determination_date Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)
     * @param  \DateTime $eligibility_evaluation_date Indicates the month, day, and year when the written individual evaluation report was completed. (optional)
     * @param  bool $evaluation_complete_indicator Indicates the evaluation completed status. (optional)
     * @param  int $evaluation_delay_days Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)
     * @param  string $evaluation_late_reason Refers to additional information for delay in doing the evaluation. (optional)
     * @param  string $id (optional)
     * @param  bool $idea_indicator Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)
     * @param  \DateTime $original_eci_services_date The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)
     * @param  \DateTime $transition_conference_date Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)
     * @param  \DateTime $transition_notification_date Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSpecialEducationProgramEligibilityAssociationsAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $consent_to_evaluation_received_date = null, $education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $eligibility_delay_reason_descriptor = null, $eligibility_evaluation_type_descriptor = null, $evaluation_delay_reason_descriptor = null, $idea_part_descriptor = null, $consent_to_evaluation_date = null, $eligibility_conference_date = null, $eligibility_determination_date = null, $eligibility_evaluation_date = null, $evaluation_complete_indicator = null, $evaluation_delay_days = null, $evaluation_late_reason = null, $id = null, $idea_indicator = null, $original_eci_services_date = null, $transition_conference_date = null, $transition_notification_date = null, $use_snapshot = false)
    {
        return $this->getStudentSpecialEducationProgramEligibilityAssociationsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $consent_to_evaluation_received_date, $education_organization_id, $program_name, $program_type_descriptor, $student_unique_id, $eligibility_delay_reason_descriptor, $eligibility_evaluation_type_descriptor, $evaluation_delay_reason_descriptor, $idea_part_descriptor, $consent_to_evaluation_date, $eligibility_conference_date, $eligibility_determination_date, $eligibility_evaluation_date, $evaluation_complete_indicator, $evaluation_delay_days, $evaluation_late_reason, $id, $idea_indicator, $original_eci_services_date, $transition_conference_date, $transition_notification_date, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStudentSpecialEducationProgramEligibilityAssociationsAsyncWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $consent_to_evaluation_received_date Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $eligibility_delay_reason_descriptor The reason why the eligibility determination was completed beyond the required timeframe. (optional)
     * @param  string $eligibility_evaluation_type_descriptor Indicates if this is an initial evaluation or a reevaluation. (optional)
     * @param  string $evaluation_delay_reason_descriptor Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)
     * @param  string $idea_part_descriptor Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)
     * @param  \DateTime $consent_to_evaluation_date The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)
     * @param  \DateTime $eligibility_conference_date The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)
     * @param  \DateTime $eligibility_determination_date Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)
     * @param  \DateTime $eligibility_evaluation_date Indicates the month, day, and year when the written individual evaluation report was completed. (optional)
     * @param  bool $evaluation_complete_indicator Indicates the evaluation completed status. (optional)
     * @param  int $evaluation_delay_days Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)
     * @param  string $evaluation_late_reason Refers to additional information for delay in doing the evaluation. (optional)
     * @param  string $id (optional)
     * @param  bool $idea_indicator Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)
     * @param  \DateTime $original_eci_services_date The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)
     * @param  \DateTime $transition_conference_date Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)
     * @param  \DateTime $transition_notification_date Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSpecialEducationProgramEligibilityAssociationsAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $consent_to_evaluation_received_date = null, $education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $eligibility_delay_reason_descriptor = null, $eligibility_evaluation_type_descriptor = null, $evaluation_delay_reason_descriptor = null, $idea_part_descriptor = null, $consent_to_evaluation_date = null, $eligibility_conference_date = null, $eligibility_determination_date = null, $eligibility_evaluation_date = null, $evaluation_complete_indicator = null, $evaluation_delay_days = null, $evaluation_late_reason = null, $id = null, $idea_indicator = null, $original_eci_services_date = null, $transition_conference_date = null, $transition_notification_date = null, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation[]';
        $request = $this->getStudentSpecialEducationProgramEligibilityAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $consent_to_evaluation_received_date, $education_organization_id, $program_name, $program_type_descriptor, $student_unique_id, $eligibility_delay_reason_descriptor, $eligibility_evaluation_type_descriptor, $evaluation_delay_reason_descriptor, $idea_part_descriptor, $consent_to_evaluation_date, $eligibility_conference_date, $eligibility_determination_date, $eligibility_evaluation_date, $evaluation_complete_indicator, $evaluation_delay_days, $evaluation_late_reason, $id, $idea_indicator, $original_eci_services_date, $transition_conference_date, $transition_notification_date, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStudentSpecialEducationProgramEligibilityAssociations'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  \DateTime $consent_to_evaluation_received_date Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $eligibility_delay_reason_descriptor The reason why the eligibility determination was completed beyond the required timeframe. (optional)
     * @param  string $eligibility_evaluation_type_descriptor Indicates if this is an initial evaluation or a reevaluation. (optional)
     * @param  string $evaluation_delay_reason_descriptor Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)
     * @param  string $idea_part_descriptor Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)
     * @param  \DateTime $consent_to_evaluation_date The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)
     * @param  \DateTime $eligibility_conference_date The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)
     * @param  \DateTime $eligibility_determination_date Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)
     * @param  \DateTime $eligibility_evaluation_date Indicates the month, day, and year when the written individual evaluation report was completed. (optional)
     * @param  bool $evaluation_complete_indicator Indicates the evaluation completed status. (optional)
     * @param  int $evaluation_delay_days Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)
     * @param  string $evaluation_late_reason Refers to additional information for delay in doing the evaluation. (optional)
     * @param  string $id (optional)
     * @param  bool $idea_indicator Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)
     * @param  \DateTime $original_eci_services_date The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)
     * @param  \DateTime $transition_conference_date Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)
     * @param  \DateTime $transition_notification_date Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStudentSpecialEducationProgramEligibilityAssociationsRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $consent_to_evaluation_received_date = null, $education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $eligibility_delay_reason_descriptor = null, $eligibility_evaluation_type_descriptor = null, $evaluation_delay_reason_descriptor = null, $idea_part_descriptor = null, $consent_to_evaluation_date = null, $eligibility_conference_date = null, $eligibility_determination_date = null, $eligibility_evaluation_date = null, $evaluation_complete_indicator = null, $evaluation_delay_days = null, $evaluation_late_reason = null, $id = null, $idea_indicator = null, $original_eci_services_date = null, $transition_conference_date = null, $transition_notification_date = null, $use_snapshot = false)
    {
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.getStudentSpecialEducationProgramEligibilityAssociations, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.getStudentSpecialEducationProgramEligibilityAssociations, must be bigger than or equal to 0.');
        }

        if ($program_name !== null && strlen($program_name) > 60) {
            throw new \InvalidArgumentException('invalid length for "$program_name" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.getStudentSpecialEducationProgramEligibilityAssociations, must be smaller than or equal to 60.');
        }

        if ($program_type_descriptor !== null && strlen($program_type_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$program_type_descriptor" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.getStudentSpecialEducationProgramEligibilityAssociations, must be smaller than or equal to 306.');
        }

        if ($student_unique_id !== null && strlen($student_unique_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$student_unique_id" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.getStudentSpecialEducationProgramEligibilityAssociations, must be smaller than or equal to 32.');
        }

        if ($eligibility_delay_reason_descriptor !== null && strlen($eligibility_delay_reason_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$eligibility_delay_reason_descriptor" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.getStudentSpecialEducationProgramEligibilityAssociations, must be smaller than or equal to 306.');
        }

        if ($eligibility_evaluation_type_descriptor !== null && strlen($eligibility_evaluation_type_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$eligibility_evaluation_type_descriptor" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.getStudentSpecialEducationProgramEligibilityAssociations, must be smaller than or equal to 306.');
        }

        if ($evaluation_delay_reason_descriptor !== null && strlen($evaluation_delay_reason_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$evaluation_delay_reason_descriptor" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.getStudentSpecialEducationProgramEligibilityAssociations, must be smaller than or equal to 306.');
        }

        if ($idea_part_descriptor !== null && strlen($idea_part_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$idea_part_descriptor" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.getStudentSpecialEducationProgramEligibilityAssociations, must be smaller than or equal to 306.');
        }

        if ($evaluation_late_reason !== null && strlen($evaluation_late_reason) > 255) {
            throw new \InvalidArgumentException('invalid length for "$evaluation_late_reason" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.getStudentSpecialEducationProgramEligibilityAssociations, must be smaller than or equal to 255.');
        }


        $resourcePath = '/ed-fi/studentSpecialEducationProgramEligibilityAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($min_change_version !== null) {
            if('form' === 'form' && is_array($min_change_version)) {
                foreach($min_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['minChangeVersion'] = $min_change_version;
            }
        }
        // query params
        if ($max_change_version !== null) {
            if('form' === 'form' && is_array($max_change_version)) {
                foreach($max_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxChangeVersion'] = $max_change_version;
            }
        }
        // query params
        if ($total_count !== null) {
            if('form' === 'form' && is_array($total_count)) {
                foreach($total_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalCount'] = $total_count;
            }
        }
        // query params
        if ($consent_to_evaluation_received_date !== null) {
            if('form' === 'form' && is_array($consent_to_evaluation_received_date)) {
                foreach($consent_to_evaluation_received_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['consentToEvaluationReceivedDate'] = $consent_to_evaluation_received_date;
            }
        }
        // query params
        if ($education_organization_id !== null) {
            if('form' === 'form' && is_array($education_organization_id)) {
                foreach($education_organization_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['educationOrganizationId'] = $education_organization_id;
            }
        }
        // query params
        if ($program_name !== null) {
            if('form' === 'form' && is_array($program_name)) {
                foreach($program_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['programName'] = $program_name;
            }
        }
        // query params
        if ($program_type_descriptor !== null) {
            if('form' === 'form' && is_array($program_type_descriptor)) {
                foreach($program_type_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['programTypeDescriptor'] = $program_type_descriptor;
            }
        }
        // query params
        if ($student_unique_id !== null) {
            if('form' === 'form' && is_array($student_unique_id)) {
                foreach($student_unique_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['studentUniqueId'] = $student_unique_id;
            }
        }
        // query params
        if ($eligibility_delay_reason_descriptor !== null) {
            if('form' === 'form' && is_array($eligibility_delay_reason_descriptor)) {
                foreach($eligibility_delay_reason_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eligibilityDelayReasonDescriptor'] = $eligibility_delay_reason_descriptor;
            }
        }
        // query params
        if ($eligibility_evaluation_type_descriptor !== null) {
            if('form' === 'form' && is_array($eligibility_evaluation_type_descriptor)) {
                foreach($eligibility_evaluation_type_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eligibilityEvaluationTypeDescriptor'] = $eligibility_evaluation_type_descriptor;
            }
        }
        // query params
        if ($evaluation_delay_reason_descriptor !== null) {
            if('form' === 'form' && is_array($evaluation_delay_reason_descriptor)) {
                foreach($evaluation_delay_reason_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluationDelayReasonDescriptor'] = $evaluation_delay_reason_descriptor;
            }
        }
        // query params
        if ($idea_part_descriptor !== null) {
            if('form' === 'form' && is_array($idea_part_descriptor)) {
                foreach($idea_part_descriptor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ideaPartDescriptor'] = $idea_part_descriptor;
            }
        }
        // query params
        if ($consent_to_evaluation_date !== null) {
            if('form' === 'form' && is_array($consent_to_evaluation_date)) {
                foreach($consent_to_evaluation_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['consentToEvaluationDate'] = $consent_to_evaluation_date;
            }
        }
        // query params
        if ($eligibility_conference_date !== null) {
            if('form' === 'form' && is_array($eligibility_conference_date)) {
                foreach($eligibility_conference_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eligibilityConferenceDate'] = $eligibility_conference_date;
            }
        }
        // query params
        if ($eligibility_determination_date !== null) {
            if('form' === 'form' && is_array($eligibility_determination_date)) {
                foreach($eligibility_determination_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eligibilityDeterminationDate'] = $eligibility_determination_date;
            }
        }
        // query params
        if ($eligibility_evaluation_date !== null) {
            if('form' === 'form' && is_array($eligibility_evaluation_date)) {
                foreach($eligibility_evaluation_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eligibilityEvaluationDate'] = $eligibility_evaluation_date;
            }
        }
        // query params
        if ($evaluation_complete_indicator !== null) {
            if('form' === 'form' && is_array($evaluation_complete_indicator)) {
                foreach($evaluation_complete_indicator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluationCompleteIndicator'] = $evaluation_complete_indicator;
            }
        }
        // query params
        if ($evaluation_delay_days !== null) {
            if('form' === 'form' && is_array($evaluation_delay_days)) {
                foreach($evaluation_delay_days as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluationDelayDays'] = $evaluation_delay_days;
            }
        }
        // query params
        if ($evaluation_late_reason !== null) {
            if('form' === 'form' && is_array($evaluation_late_reason)) {
                foreach($evaluation_late_reason as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluationLateReason'] = $evaluation_late_reason;
            }
        }
        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }
        // query params
        if ($idea_indicator !== null) {
            if('form' === 'form' && is_array($idea_indicator)) {
                foreach($idea_indicator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ideaIndicator'] = $idea_indicator;
            }
        }
        // query params
        if ($original_eci_services_date !== null) {
            if('form' === 'form' && is_array($original_eci_services_date)) {
                foreach($original_eci_services_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originalECIServicesDate'] = $original_eci_services_date;
            }
        }
        // query params
        if ($transition_conference_date !== null) {
            if('form' === 'form' && is_array($transition_conference_date)) {
                foreach($transition_conference_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['transitionConferenceDate'] = $transition_conference_date;
            }
        }
        // query params
        if ($transition_notification_date !== null) {
            if('form' === 'form' && is_array($transition_notification_date)) {
                foreach($transition_notification_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['transitionNotificationDate'] = $transition_notification_date;
            }
        }

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStudentSpecialEducationProgramEligibilityAssociationsById
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation
     */
    public function getStudentSpecialEducationProgramEligibilityAssociationsById($id, $if_none_match = null, $use_snapshot = false)
    {
        list($response) = $this->getStudentSpecialEducationProgramEligibilityAssociationsByIdWithHttpInfo($id, $if_none_match, $use_snapshot);
        return $response;
    }

    /**
     * Operation getStudentSpecialEducationProgramEligibilityAssociationsByIdWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudentSpecialEducationProgramEligibilityAssociationsByIdWithHttpInfo($id, $if_none_match = null, $use_snapshot = false)
    {
        $request = $this->getStudentSpecialEducationProgramEligibilityAssociationsByIdRequest($id, $if_none_match, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStudentSpecialEducationProgramEligibilityAssociationsByIdAsync
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSpecialEducationProgramEligibilityAssociationsByIdAsync($id, $if_none_match = null, $use_snapshot = false)
    {
        return $this->getStudentSpecialEducationProgramEligibilityAssociationsByIdAsyncWithHttpInfo($id, $if_none_match, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStudentSpecialEducationProgramEligibilityAssociationsByIdAsyncWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSpecialEducationProgramEligibilityAssociationsByIdAsyncWithHttpInfo($id, $if_none_match = null, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation';
        $request = $this->getStudentSpecialEducationProgramEligibilityAssociationsByIdRequest($id, $if_none_match, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStudentSpecialEducationProgramEligibilityAssociationsById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStudentSpecialEducationProgramEligibilityAssociationsByIdRequest($id, $if_none_match = null, $use_snapshot = false)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStudentSpecialEducationProgramEligibilityAssociationsById'
            );
        }

        $resourcePath = '/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation keyChangesStudentSpecialEducationProgramEligibilityAssociations
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationKeyChange[]
     */
    public function keyChangesStudentSpecialEducationProgramEligibilityAssociations($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        list($response) = $this->keyChangesStudentSpecialEducationProgramEligibilityAssociationsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);
        return $response;
    }

    /**
     * Operation keyChangesStudentSpecialEducationProgramEligibilityAssociationsWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationKeyChange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function keyChangesStudentSpecialEducationProgramEligibilityAssociationsWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $request = $this->keyChangesStudentSpecialEducationProgramEligibilityAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationKeyChange[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationKeyChange[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationKeyChange[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationKeyChange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation keyChangesStudentSpecialEducationProgramEligibilityAssociationsAsync
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesStudentSpecialEducationProgramEligibilityAssociationsAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        return $this->keyChangesStudentSpecialEducationProgramEligibilityAssociationsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation keyChangesStudentSpecialEducationProgramEligibilityAssociationsAsyncWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesStudentSpecialEducationProgramEligibilityAssociationsAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        $returnType = '\OpenAPI\Client\Model\TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationKeyChange[]';
        $request = $this->keyChangesStudentSpecialEducationProgramEligibilityAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'keyChangesStudentSpecialEducationProgramEligibilityAssociations'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function keyChangesStudentSpecialEducationProgramEligibilityAssociationsRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false)
    {
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.keyChangesStudentSpecialEducationProgramEligibilityAssociations, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSpecialEducationProgramEligibilityAssociationsApi.keyChangesStudentSpecialEducationProgramEligibilityAssociations, must be bigger than or equal to 0.');
        }


        $resourcePath = '/ed-fi/studentSpecialEducationProgramEligibilityAssociations/keyChanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($min_change_version !== null) {
            if('form' === 'form' && is_array($min_change_version)) {
                foreach($min_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['minChangeVersion'] = $min_change_version;
            }
        }
        // query params
        if ($max_change_version !== null) {
            if('form' === 'form' && is_array($max_change_version)) {
                foreach($max_change_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxChangeVersion'] = $max_change_version;
            }
        }
        // query params
        if ($total_count !== null) {
            if('form' === 'form' && is_array($total_count)) {
                foreach($total_count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalCount'] = $total_count;
            }
        }

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postStudentSpecialEducationProgramEligibilityAssociation
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation $ed_fi_student_special_education_program_eligibility_association The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postStudentSpecialEducationProgramEligibilityAssociation($ed_fi_student_special_education_program_eligibility_association)
    {
        $this->postStudentSpecialEducationProgramEligibilityAssociationWithHttpInfo($ed_fi_student_special_education_program_eligibility_association);
    }

    /**
     * Operation postStudentSpecialEducationProgramEligibilityAssociationWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation $ed_fi_student_special_education_program_eligibility_association The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postStudentSpecialEducationProgramEligibilityAssociationWithHttpInfo($ed_fi_student_special_education_program_eligibility_association)
    {
        $request = $this->postStudentSpecialEducationProgramEligibilityAssociationRequest($ed_fi_student_special_education_program_eligibility_association);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postStudentSpecialEducationProgramEligibilityAssociationAsync
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation $ed_fi_student_special_education_program_eligibility_association The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postStudentSpecialEducationProgramEligibilityAssociationAsync($ed_fi_student_special_education_program_eligibility_association)
    {
        return $this->postStudentSpecialEducationProgramEligibilityAssociationAsyncWithHttpInfo($ed_fi_student_special_education_program_eligibility_association)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postStudentSpecialEducationProgramEligibilityAssociationAsyncWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation $ed_fi_student_special_education_program_eligibility_association The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postStudentSpecialEducationProgramEligibilityAssociationAsyncWithHttpInfo($ed_fi_student_special_education_program_eligibility_association)
    {
        $returnType = '';
        $request = $this->postStudentSpecialEducationProgramEligibilityAssociationRequest($ed_fi_student_special_education_program_eligibility_association);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postStudentSpecialEducationProgramEligibilityAssociation'
     *
     * @param  \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation $ed_fi_student_special_education_program_eligibility_association The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postStudentSpecialEducationProgramEligibilityAssociationRequest($ed_fi_student_special_education_program_eligibility_association)
    {
        // verify the required parameter 'ed_fi_student_special_education_program_eligibility_association' is set
        if ($ed_fi_student_special_education_program_eligibility_association === null || (is_array($ed_fi_student_special_education_program_eligibility_association) && count($ed_fi_student_special_education_program_eligibility_association) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_student_special_education_program_eligibility_association when calling postStudentSpecialEducationProgramEligibilityAssociation'
            );
        }

        $resourcePath = '/ed-fi/studentSpecialEducationProgramEligibilityAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($ed_fi_student_special_education_program_eligibility_association)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($ed_fi_student_special_education_program_eligibility_association));
            } else {
                $httpBody = $ed_fi_student_special_education_program_eligibility_association;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putStudentSpecialEducationProgramEligibilityAssociation
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation $ed_fi_student_special_education_program_eligibility_association The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putStudentSpecialEducationProgramEligibilityAssociation($id, $ed_fi_student_special_education_program_eligibility_association, $if_match = null)
    {
        $this->putStudentSpecialEducationProgramEligibilityAssociationWithHttpInfo($id, $ed_fi_student_special_education_program_eligibility_association, $if_match);
    }

    /**
     * Operation putStudentSpecialEducationProgramEligibilityAssociationWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation $ed_fi_student_special_education_program_eligibility_association The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putStudentSpecialEducationProgramEligibilityAssociationWithHttpInfo($id, $ed_fi_student_special_education_program_eligibility_association, $if_match = null)
    {
        $request = $this->putStudentSpecialEducationProgramEligibilityAssociationRequest($id, $ed_fi_student_special_education_program_eligibility_association, $if_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putStudentSpecialEducationProgramEligibilityAssociationAsync
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation $ed_fi_student_special_education_program_eligibility_association The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putStudentSpecialEducationProgramEligibilityAssociationAsync($id, $ed_fi_student_special_education_program_eligibility_association, $if_match = null)
    {
        return $this->putStudentSpecialEducationProgramEligibilityAssociationAsyncWithHttpInfo($id, $ed_fi_student_special_education_program_eligibility_association, $if_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putStudentSpecialEducationProgramEligibilityAssociationAsyncWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation $ed_fi_student_special_education_program_eligibility_association The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putStudentSpecialEducationProgramEligibilityAssociationAsyncWithHttpInfo($id, $ed_fi_student_special_education_program_eligibility_association, $if_match = null)
    {
        $returnType = '';
        $request = $this->putStudentSpecialEducationProgramEligibilityAssociationRequest($id, $ed_fi_student_special_education_program_eligibility_association, $if_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putStudentSpecialEducationProgramEligibilityAssociation'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiStudentSpecialEducationProgramEligibilityAssociation $ed_fi_student_special_education_program_eligibility_association The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putStudentSpecialEducationProgramEligibilityAssociationRequest($id, $ed_fi_student_special_education_program_eligibility_association, $if_match = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putStudentSpecialEducationProgramEligibilityAssociation'
            );
        }
        // verify the required parameter 'ed_fi_student_special_education_program_eligibility_association' is set
        if ($ed_fi_student_special_education_program_eligibility_association === null || (is_array($ed_fi_student_special_education_program_eligibility_association) && count($ed_fi_student_special_education_program_eligibility_association) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_student_special_education_program_eligibility_association when calling putStudentSpecialEducationProgramEligibilityAssociation'
            );
        }

        $resourcePath = '/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($ed_fi_student_special_education_program_eligibility_association)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($ed_fi_student_special_education_program_eligibility_association));
            } else {
                $httpBody = $ed_fi_student_special_education_program_eligibility_association;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
