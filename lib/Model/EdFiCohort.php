<?php
/**
 * EdFiCohort
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiCohort Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EdFiCohort implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_cohort';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'cohort_identifier' => 'string',
        'education_organization_reference' => '\OpenAPI\Client\Model\EdFiEducationOrganizationReference',
        'academic_subject_descriptor' => 'string',
        'cohort_description' => 'string',
        'cohort_scope_descriptor' => 'string',
        'cohort_type_descriptor' => 'string',
        'programs' => '\OpenAPI\Client\Model\EdFiCohortProgram[]',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'cohort_identifier' => null,
        'education_organization_reference' => null,
        'academic_subject_descriptor' => null,
        'cohort_description' => null,
        'cohort_scope_descriptor' => null,
        'cohort_type_descriptor' => null,
        'programs' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'cohort_identifier' => 'cohortIdentifier',
        'education_organization_reference' => 'educationOrganizationReference',
        'academic_subject_descriptor' => 'academicSubjectDescriptor',
        'cohort_description' => 'cohortDescription',
        'cohort_scope_descriptor' => 'cohortScopeDescriptor',
        'cohort_type_descriptor' => 'cohortTypeDescriptor',
        'programs' => 'programs',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'cohort_identifier' => 'setCohortIdentifier',
        'education_organization_reference' => 'setEducationOrganizationReference',
        'academic_subject_descriptor' => 'setAcademicSubjectDescriptor',
        'cohort_description' => 'setCohortDescription',
        'cohort_scope_descriptor' => 'setCohortScopeDescriptor',
        'cohort_type_descriptor' => 'setCohortTypeDescriptor',
        'programs' => 'setPrograms',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'cohort_identifier' => 'getCohortIdentifier',
        'education_organization_reference' => 'getEducationOrganizationReference',
        'academic_subject_descriptor' => 'getAcademicSubjectDescriptor',
        'cohort_description' => 'getCohortDescription',
        'cohort_scope_descriptor' => 'getCohortScopeDescriptor',
        'cohort_type_descriptor' => 'getCohortTypeDescriptor',
        'programs' => 'getPrograms',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['cohort_identifier'] = $data['cohort_identifier'] ?? null;
        $this->container['education_organization_reference'] = $data['education_organization_reference'] ?? null;
        $this->container['academic_subject_descriptor'] = $data['academic_subject_descriptor'] ?? null;
        $this->container['cohort_description'] = $data['cohort_description'] ?? null;
        $this->container['cohort_scope_descriptor'] = $data['cohort_scope_descriptor'] ?? null;
        $this->container['cohort_type_descriptor'] = $data['cohort_type_descriptor'] ?? null;
        $this->container['programs'] = $data['programs'] ?? null;
        $this->container['_etag'] = $data['_etag'] ?? null;
        $this->container['_last_modified_date'] = $data['_last_modified_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cohort_identifier'] === null) {
            $invalidProperties[] = "'cohort_identifier' can't be null";
        }
        if ((mb_strlen($this->container['cohort_identifier']) > 36)) {
            $invalidProperties[] = "invalid value for 'cohort_identifier', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['cohort_identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'cohort_identifier', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['education_organization_reference'] === null) {
            $invalidProperties[] = "'education_organization_reference' can't be null";
        }
        if (!is_null($this->container['academic_subject_descriptor']) && (mb_strlen($this->container['academic_subject_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'academic_subject_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['cohort_description']) && (mb_strlen($this->container['cohort_description']) > 1024)) {
            $invalidProperties[] = "invalid value for 'cohort_description', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['cohort_description']) && (mb_strlen($this->container['cohort_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'cohort_description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cohort_scope_descriptor']) && (mb_strlen($this->container['cohort_scope_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'cohort_scope_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['cohort_type_descriptor'] === null) {
            $invalidProperties[] = "'cohort_type_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['cohort_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'cohort_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets cohort_identifier
     *
     * @return string
     */
    public function getCohortIdentifier()
    {
        return $this->container['cohort_identifier'];
    }

    /**
     * Sets cohort_identifier
     *
     * @param string $cohort_identifier The name or ID for the cohort.
     *
     * @return self
     */
    public function setCohortIdentifier($cohort_identifier)
    {
        if ((mb_strlen($cohort_identifier) > 36)) {
            throw new \InvalidArgumentException('invalid length for $cohort_identifier when calling EdFiCohort., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($cohort_identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cohort_identifier when calling EdFiCohort., must be bigger than or equal to 1.');
        }

        $this->container['cohort_identifier'] = $cohort_identifier;

        return $this;
    }

    /**
     * Gets education_organization_reference
     *
     * @return \OpenAPI\Client\Model\EdFiEducationOrganizationReference
     */
    public function getEducationOrganizationReference()
    {
        return $this->container['education_organization_reference'];
    }

    /**
     * Sets education_organization_reference
     *
     * @param \OpenAPI\Client\Model\EdFiEducationOrganizationReference $education_organization_reference education_organization_reference
     *
     * @return self
     */
    public function setEducationOrganizationReference($education_organization_reference)
    {
        $this->container['education_organization_reference'] = $education_organization_reference;

        return $this;
    }

    /**
     * Gets academic_subject_descriptor
     *
     * @return string|null
     */
    public function getAcademicSubjectDescriptor()
    {
        return $this->container['academic_subject_descriptor'];
    }

    /**
     * Sets academic_subject_descriptor
     *
     * @param string|null $academic_subject_descriptor The academic subject associated with an academic intervention.
     *
     * @return self
     */
    public function setAcademicSubjectDescriptor($academic_subject_descriptor)
    {
        if (!is_null($academic_subject_descriptor) && (mb_strlen($academic_subject_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $academic_subject_descriptor when calling EdFiCohort., must be smaller than or equal to 306.');
        }

        $this->container['academic_subject_descriptor'] = $academic_subject_descriptor;

        return $this;
    }

    /**
     * Gets cohort_description
     *
     * @return string|null
     */
    public function getCohortDescription()
    {
        return $this->container['cohort_description'];
    }

    /**
     * Sets cohort_description
     *
     * @param string|null $cohort_description The description of the cohort and its purpose.
     *
     * @return self
     */
    public function setCohortDescription($cohort_description)
    {
        if (!is_null($cohort_description) && (mb_strlen($cohort_description) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $cohort_description when calling EdFiCohort., must be smaller than or equal to 1024.');
        }
        if (!is_null($cohort_description) && (mb_strlen($cohort_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cohort_description when calling EdFiCohort., must be bigger than or equal to 1.');
        }

        $this->container['cohort_description'] = $cohort_description;

        return $this;
    }

    /**
     * Gets cohort_scope_descriptor
     *
     * @return string|null
     */
    public function getCohortScopeDescriptor()
    {
        return $this->container['cohort_scope_descriptor'];
    }

    /**
     * Sets cohort_scope_descriptor
     *
     * @param string|null $cohort_scope_descriptor The scope of cohort (e.g., school, district, classroom).
     *
     * @return self
     */
    public function setCohortScopeDescriptor($cohort_scope_descriptor)
    {
        if (!is_null($cohort_scope_descriptor) && (mb_strlen($cohort_scope_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $cohort_scope_descriptor when calling EdFiCohort., must be smaller than or equal to 306.');
        }

        $this->container['cohort_scope_descriptor'] = $cohort_scope_descriptor;

        return $this;
    }

    /**
     * Gets cohort_type_descriptor
     *
     * @return string
     */
    public function getCohortTypeDescriptor()
    {
        return $this->container['cohort_type_descriptor'];
    }

    /**
     * Sets cohort_type_descriptor
     *
     * @param string $cohort_type_descriptor The type of cohort (e.g., academic intervention, classroom breakout).
     *
     * @return self
     */
    public function setCohortTypeDescriptor($cohort_type_descriptor)
    {
        if ((mb_strlen($cohort_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $cohort_type_descriptor when calling EdFiCohort., must be smaller than or equal to 306.');
        }

        $this->container['cohort_type_descriptor'] = $cohort_type_descriptor;

        return $this;
    }

    /**
     * Gets programs
     *
     * @return \OpenAPI\Client\Model\EdFiCohortProgram[]|null
     */
    public function getPrograms()
    {
        return $this->container['programs'];
    }

    /**
     * Sets programs
     *
     * @param \OpenAPI\Client\Model\EdFiCohortProgram[]|null $programs An unordered collection of cohortPrograms. The (optional) program associated with this cohort (e.g., special education).
     *
     * @return self
     */
    public function setPrograms($programs)
    {
        $this->container['programs'] = $programs;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


