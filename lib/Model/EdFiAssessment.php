<?php
/**
 * EdFiAssessment
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiAssessment Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EdFiAssessment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_assessment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'academic_subjects' => '\OpenAPI\Client\Model\EdFiAssessmentAcademicSubject[]',
        'assessment_identifier' => 'string',
        'namespace' => 'string',
        'education_organization_reference' => '\OpenAPI\Client\Model\EdFiEducationOrganizationReference',
        'adaptive_assessment' => 'bool',
        'assessed_grade_levels' => '\OpenAPI\Client\Model\EdFiAssessmentAssessedGradeLevel[]',
        'assessment_category_descriptor' => 'string',
        'assessment_family' => 'string',
        'assessment_form' => 'string',
        'assessment_title' => 'string',
        'assessment_version' => 'int',
        'content_standard' => '\OpenAPI\Client\Model\EdFiAssessmentContentStandard',
        'identification_codes' => '\OpenAPI\Client\Model\EdFiAssessmentIdentificationCode[]',
        'languages' => '\OpenAPI\Client\Model\EdFiAssessmentLanguage[]',
        'max_raw_score' => 'double',
        'nomenclature' => 'string',
        'performance_levels' => '\OpenAPI\Client\Model\EdFiAssessmentPerformanceLevel[]',
        'periods' => '\OpenAPI\Client\Model\EdFiAssessmentPeriod[]',
        'platform_types' => '\OpenAPI\Client\Model\EdFiAssessmentPlatformType[]',
        'programs' => '\OpenAPI\Client\Model\EdFiAssessmentProgram[]',
        'revision_date' => '\DateTime',
        'scores' => '\OpenAPI\Client\Model\EdFiAssessmentScore[]',
        'sections' => '\OpenAPI\Client\Model\EdFiAssessmentSection[]',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'academic_subjects' => null,
        'assessment_identifier' => null,
        'namespace' => null,
        'education_organization_reference' => null,
        'adaptive_assessment' => null,
        'assessed_grade_levels' => null,
        'assessment_category_descriptor' => null,
        'assessment_family' => null,
        'assessment_form' => null,
        'assessment_title' => null,
        'assessment_version' => 'int32',
        'content_standard' => null,
        'identification_codes' => null,
        'languages' => null,
        'max_raw_score' => 'double',
        'nomenclature' => null,
        'performance_levels' => null,
        'periods' => null,
        'platform_types' => null,
        'programs' => null,
        'revision_date' => 'date',
        'scores' => null,
        'sections' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'academic_subjects' => 'academicSubjects',
        'assessment_identifier' => 'assessmentIdentifier',
        'namespace' => 'namespace',
        'education_organization_reference' => 'educationOrganizationReference',
        'adaptive_assessment' => 'adaptiveAssessment',
        'assessed_grade_levels' => 'assessedGradeLevels',
        'assessment_category_descriptor' => 'assessmentCategoryDescriptor',
        'assessment_family' => 'assessmentFamily',
        'assessment_form' => 'assessmentForm',
        'assessment_title' => 'assessmentTitle',
        'assessment_version' => 'assessmentVersion',
        'content_standard' => 'contentStandard',
        'identification_codes' => 'identificationCodes',
        'languages' => 'languages',
        'max_raw_score' => 'maxRawScore',
        'nomenclature' => 'nomenclature',
        'performance_levels' => 'performanceLevels',
        'periods' => 'periods',
        'platform_types' => 'platformTypes',
        'programs' => 'programs',
        'revision_date' => 'revisionDate',
        'scores' => 'scores',
        'sections' => 'sections',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'academic_subjects' => 'setAcademicSubjects',
        'assessment_identifier' => 'setAssessmentIdentifier',
        'namespace' => 'setNamespace',
        'education_organization_reference' => 'setEducationOrganizationReference',
        'adaptive_assessment' => 'setAdaptiveAssessment',
        'assessed_grade_levels' => 'setAssessedGradeLevels',
        'assessment_category_descriptor' => 'setAssessmentCategoryDescriptor',
        'assessment_family' => 'setAssessmentFamily',
        'assessment_form' => 'setAssessmentForm',
        'assessment_title' => 'setAssessmentTitle',
        'assessment_version' => 'setAssessmentVersion',
        'content_standard' => 'setContentStandard',
        'identification_codes' => 'setIdentificationCodes',
        'languages' => 'setLanguages',
        'max_raw_score' => 'setMaxRawScore',
        'nomenclature' => 'setNomenclature',
        'performance_levels' => 'setPerformanceLevels',
        'periods' => 'setPeriods',
        'platform_types' => 'setPlatformTypes',
        'programs' => 'setPrograms',
        'revision_date' => 'setRevisionDate',
        'scores' => 'setScores',
        'sections' => 'setSections',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'academic_subjects' => 'getAcademicSubjects',
        'assessment_identifier' => 'getAssessmentIdentifier',
        'namespace' => 'getNamespace',
        'education_organization_reference' => 'getEducationOrganizationReference',
        'adaptive_assessment' => 'getAdaptiveAssessment',
        'assessed_grade_levels' => 'getAssessedGradeLevels',
        'assessment_category_descriptor' => 'getAssessmentCategoryDescriptor',
        'assessment_family' => 'getAssessmentFamily',
        'assessment_form' => 'getAssessmentForm',
        'assessment_title' => 'getAssessmentTitle',
        'assessment_version' => 'getAssessmentVersion',
        'content_standard' => 'getContentStandard',
        'identification_codes' => 'getIdentificationCodes',
        'languages' => 'getLanguages',
        'max_raw_score' => 'getMaxRawScore',
        'nomenclature' => 'getNomenclature',
        'performance_levels' => 'getPerformanceLevels',
        'periods' => 'getPeriods',
        'platform_types' => 'getPlatformTypes',
        'programs' => 'getPrograms',
        'revision_date' => 'getRevisionDate',
        'scores' => 'getScores',
        'sections' => 'getSections',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['academic_subjects'] = $data['academic_subjects'] ?? null;
        $this->container['assessment_identifier'] = $data['assessment_identifier'] ?? null;
        $this->container['namespace'] = $data['namespace'] ?? null;
        $this->container['education_organization_reference'] = $data['education_organization_reference'] ?? null;
        $this->container['adaptive_assessment'] = $data['adaptive_assessment'] ?? null;
        $this->container['assessed_grade_levels'] = $data['assessed_grade_levels'] ?? null;
        $this->container['assessment_category_descriptor'] = $data['assessment_category_descriptor'] ?? null;
        $this->container['assessment_family'] = $data['assessment_family'] ?? null;
        $this->container['assessment_form'] = $data['assessment_form'] ?? null;
        $this->container['assessment_title'] = $data['assessment_title'] ?? null;
        $this->container['assessment_version'] = $data['assessment_version'] ?? null;
        $this->container['content_standard'] = $data['content_standard'] ?? null;
        $this->container['identification_codes'] = $data['identification_codes'] ?? null;
        $this->container['languages'] = $data['languages'] ?? null;
        $this->container['max_raw_score'] = $data['max_raw_score'] ?? null;
        $this->container['nomenclature'] = $data['nomenclature'] ?? null;
        $this->container['performance_levels'] = $data['performance_levels'] ?? null;
        $this->container['periods'] = $data['periods'] ?? null;
        $this->container['platform_types'] = $data['platform_types'] ?? null;
        $this->container['programs'] = $data['programs'] ?? null;
        $this->container['revision_date'] = $data['revision_date'] ?? null;
        $this->container['scores'] = $data['scores'] ?? null;
        $this->container['sections'] = $data['sections'] ?? null;
        $this->container['_etag'] = $data['_etag'] ?? null;
        $this->container['_last_modified_date'] = $data['_last_modified_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['academic_subjects'] === null) {
            $invalidProperties[] = "'academic_subjects' can't be null";
        }
        if ($this->container['assessment_identifier'] === null) {
            $invalidProperties[] = "'assessment_identifier' can't be null";
        }
        if ((mb_strlen($this->container['assessment_identifier']) > 60)) {
            $invalidProperties[] = "invalid value for 'assessment_identifier', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['assessment_identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'assessment_identifier', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        if ((mb_strlen($this->container['namespace']) > 255)) {
            $invalidProperties[] = "invalid value for 'namespace', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['namespace']) < 5)) {
            $invalidProperties[] = "invalid value for 'namespace', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['assessment_category_descriptor']) && (mb_strlen($this->container['assessment_category_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'assessment_category_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['assessment_family']) && (mb_strlen($this->container['assessment_family']) > 60)) {
            $invalidProperties[] = "invalid value for 'assessment_family', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['assessment_family']) && (mb_strlen($this->container['assessment_family']) < 1)) {
            $invalidProperties[] = "invalid value for 'assessment_family', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['assessment_form']) && (mb_strlen($this->container['assessment_form']) > 60)) {
            $invalidProperties[] = "invalid value for 'assessment_form', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['assessment_form']) && (mb_strlen($this->container['assessment_form']) < 1)) {
            $invalidProperties[] = "invalid value for 'assessment_form', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['assessment_title'] === null) {
            $invalidProperties[] = "'assessment_title' can't be null";
        }
        if ((mb_strlen($this->container['assessment_title']) > 255)) {
            $invalidProperties[] = "invalid value for 'assessment_title', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['assessment_title']) < 1)) {
            $invalidProperties[] = "invalid value for 'assessment_title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['nomenclature']) && (mb_strlen($this->container['nomenclature']) > 100)) {
            $invalidProperties[] = "invalid value for 'nomenclature', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['nomenclature']) && (mb_strlen($this->container['nomenclature']) < 1)) {
            $invalidProperties[] = "invalid value for 'nomenclature', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets academic_subjects
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentAcademicSubject[]
     */
    public function getAcademicSubjects()
    {
        return $this->container['academic_subjects'];
    }

    /**
     * Sets academic_subjects
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentAcademicSubject[] $academic_subjects An unordered collection of assessmentAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
     *
     * @return self
     */
    public function setAcademicSubjects($academic_subjects)
    {
        $this->container['academic_subjects'] = $academic_subjects;

        return $this;
    }

    /**
     * Gets assessment_identifier
     *
     * @return string
     */
    public function getAssessmentIdentifier()
    {
        return $this->container['assessment_identifier'];
    }

    /**
     * Sets assessment_identifier
     *
     * @param string $assessment_identifier A unique number or alphanumeric code assigned to an assessment.
     *
     * @return self
     */
    public function setAssessmentIdentifier($assessment_identifier)
    {
        if ((mb_strlen($assessment_identifier) > 60)) {
            throw new \InvalidArgumentException('invalid length for $assessment_identifier when calling EdFiAssessment., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($assessment_identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $assessment_identifier when calling EdFiAssessment., must be bigger than or equal to 1.');
        }

        $this->container['assessment_identifier'] = $assessment_identifier;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace Namespace for the assessment.
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if ((mb_strlen($namespace) > 255)) {
            throw new \InvalidArgumentException('invalid length for $namespace when calling EdFiAssessment., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($namespace) < 5)) {
            throw new \InvalidArgumentException('invalid length for $namespace when calling EdFiAssessment., must be bigger than or equal to 5.');
        }

        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets education_organization_reference
     *
     * @return \OpenAPI\Client\Model\EdFiEducationOrganizationReference|null
     */
    public function getEducationOrganizationReference()
    {
        return $this->container['education_organization_reference'];
    }

    /**
     * Sets education_organization_reference
     *
     * @param \OpenAPI\Client\Model\EdFiEducationOrganizationReference|null $education_organization_reference education_organization_reference
     *
     * @return self
     */
    public function setEducationOrganizationReference($education_organization_reference)
    {
        $this->container['education_organization_reference'] = $education_organization_reference;

        return $this;
    }

    /**
     * Gets adaptive_assessment
     *
     * @return bool|null
     */
    public function getAdaptiveAssessment()
    {
        return $this->container['adaptive_assessment'];
    }

    /**
     * Sets adaptive_assessment
     *
     * @param bool|null $adaptive_assessment Indicates that the assessment is adaptive.
     *
     * @return self
     */
    public function setAdaptiveAssessment($adaptive_assessment)
    {
        $this->container['adaptive_assessment'] = $adaptive_assessment;

        return $this;
    }

    /**
     * Gets assessed_grade_levels
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentAssessedGradeLevel[]|null
     */
    public function getAssessedGradeLevels()
    {
        return $this->container['assessed_grade_levels'];
    }

    /**
     * Sets assessed_grade_levels
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentAssessedGradeLevel[]|null $assessed_grade_levels An unordered collection of assessmentAssessedGradeLevels. The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.
     *
     * @return self
     */
    public function setAssessedGradeLevels($assessed_grade_levels)
    {
        $this->container['assessed_grade_levels'] = $assessed_grade_levels;

        return $this;
    }

    /**
     * Gets assessment_category_descriptor
     *
     * @return string|null
     */
    public function getAssessmentCategoryDescriptor()
    {
        return $this->container['assessment_category_descriptor'];
    }

    /**
     * Sets assessment_category_descriptor
     *
     * @param string|null $assessment_category_descriptor The category of an assessment based on format and content.
     *
     * @return self
     */
    public function setAssessmentCategoryDescriptor($assessment_category_descriptor)
    {
        if (!is_null($assessment_category_descriptor) && (mb_strlen($assessment_category_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $assessment_category_descriptor when calling EdFiAssessment., must be smaller than or equal to 306.');
        }

        $this->container['assessment_category_descriptor'] = $assessment_category_descriptor;

        return $this;
    }

    /**
     * Gets assessment_family
     *
     * @return string|null
     */
    public function getAssessmentFamily()
    {
        return $this->container['assessment_family'];
    }

    /**
     * Sets assessment_family
     *
     * @param string|null $assessment_family The assessment family this assessment is a member of.
     *
     * @return self
     */
    public function setAssessmentFamily($assessment_family)
    {
        if (!is_null($assessment_family) && (mb_strlen($assessment_family) > 60)) {
            throw new \InvalidArgumentException('invalid length for $assessment_family when calling EdFiAssessment., must be smaller than or equal to 60.');
        }
        if (!is_null($assessment_family) && (mb_strlen($assessment_family) < 1)) {
            throw new \InvalidArgumentException('invalid length for $assessment_family when calling EdFiAssessment., must be bigger than or equal to 1.');
        }

        $this->container['assessment_family'] = $assessment_family;

        return $this;
    }

    /**
     * Gets assessment_form
     *
     * @return string|null
     */
    public function getAssessmentForm()
    {
        return $this->container['assessment_form'];
    }

    /**
     * Sets assessment_form
     *
     * @param string|null $assessment_form Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.
     *
     * @return self
     */
    public function setAssessmentForm($assessment_form)
    {
        if (!is_null($assessment_form) && (mb_strlen($assessment_form) > 60)) {
            throw new \InvalidArgumentException('invalid length for $assessment_form when calling EdFiAssessment., must be smaller than or equal to 60.');
        }
        if (!is_null($assessment_form) && (mb_strlen($assessment_form) < 1)) {
            throw new \InvalidArgumentException('invalid length for $assessment_form when calling EdFiAssessment., must be bigger than or equal to 1.');
        }

        $this->container['assessment_form'] = $assessment_form;

        return $this;
    }

    /**
     * Gets assessment_title
     *
     * @return string
     */
    public function getAssessmentTitle()
    {
        return $this->container['assessment_title'];
    }

    /**
     * Sets assessment_title
     *
     * @param string $assessment_title The title or name of the assessment.
     *
     * @return self
     */
    public function setAssessmentTitle($assessment_title)
    {
        if ((mb_strlen($assessment_title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $assessment_title when calling EdFiAssessment., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($assessment_title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $assessment_title when calling EdFiAssessment., must be bigger than or equal to 1.');
        }

        $this->container['assessment_title'] = $assessment_title;

        return $this;
    }

    /**
     * Gets assessment_version
     *
     * @return int|null
     */
    public function getAssessmentVersion()
    {
        return $this->container['assessment_version'];
    }

    /**
     * Sets assessment_version
     *
     * @param int|null $assessment_version The version identifier for the assessment.
     *
     * @return self
     */
    public function setAssessmentVersion($assessment_version)
    {
        $this->container['assessment_version'] = $assessment_version;

        return $this;
    }

    /**
     * Gets content_standard
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentContentStandard|null
     */
    public function getContentStandard()
    {
        return $this->container['content_standard'];
    }

    /**
     * Sets content_standard
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentContentStandard|null $content_standard content_standard
     *
     * @return self
     */
    public function setContentStandard($content_standard)
    {
        $this->container['content_standard'] = $content_standard;

        return $this;
    }

    /**
     * Gets identification_codes
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentIdentificationCode[]|null
     */
    public function getIdentificationCodes()
    {
        return $this->container['identification_codes'];
    }

    /**
     * Sets identification_codes
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentIdentificationCode[]|null $identification_codes An unordered collection of assessmentIdentificationCodes. A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity.
     *
     * @return self
     */
    public function setIdentificationCodes($identification_codes)
    {
        $this->container['identification_codes'] = $identification_codes;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentLanguage[]|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentLanguage[]|null $languages An unordered collection of assessmentLanguages. An indication of the languages in which the assessment is designed.
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets max_raw_score
     *
     * @return double|null
     */
    public function getMaxRawScore()
    {
        return $this->container['max_raw_score'];
    }

    /**
     * Sets max_raw_score
     *
     * @param double|null $max_raw_score The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
     *
     * @return self
     */
    public function setMaxRawScore($max_raw_score)
    {
        $this->container['max_raw_score'] = $max_raw_score;

        return $this;
    }

    /**
     * Gets nomenclature
     *
     * @return string|null
     */
    public function getNomenclature()
    {
        return $this->container['nomenclature'];
    }

    /**
     * Sets nomenclature
     *
     * @param string|null $nomenclature Reflects the specific nomenclature used for assessment.
     *
     * @return self
     */
    public function setNomenclature($nomenclature)
    {
        if (!is_null($nomenclature) && (mb_strlen($nomenclature) > 100)) {
            throw new \InvalidArgumentException('invalid length for $nomenclature when calling EdFiAssessment., must be smaller than or equal to 100.');
        }
        if (!is_null($nomenclature) && (mb_strlen($nomenclature) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nomenclature when calling EdFiAssessment., must be bigger than or equal to 1.');
        }

        $this->container['nomenclature'] = $nomenclature;

        return $this;
    }

    /**
     * Gets performance_levels
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentPerformanceLevel[]|null
     */
    public function getPerformanceLevels()
    {
        return $this->container['performance_levels'];
    }

    /**
     * Sets performance_levels
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentPerformanceLevel[]|null $performance_levels An unordered collection of assessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported: 1. Specification of performance level by minimum and maximum score, 2. Specification of performance level by cut score, using only minimum score, 3. Specification of performance level without any mapping to scores.
     *
     * @return self
     */
    public function setPerformanceLevels($performance_levels)
    {
        $this->container['performance_levels'] = $performance_levels;

        return $this;
    }

    /**
     * Gets periods
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentPeriod[]|null
     */
    public function getPeriods()
    {
        return $this->container['periods'];
    }

    /**
     * Sets periods
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentPeriod[]|null $periods An unordered collection of assessmentPeriods. The period or window in which an assessment is supposed to be administered.
     *
     * @return self
     */
    public function setPeriods($periods)
    {
        $this->container['periods'] = $periods;

        return $this;
    }

    /**
     * Gets platform_types
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentPlatformType[]|null
     */
    public function getPlatformTypes()
    {
        return $this->container['platform_types'];
    }

    /**
     * Sets platform_types
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentPlatformType[]|null $platform_types An unordered collection of assessmentPlatformTypes. The platforms with which the assessment may be delivered.
     *
     * @return self
     */
    public function setPlatformTypes($platform_types)
    {
        $this->container['platform_types'] = $platform_types;

        return $this;
    }

    /**
     * Gets programs
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentProgram[]|null
     */
    public function getPrograms()
    {
        return $this->container['programs'];
    }

    /**
     * Sets programs
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentProgram[]|null $programs An unordered collection of assessmentPrograms. The programs associated with the assessment.
     *
     * @return self
     */
    public function setPrograms($programs)
    {
        $this->container['programs'] = $programs;

        return $this;
    }

    /**
     * Gets revision_date
     *
     * @return \DateTime|null
     */
    public function getRevisionDate()
    {
        return $this->container['revision_date'];
    }

    /**
     * Sets revision_date
     *
     * @param \DateTime|null $revision_date The month, day, and year that the conceptual design for the assessment was most recently revised substantially.
     *
     * @return self
     */
    public function setRevisionDate($revision_date)
    {
        $this->container['revision_date'] = $revision_date;

        return $this;
    }

    /**
     * Gets scores
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentScore[]|null
     */
    public function getScores()
    {
        return $this->container['scores'];
    }

    /**
     * Sets scores
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentScore[]|null $scores An unordered collection of assessmentScores. Definition of the scores to be expected from this assessment.
     *
     * @return self
     */
    public function setScores($scores)
    {
        $this->container['scores'] = $scores;

        return $this;
    }

    /**
     * Gets sections
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentSection[]|null
     */
    public function getSections()
    {
        return $this->container['sections'];
    }

    /**
     * Sets sections
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentSection[]|null $sections An unordered collection of assessmentSections. The Section(s) to which the assessment is associated.
     *
     * @return self
     */
    public function setSections($sections)
    {
        $this->container['sections'] = $sections;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


