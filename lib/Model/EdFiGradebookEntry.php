<?php
/**
 * EdFiGradebookEntry
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiGradebookEntry Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EdFiGradebookEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_gradebookEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'gradebook_entry_identifier' => 'string',
        'namespace' => 'string',
        'grading_period_reference' => '\OpenAPI\Client\Model\EdFiGradingPeriodReference',
        'section_reference' => '\OpenAPI\Client\Model\EdFiSectionReference',
        'date_assigned' => '\DateTime',
        'description' => 'string',
        'due_date' => '\DateTime',
        'due_time' => 'string',
        'gradebook_entry_type_descriptor' => 'string',
        'learning_standards' => '\OpenAPI\Client\Model\EdFiGradebookEntryLearningStandard[]',
        'max_points' => 'double',
        'source_section_identifier' => 'string',
        'title' => 'string',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'gradebook_entry_identifier' => null,
        'namespace' => null,
        'grading_period_reference' => null,
        'section_reference' => null,
        'date_assigned' => 'date',
        'description' => null,
        'due_date' => 'date',
        'due_time' => null,
        'gradebook_entry_type_descriptor' => null,
        'learning_standards' => null,
        'max_points' => 'double',
        'source_section_identifier' => null,
        'title' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'gradebook_entry_identifier' => 'gradebookEntryIdentifier',
        'namespace' => 'namespace',
        'grading_period_reference' => 'gradingPeriodReference',
        'section_reference' => 'sectionReference',
        'date_assigned' => 'dateAssigned',
        'description' => 'description',
        'due_date' => 'dueDate',
        'due_time' => 'dueTime',
        'gradebook_entry_type_descriptor' => 'gradebookEntryTypeDescriptor',
        'learning_standards' => 'learningStandards',
        'max_points' => 'maxPoints',
        'source_section_identifier' => 'sourceSectionIdentifier',
        'title' => 'title',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'gradebook_entry_identifier' => 'setGradebookEntryIdentifier',
        'namespace' => 'setNamespace',
        'grading_period_reference' => 'setGradingPeriodReference',
        'section_reference' => 'setSectionReference',
        'date_assigned' => 'setDateAssigned',
        'description' => 'setDescription',
        'due_date' => 'setDueDate',
        'due_time' => 'setDueTime',
        'gradebook_entry_type_descriptor' => 'setGradebookEntryTypeDescriptor',
        'learning_standards' => 'setLearningStandards',
        'max_points' => 'setMaxPoints',
        'source_section_identifier' => 'setSourceSectionIdentifier',
        'title' => 'setTitle',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'gradebook_entry_identifier' => 'getGradebookEntryIdentifier',
        'namespace' => 'getNamespace',
        'grading_period_reference' => 'getGradingPeriodReference',
        'section_reference' => 'getSectionReference',
        'date_assigned' => 'getDateAssigned',
        'description' => 'getDescription',
        'due_date' => 'getDueDate',
        'due_time' => 'getDueTime',
        'gradebook_entry_type_descriptor' => 'getGradebookEntryTypeDescriptor',
        'learning_standards' => 'getLearningStandards',
        'max_points' => 'getMaxPoints',
        'source_section_identifier' => 'getSourceSectionIdentifier',
        'title' => 'getTitle',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['gradebook_entry_identifier'] = $data['gradebook_entry_identifier'] ?? null;
        $this->container['namespace'] = $data['namespace'] ?? null;
        $this->container['grading_period_reference'] = $data['grading_period_reference'] ?? null;
        $this->container['section_reference'] = $data['section_reference'] ?? null;
        $this->container['date_assigned'] = $data['date_assigned'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['due_date'] = $data['due_date'] ?? null;
        $this->container['due_time'] = $data['due_time'] ?? null;
        $this->container['gradebook_entry_type_descriptor'] = $data['gradebook_entry_type_descriptor'] ?? null;
        $this->container['learning_standards'] = $data['learning_standards'] ?? null;
        $this->container['max_points'] = $data['max_points'] ?? null;
        $this->container['source_section_identifier'] = $data['source_section_identifier'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['_etag'] = $data['_etag'] ?? null;
        $this->container['_last_modified_date'] = $data['_last_modified_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['gradebook_entry_identifier'] === null) {
            $invalidProperties[] = "'gradebook_entry_identifier' can't be null";
        }
        if ((mb_strlen($this->container['gradebook_entry_identifier']) > 60)) {
            $invalidProperties[] = "invalid value for 'gradebook_entry_identifier', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['gradebook_entry_identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'gradebook_entry_identifier', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        if ((mb_strlen($this->container['namespace']) > 255)) {
            $invalidProperties[] = "invalid value for 'namespace', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['namespace']) < 5)) {
            $invalidProperties[] = "invalid value for 'namespace', the character length must be bigger than or equal to 5.";
        }

        if ($this->container['date_assigned'] === null) {
            $invalidProperties[] = "'date_assigned' can't be null";
        }
        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 1024)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['gradebook_entry_type_descriptor']) && (mb_strlen($this->container['gradebook_entry_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'gradebook_entry_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['source_section_identifier'] === null) {
            $invalidProperties[] = "'source_section_identifier' can't be null";
        }
        if ((mb_strlen($this->container['source_section_identifier']) > 255)) {
            $invalidProperties[] = "invalid value for 'source_section_identifier', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['source_section_identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'source_section_identifier', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) > 100)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets gradebook_entry_identifier
     *
     * @return string
     */
    public function getGradebookEntryIdentifier()
    {
        return $this->container['gradebook_entry_identifier'];
    }

    /**
     * Sets gradebook_entry_identifier
     *
     * @param string $gradebook_entry_identifier A unique number or alphanumeric code assigned to a gradebook entry by the source system.
     *
     * @return self
     */
    public function setGradebookEntryIdentifier($gradebook_entry_identifier)
    {
        if ((mb_strlen($gradebook_entry_identifier) > 60)) {
            throw new \InvalidArgumentException('invalid length for $gradebook_entry_identifier when calling EdFiGradebookEntry., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($gradebook_entry_identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gradebook_entry_identifier when calling EdFiGradebookEntry., must be bigger than or equal to 1.');
        }

        $this->container['gradebook_entry_identifier'] = $gradebook_entry_identifier;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace Namespace URI for the source of the gradebook entry.
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if ((mb_strlen($namespace) > 255)) {
            throw new \InvalidArgumentException('invalid length for $namespace when calling EdFiGradebookEntry., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($namespace) < 5)) {
            throw new \InvalidArgumentException('invalid length for $namespace when calling EdFiGradebookEntry., must be bigger than or equal to 5.');
        }

        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets grading_period_reference
     *
     * @return \OpenAPI\Client\Model\EdFiGradingPeriodReference|null
     */
    public function getGradingPeriodReference()
    {
        return $this->container['grading_period_reference'];
    }

    /**
     * Sets grading_period_reference
     *
     * @param \OpenAPI\Client\Model\EdFiGradingPeriodReference|null $grading_period_reference grading_period_reference
     *
     * @return self
     */
    public function setGradingPeriodReference($grading_period_reference)
    {
        $this->container['grading_period_reference'] = $grading_period_reference;

        return $this;
    }

    /**
     * Gets section_reference
     *
     * @return \OpenAPI\Client\Model\EdFiSectionReference|null
     */
    public function getSectionReference()
    {
        return $this->container['section_reference'];
    }

    /**
     * Sets section_reference
     *
     * @param \OpenAPI\Client\Model\EdFiSectionReference|null $section_reference section_reference
     *
     * @return self
     */
    public function setSectionReference($section_reference)
    {
        $this->container['section_reference'] = $section_reference;

        return $this;
    }

    /**
     * Gets date_assigned
     *
     * @return \DateTime
     */
    public function getDateAssigned()
    {
        return $this->container['date_assigned'];
    }

    /**
     * Sets date_assigned
     *
     * @param \DateTime $date_assigned The date the assignment, homework, or assessment was assigned or executed.
     *
     * @return self
     */
    public function setDateAssigned($date_assigned)
    {
        $this->container['date_assigned'] = $date_assigned;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of the assignment, homework, or classroom assessment.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $description when calling EdFiGradebookEntry., must be smaller than or equal to 1024.');
        }
        if (!is_null($description) && (mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling EdFiGradebookEntry., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date The date the assignment, homework, or assessment is due.
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets due_time
     *
     * @return string|null
     */
    public function getDueTime()
    {
        return $this->container['due_time'];
    }

    /**
     * Sets due_time
     *
     * @param string|null $due_time The time the assignment, homework, or assessment is due.
     *
     * @return self
     */
    public function setDueTime($due_time)
    {
        $this->container['due_time'] = $due_time;

        return $this;
    }

    /**
     * Gets gradebook_entry_type_descriptor
     *
     * @return string|null
     */
    public function getGradebookEntryTypeDescriptor()
    {
        return $this->container['gradebook_entry_type_descriptor'];
    }

    /**
     * Sets gradebook_entry_type_descriptor
     *
     * @param string|null $gradebook_entry_type_descriptor The type of the gradebook entry.
     *
     * @return self
     */
    public function setGradebookEntryTypeDescriptor($gradebook_entry_type_descriptor)
    {
        if (!is_null($gradebook_entry_type_descriptor) && (mb_strlen($gradebook_entry_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $gradebook_entry_type_descriptor when calling EdFiGradebookEntry., must be smaller than or equal to 306.');
        }

        $this->container['gradebook_entry_type_descriptor'] = $gradebook_entry_type_descriptor;

        return $this;
    }

    /**
     * Gets learning_standards
     *
     * @return \OpenAPI\Client\Model\EdFiGradebookEntryLearningStandard[]|null
     */
    public function getLearningStandards()
    {
        return $this->container['learning_standards'];
    }

    /**
     * Sets learning_standards
     *
     * @param \OpenAPI\Client\Model\EdFiGradebookEntryLearningStandard[]|null $learning_standards An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the gradebook entry.
     *
     * @return self
     */
    public function setLearningStandards($learning_standards)
    {
        $this->container['learning_standards'] = $learning_standards;

        return $this;
    }

    /**
     * Gets max_points
     *
     * @return double|null
     */
    public function getMaxPoints()
    {
        return $this->container['max_points'];
    }

    /**
     * Sets max_points
     *
     * @param double|null $max_points The maximum number of points  that can be earned for the submission.
     *
     * @return self
     */
    public function setMaxPoints($max_points)
    {
        $this->container['max_points'] = $max_points;

        return $this;
    }

    /**
     * Gets source_section_identifier
     *
     * @return string
     */
    public function getSourceSectionIdentifier()
    {
        return $this->container['source_section_identifier'];
    }

    /**
     * Sets source_section_identifier
     *
     * @param string $source_section_identifier The local identifier assigned to a section.
     *
     * @return self
     */
    public function setSourceSectionIdentifier($source_section_identifier)
    {
        if ((mb_strlen($source_section_identifier) > 255)) {
            throw new \InvalidArgumentException('invalid length for $source_section_identifier when calling EdFiGradebookEntry., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($source_section_identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $source_section_identifier when calling EdFiGradebookEntry., must be bigger than or equal to 1.');
        }

        $this->container['source_section_identifier'] = $source_section_identifier;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The name or title of the activity to be recorded in the gradebook entry.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if ((mb_strlen($title) > 100)) {
            throw new \InvalidArgumentException('invalid length for $title when calling EdFiGradebookEntry., must be smaller than or equal to 100.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


