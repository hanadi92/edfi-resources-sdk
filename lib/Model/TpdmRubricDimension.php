<?php
/**
 * TpdmRubricDimension
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TpdmRubricDimension Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TpdmRubricDimension implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tpdm_rubricDimension';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'rubric_rating' => 'int',
        'evaluation_element_reference' => '\OpenAPI\Client\Model\TpdmEvaluationElementReference',
        'criterion_description' => 'string',
        'dimension_order' => 'int',
        'rubric_rating_level_descriptor' => 'string',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'rubric_rating' => 'int32',
        'evaluation_element_reference' => null,
        'criterion_description' => null,
        'dimension_order' => 'int32',
        'rubric_rating_level_descriptor' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'rubric_rating' => 'rubricRating',
        'evaluation_element_reference' => 'evaluationElementReference',
        'criterion_description' => 'criterionDescription',
        'dimension_order' => 'dimensionOrder',
        'rubric_rating_level_descriptor' => 'rubricRatingLevelDescriptor',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'rubric_rating' => 'setRubricRating',
        'evaluation_element_reference' => 'setEvaluationElementReference',
        'criterion_description' => 'setCriterionDescription',
        'dimension_order' => 'setDimensionOrder',
        'rubric_rating_level_descriptor' => 'setRubricRatingLevelDescriptor',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'rubric_rating' => 'getRubricRating',
        'evaluation_element_reference' => 'getEvaluationElementReference',
        'criterion_description' => 'getCriterionDescription',
        'dimension_order' => 'getDimensionOrder',
        'rubric_rating_level_descriptor' => 'getRubricRatingLevelDescriptor',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['rubric_rating'] = $data['rubric_rating'] ?? null;
        $this->container['evaluation_element_reference'] = $data['evaluation_element_reference'] ?? null;
        $this->container['criterion_description'] = $data['criterion_description'] ?? null;
        $this->container['dimension_order'] = $data['dimension_order'] ?? null;
        $this->container['rubric_rating_level_descriptor'] = $data['rubric_rating_level_descriptor'] ?? null;
        $this->container['_etag'] = $data['_etag'] ?? null;
        $this->container['_last_modified_date'] = $data['_last_modified_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rubric_rating'] === null) {
            $invalidProperties[] = "'rubric_rating' can't be null";
        }
        if ($this->container['evaluation_element_reference'] === null) {
            $invalidProperties[] = "'evaluation_element_reference' can't be null";
        }
        if ($this->container['criterion_description'] === null) {
            $invalidProperties[] = "'criterion_description' can't be null";
        }
        if ((mb_strlen($this->container['criterion_description']) > 1024)) {
            $invalidProperties[] = "invalid value for 'criterion_description', the character length must be smaller than or equal to 1024.";
        }

        if ((mb_strlen($this->container['criterion_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'criterion_description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['rubric_rating_level_descriptor']) && (mb_strlen($this->container['rubric_rating_level_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'rubric_rating_level_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets rubric_rating
     *
     * @return int
     */
    public function getRubricRating()
    {
        return $this->container['rubric_rating'];
    }

    /**
     * Sets rubric_rating
     *
     * @param int $rubric_rating The rating achieved for the rubric dimension.
     *
     * @return self
     */
    public function setRubricRating($rubric_rating)
    {
        $this->container['rubric_rating'] = $rubric_rating;

        return $this;
    }

    /**
     * Gets evaluation_element_reference
     *
     * @return \OpenAPI\Client\Model\TpdmEvaluationElementReference
     */
    public function getEvaluationElementReference()
    {
        return $this->container['evaluation_element_reference'];
    }

    /**
     * Sets evaluation_element_reference
     *
     * @param \OpenAPI\Client\Model\TpdmEvaluationElementReference $evaluation_element_reference evaluation_element_reference
     *
     * @return self
     */
    public function setEvaluationElementReference($evaluation_element_reference)
    {
        $this->container['evaluation_element_reference'] = $evaluation_element_reference;

        return $this;
    }

    /**
     * Gets criterion_description
     *
     * @return string
     */
    public function getCriterionDescription()
    {
        return $this->container['criterion_description'];
    }

    /**
     * Sets criterion_description
     *
     * @param string $criterion_description The criterion description for the rubric dimension.
     *
     * @return self
     */
    public function setCriterionDescription($criterion_description)
    {
        if ((mb_strlen($criterion_description) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $criterion_description when calling TpdmRubricDimension., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($criterion_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $criterion_description when calling TpdmRubricDimension., must be bigger than or equal to 1.');
        }

        $this->container['criterion_description'] = $criterion_description;

        return $this;
    }

    /**
     * Gets dimension_order
     *
     * @return int|null
     */
    public function getDimensionOrder()
    {
        return $this->container['dimension_order'];
    }

    /**
     * Sets dimension_order
     *
     * @param int|null $dimension_order The order for the rubric dimension.
     *
     * @return self
     */
    public function setDimensionOrder($dimension_order)
    {
        $this->container['dimension_order'] = $dimension_order;

        return $this;
    }

    /**
     * Gets rubric_rating_level_descriptor
     *
     * @return string|null
     */
    public function getRubricRatingLevelDescriptor()
    {
        return $this->container['rubric_rating_level_descriptor'];
    }

    /**
     * Sets rubric_rating_level_descriptor
     *
     * @param string|null $rubric_rating_level_descriptor The rating level achieved for the rubric dimension.
     *
     * @return self
     */
    public function setRubricRatingLevelDescriptor($rubric_rating_level_descriptor)
    {
        if (!is_null($rubric_rating_level_descriptor) && (mb_strlen($rubric_rating_level_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $rubric_rating_level_descriptor when calling TpdmRubricDimension., must be smaller than or equal to 306.');
        }

        $this->container['rubric_rating_level_descriptor'] = $rubric_rating_level_descriptor;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


