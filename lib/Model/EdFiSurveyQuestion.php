<?php
/**
 * EdFiSurveyQuestion
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiSurveyQuestion Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EdFiSurveyQuestion implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_surveyQuestion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'question_code' => 'string',
        'survey_reference' => '\OpenAPI\Client\Model\EdFiSurveyReference',
        'survey_section_reference' => '\OpenAPI\Client\Model\EdFiSurveySectionReference',
        'matrices' => '\OpenAPI\Client\Model\EdFiSurveyQuestionMatrix[]',
        'question_form_descriptor' => 'string',
        'question_text' => 'string',
        'response_choices' => '\OpenAPI\Client\Model\EdFiSurveyQuestionResponseChoice[]',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'question_code' => null,
        'survey_reference' => null,
        'survey_section_reference' => null,
        'matrices' => null,
        'question_form_descriptor' => null,
        'question_text' => null,
        'response_choices' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'question_code' => 'questionCode',
        'survey_reference' => 'surveyReference',
        'survey_section_reference' => 'surveySectionReference',
        'matrices' => 'matrices',
        'question_form_descriptor' => 'questionFormDescriptor',
        'question_text' => 'questionText',
        'response_choices' => 'responseChoices',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'question_code' => 'setQuestionCode',
        'survey_reference' => 'setSurveyReference',
        'survey_section_reference' => 'setSurveySectionReference',
        'matrices' => 'setMatrices',
        'question_form_descriptor' => 'setQuestionFormDescriptor',
        'question_text' => 'setQuestionText',
        'response_choices' => 'setResponseChoices',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'question_code' => 'getQuestionCode',
        'survey_reference' => 'getSurveyReference',
        'survey_section_reference' => 'getSurveySectionReference',
        'matrices' => 'getMatrices',
        'question_form_descriptor' => 'getQuestionFormDescriptor',
        'question_text' => 'getQuestionText',
        'response_choices' => 'getResponseChoices',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['question_code'] = $data['question_code'] ?? null;
        $this->container['survey_reference'] = $data['survey_reference'] ?? null;
        $this->container['survey_section_reference'] = $data['survey_section_reference'] ?? null;
        $this->container['matrices'] = $data['matrices'] ?? null;
        $this->container['question_form_descriptor'] = $data['question_form_descriptor'] ?? null;
        $this->container['question_text'] = $data['question_text'] ?? null;
        $this->container['response_choices'] = $data['response_choices'] ?? null;
        $this->container['_etag'] = $data['_etag'] ?? null;
        $this->container['_last_modified_date'] = $data['_last_modified_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['question_code'] === null) {
            $invalidProperties[] = "'question_code' can't be null";
        }
        if ((mb_strlen($this->container['question_code']) > 60)) {
            $invalidProperties[] = "invalid value for 'question_code', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['question_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'question_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['survey_reference'] === null) {
            $invalidProperties[] = "'survey_reference' can't be null";
        }
        if ($this->container['question_form_descriptor'] === null) {
            $invalidProperties[] = "'question_form_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['question_form_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'question_form_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['question_text'] === null) {
            $invalidProperties[] = "'question_text' can't be null";
        }
        if ((mb_strlen($this->container['question_text']) > 1024)) {
            $invalidProperties[] = "invalid value for 'question_text', the character length must be smaller than or equal to 1024.";
        }

        if ((mb_strlen($this->container['question_text']) < 1)) {
            $invalidProperties[] = "invalid value for 'question_text', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets question_code
     *
     * @return string
     */
    public function getQuestionCode()
    {
        return $this->container['question_code'];
    }

    /**
     * Sets question_code
     *
     * @param string $question_code The identifying code for the question, unique for the survey.
     *
     * @return self
     */
    public function setQuestionCode($question_code)
    {
        if ((mb_strlen($question_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $question_code when calling EdFiSurveyQuestion., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($question_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $question_code when calling EdFiSurveyQuestion., must be bigger than or equal to 1.');
        }

        $this->container['question_code'] = $question_code;

        return $this;
    }

    /**
     * Gets survey_reference
     *
     * @return \OpenAPI\Client\Model\EdFiSurveyReference
     */
    public function getSurveyReference()
    {
        return $this->container['survey_reference'];
    }

    /**
     * Sets survey_reference
     *
     * @param \OpenAPI\Client\Model\EdFiSurveyReference $survey_reference survey_reference
     *
     * @return self
     */
    public function setSurveyReference($survey_reference)
    {
        $this->container['survey_reference'] = $survey_reference;

        return $this;
    }

    /**
     * Gets survey_section_reference
     *
     * @return \OpenAPI\Client\Model\EdFiSurveySectionReference|null
     */
    public function getSurveySectionReference()
    {
        return $this->container['survey_section_reference'];
    }

    /**
     * Sets survey_section_reference
     *
     * @param \OpenAPI\Client\Model\EdFiSurveySectionReference|null $survey_section_reference survey_section_reference
     *
     * @return self
     */
    public function setSurveySectionReference($survey_section_reference)
    {
        $this->container['survey_section_reference'] = $survey_section_reference;

        return $this;
    }

    /**
     * Gets matrices
     *
     * @return \OpenAPI\Client\Model\EdFiSurveyQuestionMatrix[]|null
     */
    public function getMatrices()
    {
        return $this->container['matrices'];
    }

    /**
     * Sets matrices
     *
     * @param \OpenAPI\Client\Model\EdFiSurveyQuestionMatrix[]|null $matrices An unordered collection of surveyQuestionMatrices. Information about the matrix element in the survey.
     *
     * @return self
     */
    public function setMatrices($matrices)
    {
        $this->container['matrices'] = $matrices;

        return $this;
    }

    /**
     * Gets question_form_descriptor
     *
     * @return string
     */
    public function getQuestionFormDescriptor()
    {
        return $this->container['question_form_descriptor'];
    }

    /**
     * Sets question_form_descriptor
     *
     * @param string $question_form_descriptor The form or type of question.
     *
     * @return self
     */
    public function setQuestionFormDescriptor($question_form_descriptor)
    {
        if ((mb_strlen($question_form_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $question_form_descriptor when calling EdFiSurveyQuestion., must be smaller than or equal to 306.');
        }

        $this->container['question_form_descriptor'] = $question_form_descriptor;

        return $this;
    }

    /**
     * Gets question_text
     *
     * @return string
     */
    public function getQuestionText()
    {
        return $this->container['question_text'];
    }

    /**
     * Sets question_text
     *
     * @param string $question_text The text of the question.
     *
     * @return self
     */
    public function setQuestionText($question_text)
    {
        if ((mb_strlen($question_text) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $question_text when calling EdFiSurveyQuestion., must be smaller than or equal to 1024.');
        }
        if ((mb_strlen($question_text) < 1)) {
            throw new \InvalidArgumentException('invalid length for $question_text when calling EdFiSurveyQuestion., must be bigger than or equal to 1.');
        }

        $this->container['question_text'] = $question_text;

        return $this;
    }

    /**
     * Gets response_choices
     *
     * @return \OpenAPI\Client\Model\EdFiSurveyQuestionResponseChoice[]|null
     */
    public function getResponseChoices()
    {
        return $this->container['response_choices'];
    }

    /**
     * Sets response_choices
     *
     * @param \OpenAPI\Client\Model\EdFiSurveyQuestionResponseChoice[]|null $response_choices An unordered collection of surveyQuestionResponseChoices. The optional list of possible responses to a survey question.
     *
     * @return self
     */
    public function setResponseChoices($response_choices)
    {
        $this->container['response_choices'] = $response_choices;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


