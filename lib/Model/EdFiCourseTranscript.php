<?php
/**
 * EdFiCourseTranscript
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiCourseTranscript Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EdFiCourseTranscript implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_courseTranscript';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'course_attempt_result_descriptor' => 'string',
        'course_reference' => '\OpenAPI\Client\Model\EdFiCourseReference',
        'external_education_organization_reference' => '\OpenAPI\Client\Model\EdFiEducationOrganizationReference',
        'responsible_teacher_staff_reference' => '\OpenAPI\Client\Model\EdFiStaffReference',
        'student_academic_record_reference' => '\OpenAPI\Client\Model\EdFiStudentAcademicRecordReference',
        'academic_subjects' => '\OpenAPI\Client\Model\EdFiCourseTranscriptAcademicSubject[]',
        'alternative_course_identification_codes' => '\OpenAPI\Client\Model\EdFiCourseTranscriptAlternativeCourseIdentificationCode[]',
        'alternative_course_title' => 'string',
        'assigning_organization_identification_code' => 'string',
        'attempted_credit_conversion' => 'double',
        'attempted_credits' => 'double',
        'attempted_credit_type_descriptor' => 'string',
        'course_catalog_url' => 'string',
        'course_programs' => '\OpenAPI\Client\Model\EdFiCourseTranscriptCourseProgram[]',
        'course_repeat_code_descriptor' => 'string',
        'course_title' => 'string',
        'credit_categories' => '\OpenAPI\Client\Model\EdFiCourseTranscriptCreditCategory[]',
        'earned_additional_credits' => '\OpenAPI\Client\Model\EdFiCourseTranscriptEarnedAdditionalCredits[]',
        'earned_credit_conversion' => 'double',
        'earned_credits' => 'double',
        'earned_credit_type_descriptor' => 'string',
        'external_education_organization_name_of_institution' => 'string',
        'final_letter_grade_earned' => 'string',
        'final_numeric_grade_earned' => 'double',
        'method_credit_earned_descriptor' => 'string',
        'partial_course_transcript_awards' => '\OpenAPI\Client\Model\EdFiCourseTranscriptPartialCourseTranscriptAwards[]',
        'sections' => '\OpenAPI\Client\Model\EdFiCourseTranscriptSection[]',
        'when_taken_grade_level_descriptor' => 'string',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'course_attempt_result_descriptor' => null,
        'course_reference' => null,
        'external_education_organization_reference' => null,
        'responsible_teacher_staff_reference' => null,
        'student_academic_record_reference' => null,
        'academic_subjects' => null,
        'alternative_course_identification_codes' => null,
        'alternative_course_title' => null,
        'assigning_organization_identification_code' => null,
        'attempted_credit_conversion' => 'double',
        'attempted_credits' => 'double',
        'attempted_credit_type_descriptor' => null,
        'course_catalog_url' => null,
        'course_programs' => null,
        'course_repeat_code_descriptor' => null,
        'course_title' => null,
        'credit_categories' => null,
        'earned_additional_credits' => null,
        'earned_credit_conversion' => 'double',
        'earned_credits' => 'double',
        'earned_credit_type_descriptor' => null,
        'external_education_organization_name_of_institution' => null,
        'final_letter_grade_earned' => null,
        'final_numeric_grade_earned' => 'double',
        'method_credit_earned_descriptor' => null,
        'partial_course_transcript_awards' => null,
        'sections' => null,
        'when_taken_grade_level_descriptor' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'course_attempt_result_descriptor' => 'courseAttemptResultDescriptor',
        'course_reference' => 'courseReference',
        'external_education_organization_reference' => 'externalEducationOrganizationReference',
        'responsible_teacher_staff_reference' => 'responsibleTeacherStaffReference',
        'student_academic_record_reference' => 'studentAcademicRecordReference',
        'academic_subjects' => 'academicSubjects',
        'alternative_course_identification_codes' => 'alternativeCourseIdentificationCodes',
        'alternative_course_title' => 'alternativeCourseTitle',
        'assigning_organization_identification_code' => 'assigningOrganizationIdentificationCode',
        'attempted_credit_conversion' => 'attemptedCreditConversion',
        'attempted_credits' => 'attemptedCredits',
        'attempted_credit_type_descriptor' => 'attemptedCreditTypeDescriptor',
        'course_catalog_url' => 'courseCatalogURL',
        'course_programs' => 'coursePrograms',
        'course_repeat_code_descriptor' => 'courseRepeatCodeDescriptor',
        'course_title' => 'courseTitle',
        'credit_categories' => 'creditCategories',
        'earned_additional_credits' => 'earnedAdditionalCredits',
        'earned_credit_conversion' => 'earnedCreditConversion',
        'earned_credits' => 'earnedCredits',
        'earned_credit_type_descriptor' => 'earnedCreditTypeDescriptor',
        'external_education_organization_name_of_institution' => 'externalEducationOrganizationNameOfInstitution',
        'final_letter_grade_earned' => 'finalLetterGradeEarned',
        'final_numeric_grade_earned' => 'finalNumericGradeEarned',
        'method_credit_earned_descriptor' => 'methodCreditEarnedDescriptor',
        'partial_course_transcript_awards' => 'partialCourseTranscriptAwards',
        'sections' => 'sections',
        'when_taken_grade_level_descriptor' => 'whenTakenGradeLevelDescriptor',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'course_attempt_result_descriptor' => 'setCourseAttemptResultDescriptor',
        'course_reference' => 'setCourseReference',
        'external_education_organization_reference' => 'setExternalEducationOrganizationReference',
        'responsible_teacher_staff_reference' => 'setResponsibleTeacherStaffReference',
        'student_academic_record_reference' => 'setStudentAcademicRecordReference',
        'academic_subjects' => 'setAcademicSubjects',
        'alternative_course_identification_codes' => 'setAlternativeCourseIdentificationCodes',
        'alternative_course_title' => 'setAlternativeCourseTitle',
        'assigning_organization_identification_code' => 'setAssigningOrganizationIdentificationCode',
        'attempted_credit_conversion' => 'setAttemptedCreditConversion',
        'attempted_credits' => 'setAttemptedCredits',
        'attempted_credit_type_descriptor' => 'setAttemptedCreditTypeDescriptor',
        'course_catalog_url' => 'setCourseCatalogUrl',
        'course_programs' => 'setCoursePrograms',
        'course_repeat_code_descriptor' => 'setCourseRepeatCodeDescriptor',
        'course_title' => 'setCourseTitle',
        'credit_categories' => 'setCreditCategories',
        'earned_additional_credits' => 'setEarnedAdditionalCredits',
        'earned_credit_conversion' => 'setEarnedCreditConversion',
        'earned_credits' => 'setEarnedCredits',
        'earned_credit_type_descriptor' => 'setEarnedCreditTypeDescriptor',
        'external_education_organization_name_of_institution' => 'setExternalEducationOrganizationNameOfInstitution',
        'final_letter_grade_earned' => 'setFinalLetterGradeEarned',
        'final_numeric_grade_earned' => 'setFinalNumericGradeEarned',
        'method_credit_earned_descriptor' => 'setMethodCreditEarnedDescriptor',
        'partial_course_transcript_awards' => 'setPartialCourseTranscriptAwards',
        'sections' => 'setSections',
        'when_taken_grade_level_descriptor' => 'setWhenTakenGradeLevelDescriptor',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'course_attempt_result_descriptor' => 'getCourseAttemptResultDescriptor',
        'course_reference' => 'getCourseReference',
        'external_education_organization_reference' => 'getExternalEducationOrganizationReference',
        'responsible_teacher_staff_reference' => 'getResponsibleTeacherStaffReference',
        'student_academic_record_reference' => 'getStudentAcademicRecordReference',
        'academic_subjects' => 'getAcademicSubjects',
        'alternative_course_identification_codes' => 'getAlternativeCourseIdentificationCodes',
        'alternative_course_title' => 'getAlternativeCourseTitle',
        'assigning_organization_identification_code' => 'getAssigningOrganizationIdentificationCode',
        'attempted_credit_conversion' => 'getAttemptedCreditConversion',
        'attempted_credits' => 'getAttemptedCredits',
        'attempted_credit_type_descriptor' => 'getAttemptedCreditTypeDescriptor',
        'course_catalog_url' => 'getCourseCatalogUrl',
        'course_programs' => 'getCoursePrograms',
        'course_repeat_code_descriptor' => 'getCourseRepeatCodeDescriptor',
        'course_title' => 'getCourseTitle',
        'credit_categories' => 'getCreditCategories',
        'earned_additional_credits' => 'getEarnedAdditionalCredits',
        'earned_credit_conversion' => 'getEarnedCreditConversion',
        'earned_credits' => 'getEarnedCredits',
        'earned_credit_type_descriptor' => 'getEarnedCreditTypeDescriptor',
        'external_education_organization_name_of_institution' => 'getExternalEducationOrganizationNameOfInstitution',
        'final_letter_grade_earned' => 'getFinalLetterGradeEarned',
        'final_numeric_grade_earned' => 'getFinalNumericGradeEarned',
        'method_credit_earned_descriptor' => 'getMethodCreditEarnedDescriptor',
        'partial_course_transcript_awards' => 'getPartialCourseTranscriptAwards',
        'sections' => 'getSections',
        'when_taken_grade_level_descriptor' => 'getWhenTakenGradeLevelDescriptor',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['course_attempt_result_descriptor'] = $data['course_attempt_result_descriptor'] ?? null;
        $this->container['course_reference'] = $data['course_reference'] ?? null;
        $this->container['external_education_organization_reference'] = $data['external_education_organization_reference'] ?? null;
        $this->container['responsible_teacher_staff_reference'] = $data['responsible_teacher_staff_reference'] ?? null;
        $this->container['student_academic_record_reference'] = $data['student_academic_record_reference'] ?? null;
        $this->container['academic_subjects'] = $data['academic_subjects'] ?? null;
        $this->container['alternative_course_identification_codes'] = $data['alternative_course_identification_codes'] ?? null;
        $this->container['alternative_course_title'] = $data['alternative_course_title'] ?? null;
        $this->container['assigning_organization_identification_code'] = $data['assigning_organization_identification_code'] ?? null;
        $this->container['attempted_credit_conversion'] = $data['attempted_credit_conversion'] ?? null;
        $this->container['attempted_credits'] = $data['attempted_credits'] ?? null;
        $this->container['attempted_credit_type_descriptor'] = $data['attempted_credit_type_descriptor'] ?? null;
        $this->container['course_catalog_url'] = $data['course_catalog_url'] ?? null;
        $this->container['course_programs'] = $data['course_programs'] ?? null;
        $this->container['course_repeat_code_descriptor'] = $data['course_repeat_code_descriptor'] ?? null;
        $this->container['course_title'] = $data['course_title'] ?? null;
        $this->container['credit_categories'] = $data['credit_categories'] ?? null;
        $this->container['earned_additional_credits'] = $data['earned_additional_credits'] ?? null;
        $this->container['earned_credit_conversion'] = $data['earned_credit_conversion'] ?? null;
        $this->container['earned_credits'] = $data['earned_credits'] ?? null;
        $this->container['earned_credit_type_descriptor'] = $data['earned_credit_type_descriptor'] ?? null;
        $this->container['external_education_organization_name_of_institution'] = $data['external_education_organization_name_of_institution'] ?? null;
        $this->container['final_letter_grade_earned'] = $data['final_letter_grade_earned'] ?? null;
        $this->container['final_numeric_grade_earned'] = $data['final_numeric_grade_earned'] ?? null;
        $this->container['method_credit_earned_descriptor'] = $data['method_credit_earned_descriptor'] ?? null;
        $this->container['partial_course_transcript_awards'] = $data['partial_course_transcript_awards'] ?? null;
        $this->container['sections'] = $data['sections'] ?? null;
        $this->container['when_taken_grade_level_descriptor'] = $data['when_taken_grade_level_descriptor'] ?? null;
        $this->container['_etag'] = $data['_etag'] ?? null;
        $this->container['_last_modified_date'] = $data['_last_modified_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['course_attempt_result_descriptor'] === null) {
            $invalidProperties[] = "'course_attempt_result_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['course_attempt_result_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'course_attempt_result_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['course_reference'] === null) {
            $invalidProperties[] = "'course_reference' can't be null";
        }
        if ($this->container['student_academic_record_reference'] === null) {
            $invalidProperties[] = "'student_academic_record_reference' can't be null";
        }
        if (!is_null($this->container['alternative_course_title']) && (mb_strlen($this->container['alternative_course_title']) > 60)) {
            $invalidProperties[] = "invalid value for 'alternative_course_title', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['alternative_course_title']) && (mb_strlen($this->container['alternative_course_title']) < 1)) {
            $invalidProperties[] = "invalid value for 'alternative_course_title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['assigning_organization_identification_code']) && (mb_strlen($this->container['assigning_organization_identification_code']) > 60)) {
            $invalidProperties[] = "invalid value for 'assigning_organization_identification_code', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['assigning_organization_identification_code']) && (mb_strlen($this->container['assigning_organization_identification_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'assigning_organization_identification_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['attempted_credits']) && ($this->container['attempted_credits'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'attempted_credits', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['attempted_credit_type_descriptor']) && (mb_strlen($this->container['attempted_credit_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'attempted_credit_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['course_catalog_url']) && (mb_strlen($this->container['course_catalog_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'course_catalog_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['course_catalog_url']) && (mb_strlen($this->container['course_catalog_url']) < 5)) {
            $invalidProperties[] = "invalid value for 'course_catalog_url', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['course_repeat_code_descriptor']) && (mb_strlen($this->container['course_repeat_code_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'course_repeat_code_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['course_title']) && (mb_strlen($this->container['course_title']) > 60)) {
            $invalidProperties[] = "invalid value for 'course_title', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['course_title']) && (mb_strlen($this->container['course_title']) < 1)) {
            $invalidProperties[] = "invalid value for 'course_title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['earned_credits']) && ($this->container['earned_credits'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'earned_credits', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['earned_credit_type_descriptor']) && (mb_strlen($this->container['earned_credit_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'earned_credit_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['external_education_organization_name_of_institution']) && (mb_strlen($this->container['external_education_organization_name_of_institution']) > 75)) {
            $invalidProperties[] = "invalid value for 'external_education_organization_name_of_institution', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['external_education_organization_name_of_institution']) && (mb_strlen($this->container['external_education_organization_name_of_institution']) < 1)) {
            $invalidProperties[] = "invalid value for 'external_education_organization_name_of_institution', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['final_letter_grade_earned']) && (mb_strlen($this->container['final_letter_grade_earned']) > 20)) {
            $invalidProperties[] = "invalid value for 'final_letter_grade_earned', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['final_letter_grade_earned']) && (mb_strlen($this->container['final_letter_grade_earned']) < 1)) {
            $invalidProperties[] = "invalid value for 'final_letter_grade_earned', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['method_credit_earned_descriptor']) && (mb_strlen($this->container['method_credit_earned_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'method_credit_earned_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['when_taken_grade_level_descriptor']) && (mb_strlen($this->container['when_taken_grade_level_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'when_taken_grade_level_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets course_attempt_result_descriptor
     *
     * @return string
     */
    public function getCourseAttemptResultDescriptor()
    {
        return $this->container['course_attempt_result_descriptor'];
    }

    /**
     * Sets course_attempt_result_descriptor
     *
     * @param string $course_attempt_result_descriptor The result from the student's attempt to take the course.
     *
     * @return self
     */
    public function setCourseAttemptResultDescriptor($course_attempt_result_descriptor)
    {
        if ((mb_strlen($course_attempt_result_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $course_attempt_result_descriptor when calling EdFiCourseTranscript., must be smaller than or equal to 306.');
        }

        $this->container['course_attempt_result_descriptor'] = $course_attempt_result_descriptor;

        return $this;
    }

    /**
     * Gets course_reference
     *
     * @return \OpenAPI\Client\Model\EdFiCourseReference
     */
    public function getCourseReference()
    {
        return $this->container['course_reference'];
    }

    /**
     * Sets course_reference
     *
     * @param \OpenAPI\Client\Model\EdFiCourseReference $course_reference course_reference
     *
     * @return self
     */
    public function setCourseReference($course_reference)
    {
        $this->container['course_reference'] = $course_reference;

        return $this;
    }

    /**
     * Gets external_education_organization_reference
     *
     * @return \OpenAPI\Client\Model\EdFiEducationOrganizationReference|null
     */
    public function getExternalEducationOrganizationReference()
    {
        return $this->container['external_education_organization_reference'];
    }

    /**
     * Sets external_education_organization_reference
     *
     * @param \OpenAPI\Client\Model\EdFiEducationOrganizationReference|null $external_education_organization_reference external_education_organization_reference
     *
     * @return self
     */
    public function setExternalEducationOrganizationReference($external_education_organization_reference)
    {
        $this->container['external_education_organization_reference'] = $external_education_organization_reference;

        return $this;
    }

    /**
     * Gets responsible_teacher_staff_reference
     *
     * @return \OpenAPI\Client\Model\EdFiStaffReference|null
     */
    public function getResponsibleTeacherStaffReference()
    {
        return $this->container['responsible_teacher_staff_reference'];
    }

    /**
     * Sets responsible_teacher_staff_reference
     *
     * @param \OpenAPI\Client\Model\EdFiStaffReference|null $responsible_teacher_staff_reference responsible_teacher_staff_reference
     *
     * @return self
     */
    public function setResponsibleTeacherStaffReference($responsible_teacher_staff_reference)
    {
        $this->container['responsible_teacher_staff_reference'] = $responsible_teacher_staff_reference;

        return $this;
    }

    /**
     * Gets student_academic_record_reference
     *
     * @return \OpenAPI\Client\Model\EdFiStudentAcademicRecordReference
     */
    public function getStudentAcademicRecordReference()
    {
        return $this->container['student_academic_record_reference'];
    }

    /**
     * Sets student_academic_record_reference
     *
     * @param \OpenAPI\Client\Model\EdFiStudentAcademicRecordReference $student_academic_record_reference student_academic_record_reference
     *
     * @return self
     */
    public function setStudentAcademicRecordReference($student_academic_record_reference)
    {
        $this->container['student_academic_record_reference'] = $student_academic_record_reference;

        return $this;
    }

    /**
     * Gets academic_subjects
     *
     * @return \OpenAPI\Client\Model\EdFiCourseTranscriptAcademicSubject[]|null
     */
    public function getAcademicSubjects()
    {
        return $this->container['academic_subjects'];
    }

    /**
     * Sets academic_subjects
     *
     * @param \OpenAPI\Client\Model\EdFiCourseTranscriptAcademicSubject[]|null $academic_subjects An unordered collection of courseTranscriptAcademicSubjects. The subject area for the course transcript credits awarded in the course transcript.
     *
     * @return self
     */
    public function setAcademicSubjects($academic_subjects)
    {
        $this->container['academic_subjects'] = $academic_subjects;

        return $this;
    }

    /**
     * Gets alternative_course_identification_codes
     *
     * @return \OpenAPI\Client\Model\EdFiCourseTranscriptAlternativeCourseIdentificationCode[]|null
     */
    public function getAlternativeCourseIdentificationCodes()
    {
        return $this->container['alternative_course_identification_codes'];
    }

    /**
     * Sets alternative_course_identification_codes
     *
     * @param \OpenAPI\Client\Model\EdFiCourseTranscriptAlternativeCourseIdentificationCode[]|null $alternative_course_identification_codes An unordered collection of courseTranscriptAlternativeCourseIdentificationCodes. The code that identifies the course, course offering, the code from an external educational organization, or other alternate course code.
     *
     * @return self
     */
    public function setAlternativeCourseIdentificationCodes($alternative_course_identification_codes)
    {
        $this->container['alternative_course_identification_codes'] = $alternative_course_identification_codes;

        return $this;
    }

    /**
     * Gets alternative_course_title
     *
     * @return string|null
     */
    public function getAlternativeCourseTitle()
    {
        return $this->container['alternative_course_title'];
    }

    /**
     * Sets alternative_course_title
     *
     * @param string|null $alternative_course_title The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
     *
     * @return self
     */
    public function setAlternativeCourseTitle($alternative_course_title)
    {
        if (!is_null($alternative_course_title) && (mb_strlen($alternative_course_title) > 60)) {
            throw new \InvalidArgumentException('invalid length for $alternative_course_title when calling EdFiCourseTranscript., must be smaller than or equal to 60.');
        }
        if (!is_null($alternative_course_title) && (mb_strlen($alternative_course_title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $alternative_course_title when calling EdFiCourseTranscript., must be bigger than or equal to 1.');
        }

        $this->container['alternative_course_title'] = $alternative_course_title;

        return $this;
    }

    /**
     * Gets assigning_organization_identification_code
     *
     * @return string|null
     */
    public function getAssigningOrganizationIdentificationCode()
    {
        return $this->container['assigning_organization_identification_code'];
    }

    /**
     * Sets assigning_organization_identification_code
     *
     * @param string|null $assigning_organization_identification_code The organization code or name assigning the course identification code.
     *
     * @return self
     */
    public function setAssigningOrganizationIdentificationCode($assigning_organization_identification_code)
    {
        if (!is_null($assigning_organization_identification_code) && (mb_strlen($assigning_organization_identification_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $assigning_organization_identification_code when calling EdFiCourseTranscript., must be smaller than or equal to 60.');
        }
        if (!is_null($assigning_organization_identification_code) && (mb_strlen($assigning_organization_identification_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $assigning_organization_identification_code when calling EdFiCourseTranscript., must be bigger than or equal to 1.');
        }

        $this->container['assigning_organization_identification_code'] = $assigning_organization_identification_code;

        return $this;
    }

    /**
     * Gets attempted_credit_conversion
     *
     * @return double|null
     */
    public function getAttemptedCreditConversion()
    {
        return $this->container['attempted_credit_conversion'];
    }

    /**
     * Sets attempted_credit_conversion
     *
     * @param double|null $attempted_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     *
     * @return self
     */
    public function setAttemptedCreditConversion($attempted_credit_conversion)
    {
        $this->container['attempted_credit_conversion'] = $attempted_credit_conversion;

        return $this;
    }

    /**
     * Gets attempted_credits
     *
     * @return double|null
     */
    public function getAttemptedCredits()
    {
        return $this->container['attempted_credits'];
    }

    /**
     * Sets attempted_credits
     *
     * @param double|null $attempted_credits The value of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setAttemptedCredits($attempted_credits)
    {

        if (!is_null($attempted_credits) && ($attempted_credits < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $attempted_credits when calling EdFiCourseTranscript., must be bigger than or equal to 0.0.');
        }

        $this->container['attempted_credits'] = $attempted_credits;

        return $this;
    }

    /**
     * Gets attempted_credit_type_descriptor
     *
     * @return string|null
     */
    public function getAttemptedCreditTypeDescriptor()
    {
        return $this->container['attempted_credit_type_descriptor'];
    }

    /**
     * Sets attempted_credit_type_descriptor
     *
     * @param string|null $attempted_credit_type_descriptor The type of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setAttemptedCreditTypeDescriptor($attempted_credit_type_descriptor)
    {
        if (!is_null($attempted_credit_type_descriptor) && (mb_strlen($attempted_credit_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $attempted_credit_type_descriptor when calling EdFiCourseTranscript., must be smaller than or equal to 306.');
        }

        $this->container['attempted_credit_type_descriptor'] = $attempted_credit_type_descriptor;

        return $this;
    }

    /**
     * Gets course_catalog_url
     *
     * @return string|null
     */
    public function getCourseCatalogUrl()
    {
        return $this->container['course_catalog_url'];
    }

    /**
     * Sets course_catalog_url
     *
     * @param string|null $course_catalog_url The URL for the course catalog that defines the course identification code.
     *
     * @return self
     */
    public function setCourseCatalogUrl($course_catalog_url)
    {
        if (!is_null($course_catalog_url) && (mb_strlen($course_catalog_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $course_catalog_url when calling EdFiCourseTranscript., must be smaller than or equal to 255.');
        }
        if (!is_null($course_catalog_url) && (mb_strlen($course_catalog_url) < 5)) {
            throw new \InvalidArgumentException('invalid length for $course_catalog_url when calling EdFiCourseTranscript., must be bigger than or equal to 5.');
        }

        $this->container['course_catalog_url'] = $course_catalog_url;

        return $this;
    }

    /**
     * Gets course_programs
     *
     * @return \OpenAPI\Client\Model\EdFiCourseTranscriptCourseProgram[]|null
     */
    public function getCoursePrograms()
    {
        return $this->container['course_programs'];
    }

    /**
     * Sets course_programs
     *
     * @param \OpenAPI\Client\Model\EdFiCourseTranscriptCourseProgram[]|null $course_programs An unordered collection of courseTranscriptCoursePrograms. The program(s) that the student participated in the context of the course.
     *
     * @return self
     */
    public function setCoursePrograms($course_programs)
    {
        $this->container['course_programs'] = $course_programs;

        return $this;
    }

    /**
     * Gets course_repeat_code_descriptor
     *
     * @return string|null
     */
    public function getCourseRepeatCodeDescriptor()
    {
        return $this->container['course_repeat_code_descriptor'];
    }

    /**
     * Sets course_repeat_code_descriptor
     *
     * @param string|null $course_repeat_code_descriptor Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student's academic grade average.
     *
     * @return self
     */
    public function setCourseRepeatCodeDescriptor($course_repeat_code_descriptor)
    {
        if (!is_null($course_repeat_code_descriptor) && (mb_strlen($course_repeat_code_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $course_repeat_code_descriptor when calling EdFiCourseTranscript., must be smaller than or equal to 306.');
        }

        $this->container['course_repeat_code_descriptor'] = $course_repeat_code_descriptor;

        return $this;
    }

    /**
     * Gets course_title
     *
     * @return string|null
     */
    public function getCourseTitle()
    {
        return $this->container['course_title'];
    }

    /**
     * Sets course_title
     *
     * @param string|null $course_title The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).
     *
     * @return self
     */
    public function setCourseTitle($course_title)
    {
        if (!is_null($course_title) && (mb_strlen($course_title) > 60)) {
            throw new \InvalidArgumentException('invalid length for $course_title when calling EdFiCourseTranscript., must be smaller than or equal to 60.');
        }
        if (!is_null($course_title) && (mb_strlen($course_title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $course_title when calling EdFiCourseTranscript., must be bigger than or equal to 1.');
        }

        $this->container['course_title'] = $course_title;

        return $this;
    }

    /**
     * Gets credit_categories
     *
     * @return \OpenAPI\Client\Model\EdFiCourseTranscriptCreditCategory[]|null
     */
    public function getCreditCategories()
    {
        return $this->container['credit_categories'];
    }

    /**
     * Sets credit_categories
     *
     * @param \OpenAPI\Client\Model\EdFiCourseTranscriptCreditCategory[]|null $credit_categories An unordered collection of courseTranscriptCreditCategories. A categorization for the course transcript credits awarded in the course transcript.
     *
     * @return self
     */
    public function setCreditCategories($credit_categories)
    {
        $this->container['credit_categories'] = $credit_categories;

        return $this;
    }

    /**
     * Gets earned_additional_credits
     *
     * @return \OpenAPI\Client\Model\EdFiCourseTranscriptEarnedAdditionalCredits[]|null
     */
    public function getEarnedAdditionalCredits()
    {
        return $this->container['earned_additional_credits'];
    }

    /**
     * Sets earned_additional_credits
     *
     * @param \OpenAPI\Client\Model\EdFiCourseTranscriptEarnedAdditionalCredits[]|null $earned_additional_credits An unordered collection of courseTranscriptEarnedAdditionalCredits. The number of additional credits a student attempted and could earn for successfully completing a given course.
     *
     * @return self
     */
    public function setEarnedAdditionalCredits($earned_additional_credits)
    {
        $this->container['earned_additional_credits'] = $earned_additional_credits;

        return $this;
    }

    /**
     * Gets earned_credit_conversion
     *
     * @return double|null
     */
    public function getEarnedCreditConversion()
    {
        return $this->container['earned_credit_conversion'];
    }

    /**
     * Sets earned_credit_conversion
     *
     * @param double|null $earned_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     *
     * @return self
     */
    public function setEarnedCreditConversion($earned_credit_conversion)
    {
        $this->container['earned_credit_conversion'] = $earned_credit_conversion;

        return $this;
    }

    /**
     * Gets earned_credits
     *
     * @return double|null
     */
    public function getEarnedCredits()
    {
        return $this->container['earned_credits'];
    }

    /**
     * Sets earned_credits
     *
     * @param double|null $earned_credits The value of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setEarnedCredits($earned_credits)
    {

        if (!is_null($earned_credits) && ($earned_credits < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $earned_credits when calling EdFiCourseTranscript., must be bigger than or equal to 0.0.');
        }

        $this->container['earned_credits'] = $earned_credits;

        return $this;
    }

    /**
     * Gets earned_credit_type_descriptor
     *
     * @return string|null
     */
    public function getEarnedCreditTypeDescriptor()
    {
        return $this->container['earned_credit_type_descriptor'];
    }

    /**
     * Sets earned_credit_type_descriptor
     *
     * @param string|null $earned_credit_type_descriptor The type of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setEarnedCreditTypeDescriptor($earned_credit_type_descriptor)
    {
        if (!is_null($earned_credit_type_descriptor) && (mb_strlen($earned_credit_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $earned_credit_type_descriptor when calling EdFiCourseTranscript., must be smaller than or equal to 306.');
        }

        $this->container['earned_credit_type_descriptor'] = $earned_credit_type_descriptor;

        return $this;
    }

    /**
     * Gets external_education_organization_name_of_institution
     *
     * @return string|null
     */
    public function getExternalEducationOrganizationNameOfInstitution()
    {
        return $this->container['external_education_organization_name_of_institution'];
    }

    /**
     * Sets external_education_organization_name_of_institution
     *
     * @param string|null $external_education_organization_name_of_institution Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available.
     *
     * @return self
     */
    public function setExternalEducationOrganizationNameOfInstitution($external_education_organization_name_of_institution)
    {
        if (!is_null($external_education_organization_name_of_institution) && (mb_strlen($external_education_organization_name_of_institution) > 75)) {
            throw new \InvalidArgumentException('invalid length for $external_education_organization_name_of_institution when calling EdFiCourseTranscript., must be smaller than or equal to 75.');
        }
        if (!is_null($external_education_organization_name_of_institution) && (mb_strlen($external_education_organization_name_of_institution) < 1)) {
            throw new \InvalidArgumentException('invalid length for $external_education_organization_name_of_institution when calling EdFiCourseTranscript., must be bigger than or equal to 1.');
        }

        $this->container['external_education_organization_name_of_institution'] = $external_education_organization_name_of_institution;

        return $this;
    }

    /**
     * Gets final_letter_grade_earned
     *
     * @return string|null
     */
    public function getFinalLetterGradeEarned()
    {
        return $this->container['final_letter_grade_earned'];
    }

    /**
     * Sets final_letter_grade_earned
     *
     * @param string|null $final_letter_grade_earned The final indicator of student performance in a class as submitted by the instructor.
     *
     * @return self
     */
    public function setFinalLetterGradeEarned($final_letter_grade_earned)
    {
        if (!is_null($final_letter_grade_earned) && (mb_strlen($final_letter_grade_earned) > 20)) {
            throw new \InvalidArgumentException('invalid length for $final_letter_grade_earned when calling EdFiCourseTranscript., must be smaller than or equal to 20.');
        }
        if (!is_null($final_letter_grade_earned) && (mb_strlen($final_letter_grade_earned) < 1)) {
            throw new \InvalidArgumentException('invalid length for $final_letter_grade_earned when calling EdFiCourseTranscript., must be bigger than or equal to 1.');
        }

        $this->container['final_letter_grade_earned'] = $final_letter_grade_earned;

        return $this;
    }

    /**
     * Gets final_numeric_grade_earned
     *
     * @return double|null
     */
    public function getFinalNumericGradeEarned()
    {
        return $this->container['final_numeric_grade_earned'];
    }

    /**
     * Sets final_numeric_grade_earned
     *
     * @param double|null $final_numeric_grade_earned The final indicator of student performance in a class as submitted by the instructor.
     *
     * @return self
     */
    public function setFinalNumericGradeEarned($final_numeric_grade_earned)
    {
        $this->container['final_numeric_grade_earned'] = $final_numeric_grade_earned;

        return $this;
    }

    /**
     * Gets method_credit_earned_descriptor
     *
     * @return string|null
     */
    public function getMethodCreditEarnedDescriptor()
    {
        return $this->container['method_credit_earned_descriptor'];
    }

    /**
     * Sets method_credit_earned_descriptor
     *
     * @param string|null $method_credit_earned_descriptor The method the credits were earned.
     *
     * @return self
     */
    public function setMethodCreditEarnedDescriptor($method_credit_earned_descriptor)
    {
        if (!is_null($method_credit_earned_descriptor) && (mb_strlen($method_credit_earned_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $method_credit_earned_descriptor when calling EdFiCourseTranscript., must be smaller than or equal to 306.');
        }

        $this->container['method_credit_earned_descriptor'] = $method_credit_earned_descriptor;

        return $this;
    }

    /**
     * Gets partial_course_transcript_awards
     *
     * @return \OpenAPI\Client\Model\EdFiCourseTranscriptPartialCourseTranscriptAwards[]|null
     */
    public function getPartialCourseTranscriptAwards()
    {
        return $this->container['partial_course_transcript_awards'];
    }

    /**
     * Sets partial_course_transcript_awards
     *
     * @param \OpenAPI\Client\Model\EdFiCourseTranscriptPartialCourseTranscriptAwards[]|null $partial_course_transcript_awards An unordered collection of courseTranscriptPartialCourseTranscriptAwards. A collection of partial credits and/or grades a student earned against the course over the session, used when awards of credit are incremental.
     *
     * @return self
     */
    public function setPartialCourseTranscriptAwards($partial_course_transcript_awards)
    {
        $this->container['partial_course_transcript_awards'] = $partial_course_transcript_awards;

        return $this;
    }

    /**
     * Gets sections
     *
     * @return \OpenAPI\Client\Model\EdFiCourseTranscriptSection[]|null
     */
    public function getSections()
    {
        return $this->container['sections'];
    }

    /**
     * Sets sections
     *
     * @param \OpenAPI\Client\Model\EdFiCourseTranscriptSection[]|null $sections An unordered collection of courseTranscriptSections. The section(s) associated with the course transcript.
     *
     * @return self
     */
    public function setSections($sections)
    {
        $this->container['sections'] = $sections;

        return $this;
    }

    /**
     * Gets when_taken_grade_level_descriptor
     *
     * @return string|null
     */
    public function getWhenTakenGradeLevelDescriptor()
    {
        return $this->container['when_taken_grade_level_descriptor'];
    }

    /**
     * Sets when_taken_grade_level_descriptor
     *
     * @param string|null $when_taken_grade_level_descriptor Student's grade level at time of course.
     *
     * @return self
     */
    public function setWhenTakenGradeLevelDescriptor($when_taken_grade_level_descriptor)
    {
        if (!is_null($when_taken_grade_level_descriptor) && (mb_strlen($when_taken_grade_level_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $when_taken_grade_level_descriptor when calling EdFiCourseTranscript., must be smaller than or equal to 306.');
        }

        $this->container['when_taken_grade_level_descriptor'] = $when_taken_grade_level_descriptor;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


