<?php
/**
 * EdFiStudentSectionAssociation
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiStudentSectionAssociation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EdFiStudentSectionAssociation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentSectionAssociation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'begin_date' => '\DateTime',
        'section_reference' => '\OpenAPI\Client\Model\EdFiSectionReference',
        'student_reference' => '\OpenAPI\Client\Model\EdFiStudentReference',
        'attempt_status_descriptor' => 'string',
        'end_date' => '\DateTime',
        'homeroom_indicator' => 'bool',
        'programs' => '\OpenAPI\Client\Model\EdFiStudentSectionAssociationProgram[]',
        'repeat_identifier_descriptor' => 'string',
        'teacher_student_data_link_exclusion' => 'bool',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'begin_date' => 'date',
        'section_reference' => null,
        'student_reference' => null,
        'attempt_status_descriptor' => null,
        'end_date' => 'date',
        'homeroom_indicator' => null,
        'programs' => null,
        'repeat_identifier_descriptor' => null,
        'teacher_student_data_link_exclusion' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'begin_date' => 'beginDate',
        'section_reference' => 'sectionReference',
        'student_reference' => 'studentReference',
        'attempt_status_descriptor' => 'attemptStatusDescriptor',
        'end_date' => 'endDate',
        'homeroom_indicator' => 'homeroomIndicator',
        'programs' => 'programs',
        'repeat_identifier_descriptor' => 'repeatIdentifierDescriptor',
        'teacher_student_data_link_exclusion' => 'teacherStudentDataLinkExclusion',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'begin_date' => 'setBeginDate',
        'section_reference' => 'setSectionReference',
        'student_reference' => 'setStudentReference',
        'attempt_status_descriptor' => 'setAttemptStatusDescriptor',
        'end_date' => 'setEndDate',
        'homeroom_indicator' => 'setHomeroomIndicator',
        'programs' => 'setPrograms',
        'repeat_identifier_descriptor' => 'setRepeatIdentifierDescriptor',
        'teacher_student_data_link_exclusion' => 'setTeacherStudentDataLinkExclusion',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'begin_date' => 'getBeginDate',
        'section_reference' => 'getSectionReference',
        'student_reference' => 'getStudentReference',
        'attempt_status_descriptor' => 'getAttemptStatusDescriptor',
        'end_date' => 'getEndDate',
        'homeroom_indicator' => 'getHomeroomIndicator',
        'programs' => 'getPrograms',
        'repeat_identifier_descriptor' => 'getRepeatIdentifierDescriptor',
        'teacher_student_data_link_exclusion' => 'getTeacherStudentDataLinkExclusion',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['begin_date'] = $data['begin_date'] ?? null;
        $this->container['section_reference'] = $data['section_reference'] ?? null;
        $this->container['student_reference'] = $data['student_reference'] ?? null;
        $this->container['attempt_status_descriptor'] = $data['attempt_status_descriptor'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['homeroom_indicator'] = $data['homeroom_indicator'] ?? null;
        $this->container['programs'] = $data['programs'] ?? null;
        $this->container['repeat_identifier_descriptor'] = $data['repeat_identifier_descriptor'] ?? null;
        $this->container['teacher_student_data_link_exclusion'] = $data['teacher_student_data_link_exclusion'] ?? null;
        $this->container['_etag'] = $data['_etag'] ?? null;
        $this->container['_last_modified_date'] = $data['_last_modified_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['begin_date'] === null) {
            $invalidProperties[] = "'begin_date' can't be null";
        }
        if ($this->container['section_reference'] === null) {
            $invalidProperties[] = "'section_reference' can't be null";
        }
        if ($this->container['student_reference'] === null) {
            $invalidProperties[] = "'student_reference' can't be null";
        }
        if (!is_null($this->container['attempt_status_descriptor']) && (mb_strlen($this->container['attempt_status_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'attempt_status_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['repeat_identifier_descriptor']) && (mb_strlen($this->container['repeat_identifier_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'repeat_identifier_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets begin_date
     *
     * @return \DateTime
     */
    public function getBeginDate()
    {
        return $this->container['begin_date'];
    }

    /**
     * Sets begin_date
     *
     * @param \DateTime $begin_date Month, day, and year of the student's entry or assignment to the section.
     *
     * @return self
     */
    public function setBeginDate($begin_date)
    {
        $this->container['begin_date'] = $begin_date;

        return $this;
    }

    /**
     * Gets section_reference
     *
     * @return \OpenAPI\Client\Model\EdFiSectionReference
     */
    public function getSectionReference()
    {
        return $this->container['section_reference'];
    }

    /**
     * Sets section_reference
     *
     * @param \OpenAPI\Client\Model\EdFiSectionReference $section_reference section_reference
     *
     * @return self
     */
    public function setSectionReference($section_reference)
    {
        $this->container['section_reference'] = $section_reference;

        return $this;
    }

    /**
     * Gets student_reference
     *
     * @return \OpenAPI\Client\Model\EdFiStudentReference
     */
    public function getStudentReference()
    {
        return $this->container['student_reference'];
    }

    /**
     * Sets student_reference
     *
     * @param \OpenAPI\Client\Model\EdFiStudentReference $student_reference student_reference
     *
     * @return self
     */
    public function setStudentReference($student_reference)
    {
        $this->container['student_reference'] = $student_reference;

        return $this;
    }

    /**
     * Gets attempt_status_descriptor
     *
     * @return string|null
     */
    public function getAttemptStatusDescriptor()
    {
        return $this->container['attempt_status_descriptor'];
    }

    /**
     * Sets attempt_status_descriptor
     *
     * @param string|null $attempt_status_descriptor An indication of the student's completion status for the section.
     *
     * @return self
     */
    public function setAttemptStatusDescriptor($attempt_status_descriptor)
    {
        if (!is_null($attempt_status_descriptor) && (mb_strlen($attempt_status_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $attempt_status_descriptor when calling EdFiStudentSectionAssociation., must be smaller than or equal to 306.');
        }

        $this->container['attempt_status_descriptor'] = $attempt_status_descriptor;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date Month, day, and year of the withdrawal or exit of the student from the section.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets homeroom_indicator
     *
     * @return bool|null
     */
    public function getHomeroomIndicator()
    {
        return $this->container['homeroom_indicator'];
    }

    /**
     * Sets homeroom_indicator
     *
     * @param bool|null $homeroom_indicator Indicates the section is the student's homeroom. Homeroom period may the convention for taking daily attendance.
     *
     * @return self
     */
    public function setHomeroomIndicator($homeroom_indicator)
    {
        $this->container['homeroom_indicator'] = $homeroom_indicator;

        return $this;
    }

    /**
     * Gets programs
     *
     * @return \OpenAPI\Client\Model\EdFiStudentSectionAssociationProgram[]|null
     */
    public function getPrograms()
    {
        return $this->container['programs'];
    }

    /**
     * Sets programs
     *
     * @param \OpenAPI\Client\Model\EdFiStudentSectionAssociationProgram[]|null $programs An unordered collection of studentSectionAssociationPrograms. The program(s) that the student is participating in the context of the course.
     *
     * @return self
     */
    public function setPrograms($programs)
    {
        $this->container['programs'] = $programs;

        return $this;
    }

    /**
     * Gets repeat_identifier_descriptor
     *
     * @return string|null
     */
    public function getRepeatIdentifierDescriptor()
    {
        return $this->container['repeat_identifier_descriptor'];
    }

    /**
     * Sets repeat_identifier_descriptor
     *
     * @param string|null $repeat_identifier_descriptor An indication as to whether a student has previously taken a given course.
     *
     * @return self
     */
    public function setRepeatIdentifierDescriptor($repeat_identifier_descriptor)
    {
        if (!is_null($repeat_identifier_descriptor) && (mb_strlen($repeat_identifier_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $repeat_identifier_descriptor when calling EdFiStudentSectionAssociation., must be smaller than or equal to 306.');
        }

        $this->container['repeat_identifier_descriptor'] = $repeat_identifier_descriptor;

        return $this;
    }

    /**
     * Gets teacher_student_data_link_exclusion
     *
     * @return bool|null
     */
    public function getTeacherStudentDataLinkExclusion()
    {
        return $this->container['teacher_student_data_link_exclusion'];
    }

    /**
     * Sets teacher_student_data_link_exclusion
     *
     * @param bool|null $teacher_student_data_link_exclusion Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.
     *
     * @return self
     */
    public function setTeacherStudentDataLinkExclusion($teacher_student_data_link_exclusion)
    {
        $this->container['teacher_student_data_link_exclusion'] = $teacher_student_data_link_exclusion;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


