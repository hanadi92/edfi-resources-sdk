<?php
/**
 * EdFiStudent
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiStudent Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EdFiStudent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_student';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'student_unique_id' => 'string',
        'person_reference' => '\OpenAPI\Client\Model\EdFiPersonReference',
        'birth_city' => 'string',
        'birth_country_descriptor' => 'string',
        'birth_date' => '\DateTime',
        'birth_international_province' => 'string',
        'birth_sex_descriptor' => 'string',
        'birth_state_abbreviation_descriptor' => 'string',
        'citizenship_status_descriptor' => 'string',
        'date_entered_us' => '\DateTime',
        'first_name' => 'string',
        'generation_code_suffix' => 'string',
        'identification_documents' => '\OpenAPI\Client\Model\EdFiStudentIdentificationDocument[]',
        'last_surname' => 'string',
        'maiden_name' => 'string',
        'middle_name' => 'string',
        'multiple_birth_status' => 'bool',
        'other_names' => '\OpenAPI\Client\Model\EdFiStudentOtherName[]',
        'personal_identification_documents' => '\OpenAPI\Client\Model\EdFiStudentPersonalIdentificationDocument[]',
        'personal_title_prefix' => 'string',
        'preferred_first_name' => 'string',
        'preferred_last_surname' => 'string',
        'visas' => '\OpenAPI\Client\Model\EdFiStudentVisa[]',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'student_unique_id' => null,
        'person_reference' => null,
        'birth_city' => null,
        'birth_country_descriptor' => null,
        'birth_date' => 'date',
        'birth_international_province' => null,
        'birth_sex_descriptor' => null,
        'birth_state_abbreviation_descriptor' => null,
        'citizenship_status_descriptor' => null,
        'date_entered_us' => 'date',
        'first_name' => null,
        'generation_code_suffix' => null,
        'identification_documents' => null,
        'last_surname' => null,
        'maiden_name' => null,
        'middle_name' => null,
        'multiple_birth_status' => null,
        'other_names' => null,
        'personal_identification_documents' => null,
        'personal_title_prefix' => null,
        'preferred_first_name' => null,
        'preferred_last_surname' => null,
        'visas' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'student_unique_id' => 'studentUniqueId',
        'person_reference' => 'personReference',
        'birth_city' => 'birthCity',
        'birth_country_descriptor' => 'birthCountryDescriptor',
        'birth_date' => 'birthDate',
        'birth_international_province' => 'birthInternationalProvince',
        'birth_sex_descriptor' => 'birthSexDescriptor',
        'birth_state_abbreviation_descriptor' => 'birthStateAbbreviationDescriptor',
        'citizenship_status_descriptor' => 'citizenshipStatusDescriptor',
        'date_entered_us' => 'dateEnteredUS',
        'first_name' => 'firstName',
        'generation_code_suffix' => 'generationCodeSuffix',
        'identification_documents' => 'identificationDocuments',
        'last_surname' => 'lastSurname',
        'maiden_name' => 'maidenName',
        'middle_name' => 'middleName',
        'multiple_birth_status' => 'multipleBirthStatus',
        'other_names' => 'otherNames',
        'personal_identification_documents' => 'personalIdentificationDocuments',
        'personal_title_prefix' => 'personalTitlePrefix',
        'preferred_first_name' => 'preferredFirstName',
        'preferred_last_surname' => 'preferredLastSurname',
        'visas' => 'visas',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'student_unique_id' => 'setStudentUniqueId',
        'person_reference' => 'setPersonReference',
        'birth_city' => 'setBirthCity',
        'birth_country_descriptor' => 'setBirthCountryDescriptor',
        'birth_date' => 'setBirthDate',
        'birth_international_province' => 'setBirthInternationalProvince',
        'birth_sex_descriptor' => 'setBirthSexDescriptor',
        'birth_state_abbreviation_descriptor' => 'setBirthStateAbbreviationDescriptor',
        'citizenship_status_descriptor' => 'setCitizenshipStatusDescriptor',
        'date_entered_us' => 'setDateEnteredUs',
        'first_name' => 'setFirstName',
        'generation_code_suffix' => 'setGenerationCodeSuffix',
        'identification_documents' => 'setIdentificationDocuments',
        'last_surname' => 'setLastSurname',
        'maiden_name' => 'setMaidenName',
        'middle_name' => 'setMiddleName',
        'multiple_birth_status' => 'setMultipleBirthStatus',
        'other_names' => 'setOtherNames',
        'personal_identification_documents' => 'setPersonalIdentificationDocuments',
        'personal_title_prefix' => 'setPersonalTitlePrefix',
        'preferred_first_name' => 'setPreferredFirstName',
        'preferred_last_surname' => 'setPreferredLastSurname',
        'visas' => 'setVisas',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'student_unique_id' => 'getStudentUniqueId',
        'person_reference' => 'getPersonReference',
        'birth_city' => 'getBirthCity',
        'birth_country_descriptor' => 'getBirthCountryDescriptor',
        'birth_date' => 'getBirthDate',
        'birth_international_province' => 'getBirthInternationalProvince',
        'birth_sex_descriptor' => 'getBirthSexDescriptor',
        'birth_state_abbreviation_descriptor' => 'getBirthStateAbbreviationDescriptor',
        'citizenship_status_descriptor' => 'getCitizenshipStatusDescriptor',
        'date_entered_us' => 'getDateEnteredUs',
        'first_name' => 'getFirstName',
        'generation_code_suffix' => 'getGenerationCodeSuffix',
        'identification_documents' => 'getIdentificationDocuments',
        'last_surname' => 'getLastSurname',
        'maiden_name' => 'getMaidenName',
        'middle_name' => 'getMiddleName',
        'multiple_birth_status' => 'getMultipleBirthStatus',
        'other_names' => 'getOtherNames',
        'personal_identification_documents' => 'getPersonalIdentificationDocuments',
        'personal_title_prefix' => 'getPersonalTitlePrefix',
        'preferred_first_name' => 'getPreferredFirstName',
        'preferred_last_surname' => 'getPreferredLastSurname',
        'visas' => 'getVisas',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['student_unique_id'] = $data['student_unique_id'] ?? null;
        $this->container['person_reference'] = $data['person_reference'] ?? null;
        $this->container['birth_city'] = $data['birth_city'] ?? null;
        $this->container['birth_country_descriptor'] = $data['birth_country_descriptor'] ?? null;
        $this->container['birth_date'] = $data['birth_date'] ?? null;
        $this->container['birth_international_province'] = $data['birth_international_province'] ?? null;
        $this->container['birth_sex_descriptor'] = $data['birth_sex_descriptor'] ?? null;
        $this->container['birth_state_abbreviation_descriptor'] = $data['birth_state_abbreviation_descriptor'] ?? null;
        $this->container['citizenship_status_descriptor'] = $data['citizenship_status_descriptor'] ?? null;
        $this->container['date_entered_us'] = $data['date_entered_us'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['generation_code_suffix'] = $data['generation_code_suffix'] ?? null;
        $this->container['identification_documents'] = $data['identification_documents'] ?? null;
        $this->container['last_surname'] = $data['last_surname'] ?? null;
        $this->container['maiden_name'] = $data['maiden_name'] ?? null;
        $this->container['middle_name'] = $data['middle_name'] ?? null;
        $this->container['multiple_birth_status'] = $data['multiple_birth_status'] ?? null;
        $this->container['other_names'] = $data['other_names'] ?? null;
        $this->container['personal_identification_documents'] = $data['personal_identification_documents'] ?? null;
        $this->container['personal_title_prefix'] = $data['personal_title_prefix'] ?? null;
        $this->container['preferred_first_name'] = $data['preferred_first_name'] ?? null;
        $this->container['preferred_last_surname'] = $data['preferred_last_surname'] ?? null;
        $this->container['visas'] = $data['visas'] ?? null;
        $this->container['_etag'] = $data['_etag'] ?? null;
        $this->container['_last_modified_date'] = $data['_last_modified_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['student_unique_id'] === null) {
            $invalidProperties[] = "'student_unique_id' can't be null";
        }
        if ((mb_strlen($this->container['student_unique_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'student_unique_id', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['student_unique_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'student_unique_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['birth_city']) && (mb_strlen($this->container['birth_city']) > 30)) {
            $invalidProperties[] = "invalid value for 'birth_city', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['birth_city']) && (mb_strlen($this->container['birth_city']) < 2)) {
            $invalidProperties[] = "invalid value for 'birth_city', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['birth_country_descriptor']) && (mb_strlen($this->container['birth_country_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'birth_country_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['birth_date'] === null) {
            $invalidProperties[] = "'birth_date' can't be null";
        }
        if (!is_null($this->container['birth_international_province']) && (mb_strlen($this->container['birth_international_province']) > 150)) {
            $invalidProperties[] = "invalid value for 'birth_international_province', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['birth_international_province']) && (mb_strlen($this->container['birth_international_province']) < 1)) {
            $invalidProperties[] = "invalid value for 'birth_international_province', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['birth_sex_descriptor']) && (mb_strlen($this->container['birth_sex_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'birth_sex_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['birth_state_abbreviation_descriptor']) && (mb_strlen($this->container['birth_state_abbreviation_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'birth_state_abbreviation_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['citizenship_status_descriptor']) && (mb_strlen($this->container['citizenship_status_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'citizenship_status_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 75.";
        }

        if ((mb_strlen($this->container['first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['generation_code_suffix']) && (mb_strlen($this->container['generation_code_suffix']) > 10)) {
            $invalidProperties[] = "invalid value for 'generation_code_suffix', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['generation_code_suffix']) && (mb_strlen($this->container['generation_code_suffix']) < 1)) {
            $invalidProperties[] = "invalid value for 'generation_code_suffix', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['last_surname'] === null) {
            $invalidProperties[] = "'last_surname' can't be null";
        }
        if ((mb_strlen($this->container['last_surname']) > 75)) {
            $invalidProperties[] = "invalid value for 'last_surname', the character length must be smaller than or equal to 75.";
        }

        if ((mb_strlen($this->container['last_surname']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_surname', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['maiden_name']) && (mb_strlen($this->container['maiden_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'maiden_name', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['maiden_name']) && (mb_strlen($this->container['maiden_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'maiden_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['middle_name']) && (mb_strlen($this->container['middle_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'middle_name', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['middle_name']) && (mb_strlen($this->container['middle_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'middle_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['personal_title_prefix']) && (mb_strlen($this->container['personal_title_prefix']) > 30)) {
            $invalidProperties[] = "invalid value for 'personal_title_prefix', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['personal_title_prefix']) && (mb_strlen($this->container['personal_title_prefix']) < 1)) {
            $invalidProperties[] = "invalid value for 'personal_title_prefix', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['preferred_first_name']) && (mb_strlen($this->container['preferred_first_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'preferred_first_name', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['preferred_first_name']) && (mb_strlen($this->container['preferred_first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'preferred_first_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['preferred_last_surname']) && (mb_strlen($this->container['preferred_last_surname']) > 75)) {
            $invalidProperties[] = "invalid value for 'preferred_last_surname', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['preferred_last_surname']) && (mb_strlen($this->container['preferred_last_surname']) < 1)) {
            $invalidProperties[] = "invalid value for 'preferred_last_surname', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets student_unique_id
     *
     * @return string
     */
    public function getStudentUniqueId()
    {
        return $this->container['student_unique_id'];
    }

    /**
     * Sets student_unique_id
     *
     * @param string $student_unique_id A unique alphanumeric code assigned to a student.
     *
     * @return self
     */
    public function setStudentUniqueId($student_unique_id)
    {
        if ((mb_strlen($student_unique_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $student_unique_id when calling EdFiStudent., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($student_unique_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $student_unique_id when calling EdFiStudent., must be bigger than or equal to 1.');
        }

        $this->container['student_unique_id'] = $student_unique_id;

        return $this;
    }

    /**
     * Gets person_reference
     *
     * @return \OpenAPI\Client\Model\EdFiPersonReference|null
     */
    public function getPersonReference()
    {
        return $this->container['person_reference'];
    }

    /**
     * Sets person_reference
     *
     * @param \OpenAPI\Client\Model\EdFiPersonReference|null $person_reference person_reference
     *
     * @return self
     */
    public function setPersonReference($person_reference)
    {
        $this->container['person_reference'] = $person_reference;

        return $this;
    }

    /**
     * Gets birth_city
     *
     * @return string|null
     */
    public function getBirthCity()
    {
        return $this->container['birth_city'];
    }

    /**
     * Sets birth_city
     *
     * @param string|null $birth_city The city the student was born in.
     *
     * @return self
     */
    public function setBirthCity($birth_city)
    {
        if (!is_null($birth_city) && (mb_strlen($birth_city) > 30)) {
            throw new \InvalidArgumentException('invalid length for $birth_city when calling EdFiStudent., must be smaller than or equal to 30.');
        }
        if (!is_null($birth_city) && (mb_strlen($birth_city) < 2)) {
            throw new \InvalidArgumentException('invalid length for $birth_city when calling EdFiStudent., must be bigger than or equal to 2.');
        }

        $this->container['birth_city'] = $birth_city;

        return $this;
    }

    /**
     * Gets birth_country_descriptor
     *
     * @return string|null
     */
    public function getBirthCountryDescriptor()
    {
        return $this->container['birth_country_descriptor'];
    }

    /**
     * Sets birth_country_descriptor
     *
     * @param string|null $birth_country_descriptor The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
     *
     * @return self
     */
    public function setBirthCountryDescriptor($birth_country_descriptor)
    {
        if (!is_null($birth_country_descriptor) && (mb_strlen($birth_country_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $birth_country_descriptor when calling EdFiStudent., must be smaller than or equal to 306.');
        }

        $this->container['birth_country_descriptor'] = $birth_country_descriptor;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime $birth_date The month, day, and year on which an individual was born.
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets birth_international_province
     *
     * @return string|null
     */
    public function getBirthInternationalProvince()
    {
        return $this->container['birth_international_province'];
    }

    /**
     * Sets birth_international_province
     *
     * @param string|null $birth_international_province For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
     *
     * @return self
     */
    public function setBirthInternationalProvince($birth_international_province)
    {
        if (!is_null($birth_international_province) && (mb_strlen($birth_international_province) > 150)) {
            throw new \InvalidArgumentException('invalid length for $birth_international_province when calling EdFiStudent., must be smaller than or equal to 150.');
        }
        if (!is_null($birth_international_province) && (mb_strlen($birth_international_province) < 1)) {
            throw new \InvalidArgumentException('invalid length for $birth_international_province when calling EdFiStudent., must be bigger than or equal to 1.');
        }

        $this->container['birth_international_province'] = $birth_international_province;

        return $this;
    }

    /**
     * Gets birth_sex_descriptor
     *
     * @return string|null
     */
    public function getBirthSexDescriptor()
    {
        return $this->container['birth_sex_descriptor'];
    }

    /**
     * Sets birth_sex_descriptor
     *
     * @param string|null $birth_sex_descriptor A person's sex at birth.
     *
     * @return self
     */
    public function setBirthSexDescriptor($birth_sex_descriptor)
    {
        if (!is_null($birth_sex_descriptor) && (mb_strlen($birth_sex_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $birth_sex_descriptor when calling EdFiStudent., must be smaller than or equal to 306.');
        }

        $this->container['birth_sex_descriptor'] = $birth_sex_descriptor;

        return $this;
    }

    /**
     * Gets birth_state_abbreviation_descriptor
     *
     * @return string|null
     */
    public function getBirthStateAbbreviationDescriptor()
    {
        return $this->container['birth_state_abbreviation_descriptor'];
    }

    /**
     * Sets birth_state_abbreviation_descriptor
     *
     * @param string|null $birth_state_abbreviation_descriptor The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
     *
     * @return self
     */
    public function setBirthStateAbbreviationDescriptor($birth_state_abbreviation_descriptor)
    {
        if (!is_null($birth_state_abbreviation_descriptor) && (mb_strlen($birth_state_abbreviation_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $birth_state_abbreviation_descriptor when calling EdFiStudent., must be smaller than or equal to 306.');
        }

        $this->container['birth_state_abbreviation_descriptor'] = $birth_state_abbreviation_descriptor;

        return $this;
    }

    /**
     * Gets citizenship_status_descriptor
     *
     * @return string|null
     */
    public function getCitizenshipStatusDescriptor()
    {
        return $this->container['citizenship_status_descriptor'];
    }

    /**
     * Sets citizenship_status_descriptor
     *
     * @param string|null $citizenship_status_descriptor An indicator of whether or not the person is a U.S. citizen.
     *
     * @return self
     */
    public function setCitizenshipStatusDescriptor($citizenship_status_descriptor)
    {
        if (!is_null($citizenship_status_descriptor) && (mb_strlen($citizenship_status_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $citizenship_status_descriptor when calling EdFiStudent., must be smaller than or equal to 306.');
        }

        $this->container['citizenship_status_descriptor'] = $citizenship_status_descriptor;

        return $this;
    }

    /**
     * Gets date_entered_us
     *
     * @return \DateTime|null
     */
    public function getDateEnteredUs()
    {
        return $this->container['date_entered_us'];
    }

    /**
     * Sets date_entered_us
     *
     * @param \DateTime|null $date_entered_us For students born outside of the U.S., the date the student entered the U.S.
     *
     * @return self
     */
    public function setDateEnteredUs($date_entered_us)
    {
        $this->container['date_entered_us'] = $date_entered_us;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if ((mb_strlen($first_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling EdFiStudent., must be smaller than or equal to 75.');
        }
        if ((mb_strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling EdFiStudent., must be bigger than or equal to 1.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets generation_code_suffix
     *
     * @return string|null
     */
    public function getGenerationCodeSuffix()
    {
        return $this->container['generation_code_suffix'];
    }

    /**
     * Sets generation_code_suffix
     *
     * @param string|null $generation_code_suffix An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
     *
     * @return self
     */
    public function setGenerationCodeSuffix($generation_code_suffix)
    {
        if (!is_null($generation_code_suffix) && (mb_strlen($generation_code_suffix) > 10)) {
            throw new \InvalidArgumentException('invalid length for $generation_code_suffix when calling EdFiStudent., must be smaller than or equal to 10.');
        }
        if (!is_null($generation_code_suffix) && (mb_strlen($generation_code_suffix) < 1)) {
            throw new \InvalidArgumentException('invalid length for $generation_code_suffix when calling EdFiStudent., must be bigger than or equal to 1.');
        }

        $this->container['generation_code_suffix'] = $generation_code_suffix;

        return $this;
    }

    /**
     * Gets identification_documents
     *
     * @return \OpenAPI\Client\Model\EdFiStudentIdentificationDocument[]|null
     */
    public function getIdentificationDocuments()
    {
        return $this->container['identification_documents'];
    }

    /**
     * Sets identification_documents
     *
     * @param \OpenAPI\Client\Model\EdFiStudentIdentificationDocument[]|null $identification_documents An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship.
     *
     * @return self
     */
    public function setIdentificationDocuments($identification_documents)
    {
        $this->container['identification_documents'] = $identification_documents;

        return $this;
    }

    /**
     * Gets last_surname
     *
     * @return string
     */
    public function getLastSurname()
    {
        return $this->container['last_surname'];
    }

    /**
     * Sets last_surname
     *
     * @param string $last_surname The name borne in common by members of a family.
     *
     * @return self
     */
    public function setLastSurname($last_surname)
    {
        if ((mb_strlen($last_surname) > 75)) {
            throw new \InvalidArgumentException('invalid length for $last_surname when calling EdFiStudent., must be smaller than or equal to 75.');
        }
        if ((mb_strlen($last_surname) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_surname when calling EdFiStudent., must be bigger than or equal to 1.');
        }

        $this->container['last_surname'] = $last_surname;

        return $this;
    }

    /**
     * Gets maiden_name
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maiden_name'];
    }

    /**
     * Sets maiden_name
     *
     * @param string|null $maiden_name The individual's maiden name.
     *
     * @return self
     */
    public function setMaidenName($maiden_name)
    {
        if (!is_null($maiden_name) && (mb_strlen($maiden_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $maiden_name when calling EdFiStudent., must be smaller than or equal to 75.');
        }
        if (!is_null($maiden_name) && (mb_strlen($maiden_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $maiden_name when calling EdFiStudent., must be bigger than or equal to 1.');
        }

        $this->container['maiden_name'] = $maiden_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony.
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (!is_null($middle_name) && (mb_strlen($middle_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $middle_name when calling EdFiStudent., must be smaller than or equal to 75.');
        }
        if (!is_null($middle_name) && (mb_strlen($middle_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $middle_name when calling EdFiStudent., must be bigger than or equal to 1.');
        }

        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets multiple_birth_status
     *
     * @return bool|null
     */
    public function getMultipleBirthStatus()
    {
        return $this->container['multiple_birth_status'];
    }

    /**
     * Sets multiple_birth_status
     *
     * @param bool|null $multiple_birth_status Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
     *
     * @return self
     */
    public function setMultipleBirthStatus($multiple_birth_status)
    {
        $this->container['multiple_birth_status'] = $multiple_birth_status;

        return $this;
    }

    /**
     * Gets other_names
     *
     * @return \OpenAPI\Client\Model\EdFiStudentOtherName[]|null
     */
    public function getOtherNames()
    {
        return $this->container['other_names'];
    }

    /**
     * Sets other_names
     *
     * @param \OpenAPI\Client\Model\EdFiStudentOtherName[]|null $other_names An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
     *
     * @return self
     */
    public function setOtherNames($other_names)
    {
        $this->container['other_names'] = $other_names;

        return $this;
    }

    /**
     * Gets personal_identification_documents
     *
     * @return \OpenAPI\Client\Model\EdFiStudentPersonalIdentificationDocument[]|null
     */
    public function getPersonalIdentificationDocuments()
    {
        return $this->container['personal_identification_documents'];
    }

    /**
     * Sets personal_identification_documents
     *
     * @param \OpenAPI\Client\Model\EdFiStudentPersonalIdentificationDocument[]|null $personal_identification_documents An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one's personal identity; for example: drivers license, passport, birth certificate, etc.
     *
     * @return self
     */
    public function setPersonalIdentificationDocuments($personal_identification_documents)
    {
        $this->container['personal_identification_documents'] = $personal_identification_documents;

        return $this;
    }

    /**
     * Gets personal_title_prefix
     *
     * @return string|null
     */
    public function getPersonalTitlePrefix()
    {
        return $this->container['personal_title_prefix'];
    }

    /**
     * Sets personal_title_prefix
     *
     * @param string|null $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual.
     *
     * @return self
     */
    public function setPersonalTitlePrefix($personal_title_prefix)
    {
        if (!is_null($personal_title_prefix) && (mb_strlen($personal_title_prefix) > 30)) {
            throw new \InvalidArgumentException('invalid length for $personal_title_prefix when calling EdFiStudent., must be smaller than or equal to 30.');
        }
        if (!is_null($personal_title_prefix) && (mb_strlen($personal_title_prefix) < 1)) {
            throw new \InvalidArgumentException('invalid length for $personal_title_prefix when calling EdFiStudent., must be bigger than or equal to 1.');
        }

        $this->container['personal_title_prefix'] = $personal_title_prefix;

        return $this;
    }

    /**
     * Gets preferred_first_name
     *
     * @return string|null
     */
    public function getPreferredFirstName()
    {
        return $this->container['preferred_first_name'];
    }

    /**
     * Sets preferred_first_name
     *
     * @param string|null $preferred_first_name The first name the individual prefers, if different from their legal first name
     *
     * @return self
     */
    public function setPreferredFirstName($preferred_first_name)
    {
        if (!is_null($preferred_first_name) && (mb_strlen($preferred_first_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $preferred_first_name when calling EdFiStudent., must be smaller than or equal to 75.');
        }
        if (!is_null($preferred_first_name) && (mb_strlen($preferred_first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $preferred_first_name when calling EdFiStudent., must be bigger than or equal to 1.');
        }

        $this->container['preferred_first_name'] = $preferred_first_name;

        return $this;
    }

    /**
     * Gets preferred_last_surname
     *
     * @return string|null
     */
    public function getPreferredLastSurname()
    {
        return $this->container['preferred_last_surname'];
    }

    /**
     * Sets preferred_last_surname
     *
     * @param string|null $preferred_last_surname The last name the individual prefers, if different from their legal last name
     *
     * @return self
     */
    public function setPreferredLastSurname($preferred_last_surname)
    {
        if (!is_null($preferred_last_surname) && (mb_strlen($preferred_last_surname) > 75)) {
            throw new \InvalidArgumentException('invalid length for $preferred_last_surname when calling EdFiStudent., must be smaller than or equal to 75.');
        }
        if (!is_null($preferred_last_surname) && (mb_strlen($preferred_last_surname) < 1)) {
            throw new \InvalidArgumentException('invalid length for $preferred_last_surname when calling EdFiStudent., must be bigger than or equal to 1.');
        }

        $this->container['preferred_last_surname'] = $preferred_last_surname;

        return $this;
    }

    /**
     * Gets visas
     *
     * @return \OpenAPI\Client\Model\EdFiStudentVisa[]|null
     */
    public function getVisas()
    {
        return $this->container['visas'];
    }

    /**
     * Sets visas
     *
     * @param \OpenAPI\Client\Model\EdFiStudentVisa[]|null $visas An unordered collection of studentVisas. An indicator of a non-US citizen's Visa type.
     *
     * @return self
     */
    public function setVisas($visas)
    {
        $this->container['visas'] = $visas;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


