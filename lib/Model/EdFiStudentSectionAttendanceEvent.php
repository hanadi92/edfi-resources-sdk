<?php
/**
 * EdFiStudentSectionAttendanceEvent
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiStudentSectionAttendanceEvent Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EdFiStudentSectionAttendanceEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentSectionAttendanceEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'attendance_event_category_descriptor' => 'string',
        'event_date' => '\DateTime',
        'section_reference' => '\OpenAPI\Client\Model\EdFiSectionReference',
        'student_reference' => '\OpenAPI\Client\Model\EdFiStudentReference',
        'arrival_time' => 'string',
        'attendance_event_reason' => 'string',
        'class_periods' => '\OpenAPI\Client\Model\EdFiStudentSectionAttendanceEventClassPeriod[]',
        'departure_time' => 'string',
        'educational_environment_descriptor' => 'string',
        'event_duration' => 'double',
        'section_attendance_duration' => 'int',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'attendance_event_category_descriptor' => null,
        'event_date' => 'date',
        'section_reference' => null,
        'student_reference' => null,
        'arrival_time' => null,
        'attendance_event_reason' => null,
        'class_periods' => null,
        'departure_time' => null,
        'educational_environment_descriptor' => null,
        'event_duration' => 'double',
        'section_attendance_duration' => 'int32',
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'attendance_event_category_descriptor' => 'attendanceEventCategoryDescriptor',
        'event_date' => 'eventDate',
        'section_reference' => 'sectionReference',
        'student_reference' => 'studentReference',
        'arrival_time' => 'arrivalTime',
        'attendance_event_reason' => 'attendanceEventReason',
        'class_periods' => 'classPeriods',
        'departure_time' => 'departureTime',
        'educational_environment_descriptor' => 'educationalEnvironmentDescriptor',
        'event_duration' => 'eventDuration',
        'section_attendance_duration' => 'sectionAttendanceDuration',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'attendance_event_category_descriptor' => 'setAttendanceEventCategoryDescriptor',
        'event_date' => 'setEventDate',
        'section_reference' => 'setSectionReference',
        'student_reference' => 'setStudentReference',
        'arrival_time' => 'setArrivalTime',
        'attendance_event_reason' => 'setAttendanceEventReason',
        'class_periods' => 'setClassPeriods',
        'departure_time' => 'setDepartureTime',
        'educational_environment_descriptor' => 'setEducationalEnvironmentDescriptor',
        'event_duration' => 'setEventDuration',
        'section_attendance_duration' => 'setSectionAttendanceDuration',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'attendance_event_category_descriptor' => 'getAttendanceEventCategoryDescriptor',
        'event_date' => 'getEventDate',
        'section_reference' => 'getSectionReference',
        'student_reference' => 'getStudentReference',
        'arrival_time' => 'getArrivalTime',
        'attendance_event_reason' => 'getAttendanceEventReason',
        'class_periods' => 'getClassPeriods',
        'departure_time' => 'getDepartureTime',
        'educational_environment_descriptor' => 'getEducationalEnvironmentDescriptor',
        'event_duration' => 'getEventDuration',
        'section_attendance_duration' => 'getSectionAttendanceDuration',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['attendance_event_category_descriptor'] = $data['attendance_event_category_descriptor'] ?? null;
        $this->container['event_date'] = $data['event_date'] ?? null;
        $this->container['section_reference'] = $data['section_reference'] ?? null;
        $this->container['student_reference'] = $data['student_reference'] ?? null;
        $this->container['arrival_time'] = $data['arrival_time'] ?? null;
        $this->container['attendance_event_reason'] = $data['attendance_event_reason'] ?? null;
        $this->container['class_periods'] = $data['class_periods'] ?? null;
        $this->container['departure_time'] = $data['departure_time'] ?? null;
        $this->container['educational_environment_descriptor'] = $data['educational_environment_descriptor'] ?? null;
        $this->container['event_duration'] = $data['event_duration'] ?? null;
        $this->container['section_attendance_duration'] = $data['section_attendance_duration'] ?? null;
        $this->container['_etag'] = $data['_etag'] ?? null;
        $this->container['_last_modified_date'] = $data['_last_modified_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['attendance_event_category_descriptor'] === null) {
            $invalidProperties[] = "'attendance_event_category_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['attendance_event_category_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'attendance_event_category_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['event_date'] === null) {
            $invalidProperties[] = "'event_date' can't be null";
        }
        if ($this->container['section_reference'] === null) {
            $invalidProperties[] = "'section_reference' can't be null";
        }
        if ($this->container['student_reference'] === null) {
            $invalidProperties[] = "'student_reference' can't be null";
        }
        if (!is_null($this->container['attendance_event_reason']) && (mb_strlen($this->container['attendance_event_reason']) > 255)) {
            $invalidProperties[] = "invalid value for 'attendance_event_reason', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['attendance_event_reason']) && (mb_strlen($this->container['attendance_event_reason']) < 1)) {
            $invalidProperties[] = "invalid value for 'attendance_event_reason', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['educational_environment_descriptor']) && (mb_strlen($this->container['educational_environment_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'educational_environment_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['event_duration']) && ($this->container['event_duration'] > 1.0)) {
            $invalidProperties[] = "invalid value for 'event_duration', must be smaller than or equal to 1.0.";
        }

        if (!is_null($this->container['event_duration']) && ($this->container['event_duration'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'event_duration', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['section_attendance_duration']) && ($this->container['section_attendance_duration'] > 1440)) {
            $invalidProperties[] = "invalid value for 'section_attendance_duration', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['section_attendance_duration']) && ($this->container['section_attendance_duration'] < 0)) {
            $invalidProperties[] = "invalid value for 'section_attendance_duration', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets attendance_event_category_descriptor
     *
     * @return string
     */
    public function getAttendanceEventCategoryDescriptor()
    {
        return $this->container['attendance_event_category_descriptor'];
    }

    /**
     * Sets attendance_event_category_descriptor
     *
     * @param string $attendance_event_category_descriptor A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy.
     *
     * @return self
     */
    public function setAttendanceEventCategoryDescriptor($attendance_event_category_descriptor)
    {
        if ((mb_strlen($attendance_event_category_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $attendance_event_category_descriptor when calling EdFiStudentSectionAttendanceEvent., must be smaller than or equal to 306.');
        }

        $this->container['attendance_event_category_descriptor'] = $attendance_event_category_descriptor;

        return $this;
    }

    /**
     * Gets event_date
     *
     * @return \DateTime
     */
    public function getEventDate()
    {
        return $this->container['event_date'];
    }

    /**
     * Sets event_date
     *
     * @param \DateTime $event_date Date for this attendance event.
     *
     * @return self
     */
    public function setEventDate($event_date)
    {
        $this->container['event_date'] = $event_date;

        return $this;
    }

    /**
     * Gets section_reference
     *
     * @return \OpenAPI\Client\Model\EdFiSectionReference
     */
    public function getSectionReference()
    {
        return $this->container['section_reference'];
    }

    /**
     * Sets section_reference
     *
     * @param \OpenAPI\Client\Model\EdFiSectionReference $section_reference section_reference
     *
     * @return self
     */
    public function setSectionReference($section_reference)
    {
        $this->container['section_reference'] = $section_reference;

        return $this;
    }

    /**
     * Gets student_reference
     *
     * @return \OpenAPI\Client\Model\EdFiStudentReference
     */
    public function getStudentReference()
    {
        return $this->container['student_reference'];
    }

    /**
     * Sets student_reference
     *
     * @param \OpenAPI\Client\Model\EdFiStudentReference $student_reference student_reference
     *
     * @return self
     */
    public function setStudentReference($student_reference)
    {
        $this->container['student_reference'] = $student_reference;

        return $this;
    }

    /**
     * Gets arrival_time
     *
     * @return string|null
     */
    public function getArrivalTime()
    {
        return $this->container['arrival_time'];
    }

    /**
     * Sets arrival_time
     *
     * @param string|null $arrival_time The time of day the student arrived for the attendance event in ISO 8601 format.
     *
     * @return self
     */
    public function setArrivalTime($arrival_time)
    {
        $this->container['arrival_time'] = $arrival_time;

        return $this;
    }

    /**
     * Gets attendance_event_reason
     *
     * @return string|null
     */
    public function getAttendanceEventReason()
    {
        return $this->container['attendance_event_reason'];
    }

    /**
     * Sets attendance_event_reason
     *
     * @param string|null $attendance_event_reason The reported reason for a student's absence.
     *
     * @return self
     */
    public function setAttendanceEventReason($attendance_event_reason)
    {
        if (!is_null($attendance_event_reason) && (mb_strlen($attendance_event_reason) > 255)) {
            throw new \InvalidArgumentException('invalid length for $attendance_event_reason when calling EdFiStudentSectionAttendanceEvent., must be smaller than or equal to 255.');
        }
        if (!is_null($attendance_event_reason) && (mb_strlen($attendance_event_reason) < 1)) {
            throw new \InvalidArgumentException('invalid length for $attendance_event_reason when calling EdFiStudentSectionAttendanceEvent., must be bigger than or equal to 1.');
        }

        $this->container['attendance_event_reason'] = $attendance_event_reason;

        return $this;
    }

    /**
     * Gets class_periods
     *
     * @return \OpenAPI\Client\Model\EdFiStudentSectionAttendanceEventClassPeriod[]|null
     */
    public function getClassPeriods()
    {
        return $this->container['class_periods'];
    }

    /**
     * Sets class_periods
     *
     * @param \OpenAPI\Client\Model\EdFiStudentSectionAttendanceEventClassPeriod[]|null $class_periods An unordered collection of studentSectionAttendanceEventClassPeriods. The class period(s) to which the section attendance event applies.
     *
     * @return self
     */
    public function setClassPeriods($class_periods)
    {
        $this->container['class_periods'] = $class_periods;

        return $this;
    }

    /**
     * Gets departure_time
     *
     * @return string|null
     */
    public function getDepartureTime()
    {
        return $this->container['departure_time'];
    }

    /**
     * Sets departure_time
     *
     * @param string|null $departure_time The time of day the student departed for the attendance event in ISO 8601 format.
     *
     * @return self
     */
    public function setDepartureTime($departure_time)
    {
        $this->container['departure_time'] = $departure_time;

        return $this;
    }

    /**
     * Gets educational_environment_descriptor
     *
     * @return string|null
     */
    public function getEducationalEnvironmentDescriptor()
    {
        return $this->container['educational_environment_descriptor'];
    }

    /**
     * Sets educational_environment_descriptor
     *
     * @param string|null $educational_environment_descriptor The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
     *
     * @return self
     */
    public function setEducationalEnvironmentDescriptor($educational_environment_descriptor)
    {
        if (!is_null($educational_environment_descriptor) && (mb_strlen($educational_environment_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $educational_environment_descriptor when calling EdFiStudentSectionAttendanceEvent., must be smaller than or equal to 306.');
        }

        $this->container['educational_environment_descriptor'] = $educational_environment_descriptor;

        return $this;
    }

    /**
     * Gets event_duration
     *
     * @return double|null
     */
    public function getEventDuration()
    {
        return $this->container['event_duration'];
    }

    /**
     * Sets event_duration
     *
     * @param double|null $event_duration The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.
     *
     * @return self
     */
    public function setEventDuration($event_duration)
    {

        if (!is_null($event_duration) && ($event_duration > 1.0)) {
            throw new \InvalidArgumentException('invalid value for $event_duration when calling EdFiStudentSectionAttendanceEvent., must be smaller than or equal to 1.0.');
        }
        if (!is_null($event_duration) && ($event_duration < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $event_duration when calling EdFiStudentSectionAttendanceEvent., must be bigger than or equal to 0.0.');
        }

        $this->container['event_duration'] = $event_duration;

        return $this;
    }

    /**
     * Gets section_attendance_duration
     *
     * @return int|null
     */
    public function getSectionAttendanceDuration()
    {
        return $this->container['section_attendance_duration'];
    }

    /**
     * Sets section_attendance_duration
     *
     * @param int|null $section_attendance_duration The duration in minutes of the section attendance event.
     *
     * @return self
     */
    public function setSectionAttendanceDuration($section_attendance_duration)
    {

        if (!is_null($section_attendance_duration) && ($section_attendance_duration > 1440)) {
            throw new \InvalidArgumentException('invalid value for $section_attendance_duration when calling EdFiStudentSectionAttendanceEvent., must be smaller than or equal to 1440.');
        }
        if (!is_null($section_attendance_duration) && ($section_attendance_duration < 0)) {
            throw new \InvalidArgumentException('invalid value for $section_attendance_duration when calling EdFiStudentSectionAttendanceEvent., must be bigger than or equal to 0.');
        }

        $this->container['section_attendance_duration'] = $section_attendance_duration;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


